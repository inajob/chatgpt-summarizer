{"pubDate": "2023-07-17T14:00:37", "original_title": "DisplayPort: Under The Hood", "link": "https://hackaday.com/2023/07/17/displayport-under-the-hood/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/Displayport.jpg", "original_content": "Last time, we looked at all the things that make DisplayPort unique for its users. What about the things that make it unique for hackers? Lets get into all the ways that DisplayPort can serve you on your modern tech wrangling adventures.\nYou Are Watching The AUX Channel\nWith DisplayPort, the I2C bus weve always seen come bundled with VGA, DVI and HDMI, is no more  its been replaced by the AUX bus. AUX is a 1 MHz bidirectional diffpair  just a bit too complex for a cheap logic analyzer, though, possibly, something you could wrangle with the RP2040s PIOs. Hacking thoughts aside, its a transparent replacement for I2C, so that software doesnt have to be rewritten  for instance, it usually does I2C device passthrough over AUX, so that EDID data can still be stored in a separate EEPROM chip on the monitor or eDP LCD panel.\nAUX isnt just a differential bus, its more pseudodifferential, like USB2  for instance, AUX_P and AUX_N are used separately, with a combination of 1 M\u03a9 and 100 k\u03a9 pullups and pulldowns signaling different states of the physical connection  for instance, a pullup on AUX+ and a pulldown on AUX- means that an external device has been connected. If youd like to learn which combination of resistors means what, you can find in the DisplayPort specification, which isnt distributed openly but isnt hard to come by, either.\nAlso, DisplayPort link training happens over AUX, and in order to facilitate that, a piece of DisplayPort controllers external memory is usually exposed over the AUX channel, through a mechanism thats called DPCD. If you dig a bit, using DPCD as the keyword, you can easily reach into the lower-level details of your DisplayPort connection. Some of the DPCD memory map is static, and some parts are FIFOs you can funnel data into, or out of. You can find a wide variety of documents online which describe the DPCD structure  for now, heres a piece of Bash that works on Linux graphics drivers for AMD and Intel, and will show you you the first 16 bytes of DPCD:\n# sudo dd if=/dev/drm_dp_aux0 bs=1 skip=256 count=16 |xxd\n00000000: 0084 0000 0000 0000 0108 0000 0000 0000  ................\n[...]\nIn particular, the 4th nibble (digit) here describes the amount of lanes for the DisplayPort link established  as you can see, my laptop uses a four-lane link. Also, the /dev/drm_dp_aux0 path might need to be adjusted for your device. In case you ever want to debug your DP link, having direct access to the DPCD memory space like this might help you quite a bit! For now, lets move onto other practical aspects.\nGot eDP, Now What?\nWhat if you have an eDP display handy and youd like to reuse it in a project? First, youll want to know the pinout. For laptop displays, the eDP panel pinouts are reasonably standardized  there are three pinouts, one of them 30-pin 2-lane, one 40-pin 2-lane with extra USB and I2C pins for wiring up a touchscreen, and one 40-pin connector with 4 lanes and no touchscreen support; you can see more details on these pinouts here. Other pinouts exist, but theyre rare  my friend has so far found one display within a Wacom tablet, which uses the 30-pin pinout but flips the pins, so that pin 1 is mapped to pin 30 of the connector and so on; this has, sadly, resulted in magic smoke. That said, this is rare, and a quick board trace observation or even a multimeter check will spare you such trouble if youre unsure. Also, the panel datasheet will answer all of your questions, if not all.\nIf your pinout is the 30-pin one, youre in luck  theres a wide variety of driver boards with same hardware and panel-tailored firmware; there are also generic boards that tend to work well with 1920 x 1080 panels, the most popular resolution for laptop screens within the past five years. It does seem like those boards might make certain kinds of shortcuts when it comes to DisplayPort link management, however  whether they assume link training parameters of the panel theyre programmed for, or perhaps its the pixel format, but my experience has shown  if you can grab a board thats labelled to be programmed for your specific panel, consider doing just that; otherwise, it might not start, or, you might get visual interfaces or weird flickering. On the other hand, as Ive been getting into laptop display reuse, Ive found a few boards where the DP panel resolution can be set with jumpers, and those have proven themselves to be more than universal enough, so if you can grab one alongside your pre-programmed board order, you might be rewarded with greater compatibility than youd expect for any further eDP tinkering adventures of yours.\nWhen it comes to tablet eDP displays, its way less standardized, but you can absolutely get by with the panels datasheets or even schematics. Sometimes, theres even ready-to-go DisplayPort breakouts for a certain kind of display, but its rare, and you might want to bodge your own. Of course, bodging a 2.7 Gbps link with jumper wires isnt as viable, this is not PCIe, which is to say, youre getting into the territory of drawing your own DisplayPort-carrying PCB. Lets equip you accordingly.\nTaming The Diffpairs\nOf course, like any self-respecting high-bandwidth interface of modern day, DisplayPort uses differential pairs. Now, this wouldnt be the first interface that we need to draw controlled impedance pairs for  you can revisit the PCIe diffpair routing article for the basics. There are differences between PCIe and DisplayPort routing, of course  for a start, DisplayPort needs 100 ohm impedance, as opposed to PCIes 85 ohms; not much of a problem and the pairs parameters wont even be all that different. However, there are also further restrictions  as a result of those, DisplayPort no longer has the wet string factor.\nRemember how I mentioned that, for PCIe, you dont need to bring all the pairs to the same length. Well, thats the problem now, you do have bring all the differential pairs to the same length for DisplayPort, in addition to the intra-pair skew compensation that you still have to do. In KiCad, the tool for that is mapped to the key 8, and it lets you lengthen individual pairs by adding wiggles, of the kind that you most likely have already seen on PCBs out there.\nNow, according to the specification, the between-pair difference can be from 5 cm to 1 cm total, depending on the DisplayPort link speed. You might think that you have some leeway here, but its better if you limit your differences into the 1 mm \u00a0 2 mm millimeter range  some of your leeway might be already spent by your GPU, your cabling, or your monitor, in short, whatever parts of the DP link that you dont control.\nIn addition to the inter-pair length matching, DisplayPort link training isnt as accommodating. You can no longer flip pairs whenever you need to do that to make your routing prettier, as much as that might be tempting  the DisplayPort link do not treat that with kindness. On the bright side, this more or less marks the end of what you need to know to route the main link differential pairs.\nThis is enough for you to dive into the DisplayPort pool  but first, let me let you in on one last thing you should know. Youve learned about the main link pairs, youve learned about the AUX bus  Id like to bring the HPD signal to your attention. Despite the existence of the AUX bus, HPD is a required signal for a DisplayPort link, since, in a way, AUX is just like USB 2.0  a display (device, sink) cant speak until its spoken to; HPD is its way of bringing attention to itself, avoiding polling that USB has to use. Its also a signal used for display hotplug, apparently, necessarily complementary to the method used on the AUX pairs to detect when a display has been connected. In short, make sure you dont omit HPD.\nDisplayPort Conquered, Altmode Is Next\nToday, hopefully, Ive provided enough information for you to be comfortable handling a DisplayPort link, whenever you might decide to take upon such a responsibility! We would be remiss to not talk about the DisplayPort altmode in more depth  the intersection of two widely adopted modern-day technologies, DisplayPort and USB-C. Next time, well see towards making you comfortable handling that, too, with the amount of depth that I hope you will appreciate. Until then  heres to making you more comfortable in modern-day display technology fields!", "title": "\u30cf\u30c3\u30ab\u30fc\u306b\u3068\u3063\u3066\u306eDisplayPort\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5229\u70b9", "body": "DisplayPort\u30cf\u30c3\u30ab\u30fc\u306b\u3068\u3063\u3066\u306e\u30e6\u30cb\u30fc\u30af\u306a\u70b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002AUX\u30c1\u30e3\u30f3\u30cd\u30eb\u3068HPD\u4fe1\u53f7\u306e\u91cd\u8981\u6027\u3082\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n", "titles": ["\u30cf\u30c3\u30ab\u30fc\u306b\u3068\u3063\u3066\u306eDisplayPort\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5229\u70b9", "I2C\u30d0\u30b9\u306e\u4ee3\u308f\u308a\u306bAUX\u30d0\u30b9\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u7406\u7531", "DisplayPort\u306e\u30ea\u30f3\u30af\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u8a73\u7d30\u3068DPCD\u30e1\u30e2\u30ea\u306e\u5229\u7528\u65b9\u6cd5", "eDP\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u30ea\u30e6\u30fc\u30b9\u65b9\u6cd5\u3068\u63a5\u7d9a\u306e\u30d4\u30f3\u30a2\u30a6\u30c8\u306b\u3064\u3044\u3066", "DisplayPort\u306e\u5dee\u52d5\u30da\u30a2\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3068\u5236\u7d04\u306b\u3064\u3044\u3066"]}