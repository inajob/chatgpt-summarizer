{"pubDate": "2024-06-12T11:00:31", "original_title": "Baldur\u2019s Gate III Comes to the TRS-80 Model 100", "link": "https://hackaday.com/2024/06/12/baldurs-gate-iii-comes-to-the-trs-80-model-100/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/06/m100rpg_feat.jpg", "original_content": "To say that Tandys TRS-80 Model 100 was an influential piece of computer hardware would be something of an understatement. While theres some debate over which computer can historically be called the first laptop, the Model 100 was early enough that it helped influence our modern idea of portable computing. It was also one of the most successful of these early portables, due in part to how easy it was to write your own software for it using the built-in BASIC interpreter.\nBut as handy and capable as that integrated development environment might have been, it never produced anything as impressive as this Baldurs Gate III demake created by [Alex Bowen]. Written in assembly, the games engine implements a subset of the\u00a0Dungeons  Dragons Systems Reference Document (SRD), and is flexible enough that you could use it to produce your own ASCII art role-playing game that can run on either a Model 100 emulator like Virtual-T or on the real hardware.\n\n\nDont worry about not having enough experience with the Model 100s hardware to conjure up your own fantasy adventure. Assembly is done through zasm, and even though the code is intended for the 8085 CPU used in the Model 100, its actually written in Z80 syntax. The assemblers support for mapping unicode characters also allows you to get a serviceable preview of what the levels will look like on the Model 100s display right inside of your editor.\nAs you might imagine, getting such a complex game running on the meager hardware of the Model 100 took considerable trickery. [Alex] goes into plenty of detail in the projects documentation and the video below, but perhaps our favorite optimization is the text compression routine. A Python script ran through all of the text strings used in the game to identify the most commonly used character sequences, and then mapped them to values which could be used to piece together words and sentences. This saved approximately 1500 bytes, which might not sound like a lot to a modern game developer, but its much appreciated on a machine thats only got 24 kilobytes of RAM to begin with.\n\nWeve seen a number of projects featuring the TRS-80 Model 100, but most of them involve ripping out the original hardware and replacing it with something modern. That said, if youve got a stock Model 100 and give this technical masterpiece a shot, wed love to hear about it in the comments.\n<!--more-->\n"}