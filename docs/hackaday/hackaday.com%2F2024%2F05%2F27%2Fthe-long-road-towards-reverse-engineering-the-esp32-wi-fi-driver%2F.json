{"pubDate": "2024-05-27T11:00:17", "original_title": "The Long Road Towards Reverse Engineering The ESP32 Wi-Fi Driver", "link": "https://hackaday.com/2024/05/27/the-long-road-towards-reverse-engineering-the-esp32-wi-fi-driver/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2018/12/ESP32_800x250.jpg", "original_content": "Although much of the software that runs on the ESP32 microcontroller is open source, the Wi-Fi driver is not. Instead, it uses a proprietary binary blob. This was no problem for [Jasper Devreker]s reverse-engineering of the ESP32s Wi-Fi stack so far until he came face to face with reverse-engineering the initialization of the Wi-Fi peripheral. As it turns out, there is a lot of work involved after you call esp_phy_enable in the Espressif binary blob, with the team logging 53,286 peripheral accesses during the initialization phase. In comparison, sending a Wi-Fi packet takes about ten calls.\nCurrently, the way that the initialization step is handled is by having the initialization routine in the binary blob do its thing by configuring the radio and other elements before killing the FreeRTOS task and replacing it with their own version. The team is actively looking for a clean approach for moving forward that will avoid simply writing everything from scratch. For the Wi-Fi MAC, existing code (e.g., FreeBSDs stack) could be used, but the radio code is much more of a headache. Clearly, theres still a lot more work to be done in order to get a fully open-source Wi-Fi MAC and stack for the ESP32, but having the community (thats you) pitch in might speed things up if theres demand for an open-source driver.\n[Jaspers] been working on this for a while. Hes even built a Faraday cage to make the task easier.", "title": "ESP32\u306eWi-Fi\u30b9\u30bf\u30c3\u30af\u9006\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u4f5c\u696d", "body": "ESP32\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u591a\u304f\u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u3059\u304c\u3001Wi-Fi\u30c9\u30e9\u30a4\u30d0\u30fc\u306f\u30d7\u30ed\u30d7\u30e9\u30a4\u30a8\u30bf\u30ea\u306a\u30d0\u30a4\u30ca\u30ea\u30d6\u30ed\u30d6\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\u30b9\u30c6\u30c3\u30d7\u306e\u53d6\u308a\u6271\u3044\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u307e\u3060\u591a\u304f\u306e\u4f5c\u696d\u304c\u5fc5\u8981\u3067\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u5354\u529b\u304c\u5fc5\u8981\u3067\u3059\u3002", "titles": ["ESP32\u306eWi-Fi\u30b9\u30bf\u30c3\u30af\u9006\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u4f5c\u696d", "ESP32 Wi-Fi\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\u306e\u9006\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u6311\u6226", "ESP32\u306eWi-Fi MAC\u30b3\u30fc\u30c9\u306e\u9006\u30b3\u30f3\u30d1\u30a4\u30eb", "ESP32\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9Wi-Fi\u30b9\u30bf\u30c3\u30af\u958b\u767a", "\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u5354\u529b\u3068ESP32\u306eWi-Fi\u30c9\u30e9\u30a4\u30d0\u30fc\u306b\u671f\u5f85"]}