{"pubDate": "2024-01-11T09:00:14", "original_title": "Faking Bluetooth LE With An nRF24L01+ Module", "link": "https://hackaday.com/2024/01/11/faking-bluetooth-le-with-an-nrf24l01-module/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/01/nrf24l01_pinout.png", "original_content": "Despite the name, Bluetooth Low Energy (BLE) has very little to do with the original Bluetooth, other than its use of the same 2.4 GHz frequencies. This is where [Dmitry] got the idea to use a 2.4 GHz nRF24L01+ module to implement his very own BLE device, without the typical BLE chipset. This should be easy, since this popular IC supports GFSK modulation, 1 MHz channels and the 1 MBit data rate of BLE.\nDespite of how simple BLE seems to implement, [Dmitry] quickly came across a range of issues due to limitations of the nRF24L01+. These include no support for a 24-bit CRC, a too sluggish PLL cycling for BLEs frequency hopping, and as the coup de gr\u00e2ce, a lack for incoming data packets larger than 32 bytes  which destroyed any hope of accepting incoming connections.\nUnperturbed, [Dmitry] set to work implementing what would work on this IC: broadcasting BLE packets. In the article he covers the entire code (in C) that allows the nRF24L01+ to send broadcast packets and any BLE-supporting device thats listening to receive them. Admittedly not as useful as having a fully functional BLE stack, but good enough for broadcasting something like sensor data. It also raises the question of which alternative released in the intervening decade to the venerable nRF24L01+ might fill in the missing features, without making a dedicated BLE IC (or ESP32 variant) look more cost-effective.\nIts always a good day when a new project from [Dmitry] hits the tip line. Weve previously covered his impressive efforts to add more RAM to the RP2040, and his business card that can boot Linux on an ATSAMD21.", "title": "\"nRF24L01+\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305f\u72ec\u81ea\u306eBLE\u30c7\u30d0\u30a4\u30b9\u306e\u5b9f\u88c5\u65b9\u6cd5\"", "body": "BLE\u30c7\u30d0\u30a4\u30b9\u3092\u4f5c\u308b\u305f\u3081\u306b\u3001[Dmitry]\u306f\u901a\u5e38\u306eBLE\u30c1\u30c3\u30d7\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u305b\u305a\u306b2.4 GHz\u306enRF24L01+\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d3b\u7528\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001nRF24L01+\u306e\u5236\u9650\u306b\u3088\u308a\u3001\u53d7\u4fe1\u30c7\u30fc\u30bf\u306e\u6700\u5927\u30b5\u30a4\u30ba\u304c32\u30d0\u30a4\u30c8\u4ee5\u4e0b\u306b\u5236\u9650\u3055\u308c\u308b\u306a\u3069\u306e\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u3067\u3082[Dmitry]\u306f\u3001nRF24L01+\u3092\u4f7f\u7528\u3057\u3066BLE\u30d1\u30b1\u30c3\u30c8\u3092\u653e\u9001\u3059\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002", "titles": ["\"nRF24L01+\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305f\u72ec\u81ea\u306eBLE\u30c7\u30d0\u30a4\u30b9\u306e\u5b9f\u88c5\u65b9\u6cd5\"", "\"nRF24L01+\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305fBLE\u30d1\u30b1\u30c3\u30c8\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u65b9\u6cd5\"", "\"nRF24L01+\u306e\u5236\u9650\u306b\u76f4\u9762\u3057\u306a\u304c\u3089\u5b9f\u88c5\u3059\u308bBLE\u30c7\u30d0\u30a4\u30b9\"", "\"32\u30d0\u30a4\u30c8\u4ee5\u4e0a\u306e\u53d7\u4fe1\u30c7\u30fc\u30bf\u30d1\u30b1\u30c3\u30c8\u3092\u6271\u3048\u306a\u3044nRF24L01+\u306e\u5236\u7d04\"", "\"\u4ee3\u66ff\u54c1\u306e\u63a2\u6c42\uff1anRF24L01+\u306e\u4e0d\u8db3\u6a5f\u80fd\u3092\u88dc\u3046BLE IC\u306e\u9078\u629e\u80a2\u3068\u306f\uff1f\""]}