{"pubDate": "2023-06-27T02:00:06", "original_title": "A Browser Approach to Parsing", "link": "https://hackaday.com/2023/06/26/a-browser-approach-to-parsing/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/06/adv.png", "original_content": "There are few rites of programmer passage as iconic as writing your first parser. You might want to interpret or compile a scripting language, or you might want to accept natural-language-like commands. You need a parser. [Varunramesh] wants to show you parser combinators, a technique used to make practical parsers. But the demonstration using interactive code cells in the web page is nearly as interesting as the technique.\nHistorically, you parse tokens, and this technique can do that too, but it can also operate directly on character streams if you prefer. The idea is related to recursive descent parsing, where you attempt to parse certain things, and if those things fail, you try again.\n\nThere are ways to match in a fuzzy way using Levenshtein distance. That way, if the user enters a typo, you can often recover from it. You could probably implement other schemes for this, too, like soundex, if you were parsing names. These types of parsers do have some limitations, but they are much easier to create, maintain, and debug than traditional parsers.\nThis is the first part in a series on creating parsers with combinators. Future installments promise to cover abstract syntax trees, error reporting, infix operations, and limiting backtracking. Well be interested to read those, too.\nIf you want some different parser tutorials, we got you. The usual tough problem is algebraic expressions, although you can always try RPN.", "title": "\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u3068\u3063\u3066\u6700\u521d\u306e\u30d1\u30fc\u30b5\u30fc\u306f\u8c61\u5fb4\u7684\u306a\u5100\u5f0f", "body": "\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u304c\u6700\u521d\u306b\u66f8\u304f\u30d1\u30fc\u30b5\u30fc\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3084\u81ea\u7136\u8a00\u8a9e\u306e\u30b3\u30de\u30f3\u30c9\u306e\u89e3\u91c8\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002\u30d1\u30fc\u30b5\u30fc\u306f\u6587\u5b57\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u76f4\u63a5\u64cd\u4f5c\u3057\u3001\u518d\u5e30\u7684\u30c0\u30a6\u30f3\u89e3\u6790\u3068\u540c\u69d8\u306e\u3057\u304f\u307f\u3092\u6301\u3061\u5408\u308f\u305b\u307e\u3059\u3002\u3053\u308c\u306f\u62bd\u8c61\u7684\u306a\u69cb\u6587\u89e3\u6790\u6728\u3001\u30a8\u30e9\u30fc\u30ec\u30dd\u30fc\u30c8\u3001\u9650\u5b9a\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306a\u3069\u3092\u30ab\u30d0\u30fc\u3059\u308b\u30b7\u30ea\u30fc\u30ba\u306e\u6700\u521d\u306e\u8a18\u4e8b\u3067\u3059\u3002", "titles": ["\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u3068\u3063\u3066\u6700\u521d\u306e\u30d1\u30fc\u30b5\u30fc\u306f\u8c61\u5fb4\u7684\u306a\u5100\u5f0f", "Varunramesh\u304c\u793a\u3059\u30d1\u30fc\u30b5\u30fc\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u30fc\u306e\u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3", "\u518d\u5e30\u7684\u964d\u4e0b\u89e3\u6790\u306b\u95a2\u9023\u3059\u308b\u30d1\u30fc\u30b5\u30fc\u306e\u4e00\u7a2e", "\u4e00\u822c\u7684\u306a\u30d1\u30fc\u30b5\u30fc\u3088\u308a\u3001\u4f5c\u6210\u30fb\u4fdd\u5b88\u30fb\u30c7\u30d0\u30c3\u30b0\u304c\u7c21\u5358", "\u30d1\u30fc\u30b5\u30fc\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u305f\u30d1\u30fc\u30b5\u30fc\u306e\u4f5c\u6210\u65b9\u6cd5\u30b7\u30ea\u30fc\u30ba\u306e\u7b2c1\u5f3e"]}