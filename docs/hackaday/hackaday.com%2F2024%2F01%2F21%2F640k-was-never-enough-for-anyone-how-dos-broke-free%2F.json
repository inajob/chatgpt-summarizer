{"pubDate": "2024-01-22T03:00:50", "original_title": "640k Was Never Enough For Anyone: How DOS Broke Free", "link": "https://hackaday.com/2024/01/21/640k-was-never-enough-for-anyone-how-dos-broke-free/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/01/8086-featured.jpg", "original_content": "On modern desktop and laptop computers, there is rarely a need to think about memory. We all have many gigabytes of the stuff, and its just there. Our operating system does the heavy lifting of working out what goes where and what needs to be paged to disk, and we just get on with reading Hackaday, that noblest of computing pursuits. This was not always the case though, and for early PCs in particular the limitations of the 8086 processor gave the need for some significant gymnastics in search of an extra few kilobytes. [Julio Merion] has an interesting run-down of the DOS memory map, and how memory expansion happened on computers physically unable to see much of it.\nThe 8086 has a 20-bit address bus, giving it access to a maximum of 1 megabyte. When IBM made the PC they needed space for the BIOS, the display, and the various accessory ROMs intended to come with expansion cards. Thus they allocated a maximum 640k of the map for RAM, and many early machines shipped with much less than that. The quote from Bill Gates about 640k being enough for anyone is probably apocryphal, but it was pretty clear as the 1980s wore on that more would be needed. The post goes into how memory expansion worked, with a 64k page mapped to switchable RAM on a card, and touches on how DOS managed extended memory above 1 Mb on the later processors that supported it. We dimly remember there also being a device driver that would map the unused graphics memory as EMS when the graphics card was running in text mode, but such horrors are best left behind.\nOf course, some of the tricks to boost RAM were nothing but snake oil.\n8086 header: Thomas Nguyen, CC BY-SA 4.0", "title": "\"8086\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u306b\u304a\u3051\u308b\u30e1\u30e2\u30ea\u62e1\u5f35\u3068\u306f\uff1f\"", "body": "\u73fe\u4ee3\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u306f\u3001\u30e1\u30e2\u30ea\u306e\u3053\u3068\u3092\u8003\u3048\u308b\u5fc5\u8981\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u521d\u671f\u306ePC\u3067\u306f\u30e1\u30e2\u30ea\u306e\u5236\u9650\u306b\u82e6\u52b4\u3057\u3001\u7269\u7406\u7684\u306b\u306f\u898b\u3048\u306a\u304b\u3063\u305f\u30e1\u30e2\u30ea\u3092\u62e1\u5f35\u3059\u308b\u305f\u3081\u306b\u3044\u304f\u3064\u304b\u306e\u5de5\u592b\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002\u307e\u305f\u3001DOS\u304c\u62e1\u5f35\u30e1\u30e2\u30ea\u3092\u7ba1\u7406\u3059\u308b\u65b9\u6cd5\u306b\u3082\u89e6\u308c\u3066\u3044\u307e\u3059\u3002", "titles": ["\"8086\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u306b\u304a\u3051\u308b\u30e1\u30e2\u30ea\u62e1\u5f35\u3068\u306f\uff1f\"", "\"DOS\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306b\u3064\u3044\u3066\u77e5\u308d\u3046\"", "\"\u521d\u671f\u306e\u30d1\u30bd\u30b3\u30f3\u3067\u306eRAM\u4e0d\u8db3\u3068\u305d\u306e\u89e3\u6c7a\u6cd5\"", "\"\u30e1\u30e2\u30ea\u306e\u62e1\u5f35\u306b\u3088\u308b\u6027\u80fd\u5411\u4e0a\"", "\"DOS\u304c\u7ba1\u7406\u3059\u308b1MB\u4ee5\u4e0a\u306e\u30e1\u30e2\u30ea\u306e\u4ed5\u7d44\u307f\""]}