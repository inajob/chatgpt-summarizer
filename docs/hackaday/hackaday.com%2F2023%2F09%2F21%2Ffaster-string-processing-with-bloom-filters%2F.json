{"pubDate": "2023-09-22T02:00:12", "original_title": "Faster String Processing With Bloom Filters", "link": "https://hackaday.com/2023/09/21/faster-string-processing-with-bloom-filters/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/09/pydoc-feature.png", "original_content": "At first, string processing might seem very hard to optimize. If youre looking for a newline in some text, you have to check every character in the string against every type of newline, right? Apparently not, as [Abhinav Upadhyay] tells us how CPython does some tricks in string processing.\nThe trick in question is based on bloom filters, used here to quickly tell whether a character possibly matches any in a predefined set. A bloom filter works by condensing a set of more complex data to a couple of bits in an array. When an element is added, a bit is set, the index of which is determined by a hash function. To test whether an element might be in the filter, the same is done but by testing the bit instead of setting it. This effectively allows a fast check of whether an element might be in the filter.\nCPython doesnt stop optimizing there: instead of a complicated hash function, it simply uses the lowest 6 bits. It also has a relatively small bit array at only 64 bits which allows it to avoid memory all together, which in turn makes the comparisons much faster. [Abhinav] goes far into more detail in his article, definitely worth a read for any computer scientists among us.\nNowadays there is ever increasing amounts of talk about AI (specifically large language models), so why not apply an LLM to Python to fix the bugs for you?", "title": "CPython\u304c\u6587\u5b57\u5217\u51e6\u7406\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\uff1f", "body": "CPython\u306e\u6587\u5b57\u5217\u51e6\u7406\u306e\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3002\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3001\u6587\u5b57\u304c\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3055\u308c\u305f\u30bb\u30c3\u30c8\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u7d20\u65e9\u304f\u5224\u65ad\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u8907\u96d1\u306a\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306e\u4ee3\u308f\u308a\u306b6\u30d3\u30c3\u30c8\u4ee5\u4e0b\u306e\u4e0b\u4f4d\u30d3\u30c3\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u3092\u907f\u3051\u3001\u3088\u308a\u9ad8\u901f\u306a\u6bd4\u8f03\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u3002", "titles": ["CPython\u304c\u6587\u5b57\u5217\u51e6\u7406\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\uff1f", "CPython\u306f\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u308f\u305a\u3001\u6700\u4e0b\u4f4d6\u30d3\u30c3\u30c8\u3067\u6587\u5b57\u5217\u51e6\u7406\u3092\u6700\u9069\u5316\u3057\u3066\u3044\u308b", "\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3092\u907f\u3051\u308b\u3053\u3068\u3067CPython\u306f\u6bd4\u8f03\u3092\u9ad8\u901f\u5316\u3057\u3066\u3044\u308b", "CPython\u306e\u6587\u5b57\u5217\u51e6\u7406\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac", "\u5927\u898f\u6a21\u306a\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066Python\u306e\u30d0\u30b0\u3092\u4fee\u6b63\u3059\u308bAI\u306e\u8a71"]}