{"pubDate": "2024-09-19T20:00:28", "original_title": "Reverse Engineering A Keyboard Driver Uncovers A Self-Destruct Code", "link": "https://hackaday.com/2024/09/19/reverse-engineering-a-keyboard-driver-uncovers-a-self-destruct-code/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/09/keyboard-featured.jpg", "youtube": "https://www.youtube.com/watch?v=lm6YnAqPv4w", "original_content": "Should you be able to brick a keyboard just by writing a driver to flash the lights on it? We dont think so either. [TheNotary] got quite the shock when embarking on a seemingly straightforward project to learn C++ on the x86-64 architecture with Windows and sent it straight to Silicon Heaven with only a few seemingly innocent USB packets.\nThe project was a custom driver for the XVX S-K80 mechanical keyboard, aiming to flash LED patterns across the key LEDs and perhaps send custom images to the integrated LCD. When doing this sort of work, the first thing you need is the documentation of the communications protocols. Obviously, this was not an option with a closed-source project, so the next best thing is to spy on the existing Windows drivers and see how they worked. Using Wireshark to monitor the USB traffic whilst twiddling with the colour settings, it was clear that communications were purely over HID messages, simplifying subsequent analysis. Next, they used x32dbg (now x64dbg, but whatever) to attach to the existing driver process and trap a few interesting Windows system calls. After reading around the Windows API, a few candidate functions were identified and trapped. This gave them enough information to begin writing code to reproduce this behaviour. Then things got a bit odd.\n\nThere apparently was a lot of extra protocol baggage when performing simple tasks such as lighting an LED. They shortened the sequence to reduce the overhead and noticed an additional byte that they theorized must encode the number of packets to expect in case only a subset of the LEDs were being programmed. Setting this to 0x01 and sending LED code for single keys appeared to work and was much faster but seemed unreliable. After a short experiment with this mystery value, [TheNotary] reverted the code to send all the packets for the full LED set as before, forgetting to correct this mystery value from the 0xFF it was programmed to during the experiment. They were surprised that all the LEDs and LCD were switched off. They were then horrified when the keyboard never powered up again. This value appeared to have triggered an obscure firmware bug and bricked it\u2014a sad end to what would have been a fun little learning project.\nKeyboard hacks are so plentiful its hard to decide where to start. How about upgrading the keyboard of your trusty ZX81? Heres a lovely, minimal mechanical keyboard powered by a Pi Pico, and finally while were thinking about drivers bricking your stuff, who can forget FTDI gate? We may never forgive that one.\nHeader image: Martin Vorel, CC BY-SA 4.0."}