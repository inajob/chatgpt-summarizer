{"pubDate": "2025-05-24T14:00:43", "original_title": "The Need For Speed?", "link": "https://hackaday.com/2025/05/24/the-need-for-speed/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2021/07/ElectricSpeed.jpg", "original_content": "We wrote up a video about speeding up Arduino code, specifically by avoiding DigitalWrite. Now, the fact that DigitalWrite is slow as dirt is long known. Indeed, a quick search pulls up a Hackaday article from 2010 demonstrating that it\u2019s fifty times slower than toggling the pin directly using the native pin registers, but this is still one of those facts that gets periodically rediscovered from generation to generation. How can this be new again?\nFirst off, sometimes you just don\u2019t need the speed. When you\u2019re just blinking LEDs on a human timescale, the general-purpose Arduino functions are good enough. I\u2019ve written loads of useful firmware that fits this description. When the timing requirements aren\u2019t tight, slow as dirt can be fast enough.\nBut eventually you\u2019ll want to build a project where the old slow-speed pin toggling just won\u2019t cut it. Maybe it\u2019s a large LED matrix, or maybe it\u2019s a motor-control application where the loop time really matters. Or maybe it\u2019s driving something like audio or video that just needs more bits per second. One way out is clever coding, maybe falling back to assembly language primitives, but I would claim that the right way is almost always to use the hardware peripherals that the chipmakers gave you.\nFor instance, in the end of the video linked above, the hacker wants to drive a large shift register string that\u2019s lighting up an LED matrix. That\u2019s exactly what SPI is for, and coming to this realization makes the project work with timing to spare, and in just a few lines of code. That is the way.\nWhich brings me to the double-edged sword that the Arduino\u2019s abstraction creates. By abstracting away the chips\u2019 hardware peripherals, it makes code more portable and certainly more accessible to beginners, who don\u2019t want to learn about SPI and I2C and I2S and DMA just yet. But by hiding the inner workings of the chips in \u201cuser friendly\u201d libraries, it blinds new users to the useful applications of these same hardware peripherals that clever chip-design engineers have poured their sweat and brains into making do just exactly what we need.\nThis isn\u2019t really meant to be a rant against Arduino, though. Everyone has to start somewhere, and the abstractions are great for getting your feet wet. And because everything\u2019s open source anyway, nothing stops you from digging deeper into the datasheet. You just have to know that you need to. And that\u2019s why we write up videos like this every five years or so, to show the next crop of new hackers that there\u2019s a lot to gain underneath the abstractions.\n\nThis article is part of the Hackaday.com newsletter, delivered every seven days for each of the last 200+ weeks. It also includes our favorite articles from the last seven days that you can see on the web version of the newsletter.\n\nWant this type of article to hit your inbox every Friday morning? You should sign up!\n\n", "title": "- Arduino\u30b3\u30fc\u30c9\u306e\u9ad8\u901f\u5316\uff1aDigitalWrite\u306e\u9650\u754c\u3092\u8d85\u3048\u3088\u3046", "body": "Arduino\u30b3\u30fc\u30c9\u3092\u9ad8\u901f\u5316\u3059\u308b\u306b\u306f\u3001DigitalWrite\u3092\u907f\u3051\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5468\u8fba\u6a5f\u5668\u3092\u6d3b\u7528\u3059\u308b\u3079\u304d\u3002", "titles": ["- Arduino\u30b3\u30fc\u30c9\u306e\u9ad8\u901f\u5316\uff1aDigitalWrite\u306e\u9650\u754c\u3092\u8d85\u3048\u3088\u3046", "- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u771f\u4fa1\u3092\u5f15\u304d\u51fa\u3059\uff01Arduino\u306e\u30d4\u30f3\u5236\u5fa1\u30c6\u30af\u30cb\u30c3\u30af", "- \u521d\u5fc3\u8005\u304b\u3089\u8131\u5374\uff01SPI\u3084I2C\u3092\u6d3b\u7528\u3057\u305f\u52b9\u679c\u7684\u306a\u96fb\u5b50\u5de5\u4f5c", "- Abstraction\u306e\u88cf\u306b\u6f5c\u3080\u771f\u5b9f\uff1a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5468\u8fba\u6a5f\u5668\u306e\u5229\u7528", "- \u65b0\u4e16\u4ee3\u306e\u30cf\u30c3\u30ab\u30fc\u3078\u8d08\u308b\u3001Arduino\u3067\u306e\u52b9\u7387\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u6cd5"]}