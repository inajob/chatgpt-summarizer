{"pubDate": "2025-02-27T19:30:46", "original_title": "esp-hal, a Stable-API ESP32 HAL Gift For Your Rust Code", "link": "https://hackaday.com/2025/02/27/esp-hal-a-stable-api-esp32-hal-gift-for-your-rust-code/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2015/12/rust.jpg", "original_content": "Looking to write Rust on the ESP32? Youre in luck, a new challenger has entered the scene, looking to help you write code that lasts  [Scott Mabin] and the team from Espressif have brought us the esp-hal 1.0.0-beta. From a personal project to an Espressif-sponsored one to an effort under Espressifs wing, [Scott] tells us about the arduous journey of bringing first-class Rust support to ESP32 chips, Xtensa and RISC-V alike.\nIn particular, esp-hal, with the hal part standing for Hardware Abstraction Layer, focuses on providing you with a stable API to access hardware, making sure your code can remain stable for years to come. For now, you get drivers for GPIO, UART, SPI and I2C, as well as a number of auxiliary features like time and SoC reset, more than enough for a large amount of projects we hackers build with a generic MCU in mind.\nNext stop? WiFi and BLE support, of course, an ESP32 just doesnt feel the same without these two. Rust is a fun and seriously promising language, and its a joy to use! So, if you have a wireless-less project in mind and youre looking for a HAL, try out the esp-hal, it might just be exactly what you need.\nIf youre looking for examples, heres an STM32 touchpad project with Rust firmware, a PIC32 Rust blinky demo, and weve even featured larger projects like this ESP32 open-source (reverse-engineered) WiFi MAC stack being written in Rust. In case you missed it, weve introduced Rust to you a couple of times, even as far as 2015!", "title": "- ESP32\u5411\u3051Rust\u958b\u767a\u304c\u9032\u5316\uff01esp-hal 1.0.0-beta\u306e\u767b\u5834", "body": "ESP32\u5411\u3051\u306eRust\u30b5\u30dd\u30fc\u30c8\u300cesp-hal 1.0.0-beta\u300d\u304c\u767b\u5834\u3002\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u62bd\u8c61\u5316\u5c64\u3092\u63d0\u4f9b\u3057\u3001\u5b89\u5b9a\u3057\u305fAPI\u3067\u9577\u671f\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3002", "titles": ["- ESP32\u5411\u3051Rust\u958b\u767a\u304c\u9032\u5316\uff01esp-hal 1.0.0-beta\u306e\u767b\u5834", "- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u62bd\u8c61\u5316\u30ec\u30a4\u30e4\u30fc\u3092\u63d0\u4f9b\u3059\u308besp-hal\u306e\u9b45\u529b", "- Rust\u3067\u4f5c\u308d\u3046\uff01ESP32\u5411\u3051\u306e\u5b89\u5b9a\u3057\u305fAPI\u3068\u30c9\u30e9\u30a4\u30d0\u30fc", "- WiFi\u3068BLE\u5bfe\u5fdc\u3078\u5411\u3051\u305fESP32\u306e\u65b0\u305f\u306a\u53ef\u80fd\u6027", "- Rust\u3092\u4f7f\u3063\u305f\u96fb\u5b50\u5de5\u4f5c\u306e\u4f8b\uff1aESP32\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u7d39\u4ecb"]}