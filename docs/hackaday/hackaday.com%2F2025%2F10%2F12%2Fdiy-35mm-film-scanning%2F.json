{"pubDate": "2025-10-12T20:00:55", "original_title": "DIY 35mm Film Scanning", "link": "https://hackaday.com/2025/10/12/diy-35mm-film-scanning/", "source": "https://hackaday.com/blog/feed/", "original_content": "If you are sitting on a horde of negatives, waiting for the digital photography fad to die off, it may be time to think about digitizing your old film. [Kinpro1024] can help with the PiDigitzier, an open-source film scanning solution. The build centers around a Pi Zero 2, a Pi HQ camera, and a diffusing\u00a0 LED lighting fixture. Of course, theres also some miscellaneous hardware and a camera lens; the example used a Pentax 50 mm f1.8 lens.\nHalf of the project is mechanical. An MDF tower provides a stable 250 mm workspace and decks that can slide up and down using threaded rods and curtain rods. Apparently, leveling the platforms is important not only for the optics but also to allow the MDF to move along the rods without binding.\n\nOn the software side, some Python software orchestrates the capture and builds a high-resolution scan by combining three different images from different positions. As you might expect, though, the image stitching doesnt occur on the Pi.\n[Kinpro1024] has only scanned black and white film so far because the LEDs have a poor color rendering index. If you wanted to scan color film, you may have to experiment with better lighting or software correction. The cameras rolling shutter also causes some issues if the LEDs dont hold their intensity through the entire scan. You could, of course, replace this with a global shutter camera.\nStray light can also be a problem. Ideally, youd use bellows like a big camera, but if thats not available, you can wing it with some homemade light baffles.\nIf you decide you want to try color, you will be interested in this project. You might also think of raiding the kids Lego box.", "title": "\u53e4\u3044\u30d5\u30a3\u30eb\u30e0\u3092\u30c7\u30b8\u30bf\u30eb\u5316\u3059\u308b\u305f\u3081\u306ePiDigitzier\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "body": "\u53e4\u3044\u30d5\u30a3\u30eb\u30e0\u3092\u30c7\u30b8\u30bf\u30eb\u5316\u3059\u308b\u305f\u3081\u306ePiDigitzier\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7d39\u4ecb\u3002\u7279\u306b\u767d\u9ed2\u30d5\u30a3\u30eb\u30e0\u306b\u5bfe\u5fdc\u3002", "titles": ["\u53e4\u3044\u30d5\u30a3\u30eb\u30e0\u3092\u30c7\u30b8\u30bf\u30eb\u5316\u3059\u308b\u305f\u3081\u306ePiDigitzier\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "\u81ea\u4f5c\u30d5\u30a3\u30eb\u30e0\u30b9\u30ad\u30e3\u30ca\u30fc\u306e\u69cb\u7bc9: Pi Zero 2\u3068HQ\u30ab\u30e1\u30e9\u3092\u4f7f\u7528", "\u30d5\u30a3\u30eb\u30e0\u30b9\u30ad\u30e3\u30f3\u306e\u305f\u3081\u306e\u30e1\u30ab\u30cb\u30ab\u30eb\u8a2d\u8a08\u3068\u5149\u5b66\u7684\u6ce8\u610f\u70b9", "Python\u3067\u5236\u5fa1\u3059\u308b\u9ad8\u89e3\u50cf\u5ea6\u30d5\u30a3\u30eb\u30e0\u30ad\u30e3\u30d7\u30c1\u30e3", "\u30ab\u30e9\u30fc\u6620\u753b\u306e\u30b9\u30ad\u30e3\u30f3\u6311\u6226: \u7167\u660e\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u4fee\u6b63\u306e\u5de5\u592b"]}