{"pubDate": "2024-08-05T17:00:34", "original_title": "Embedded Python: MicroPython Toolkits", "link": "https://hackaday.com/2024/08/05/embedded-python-micropython-toolkits/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/06/Python.jpg", "original_content": "Last time, I talked about how MicroPython is powerful and deserving of a place in your toolkit, and it made for a lively discussion. Im glad to see that overall, MicroPython has indeed been getting the recognition it deserves  Ive built a large number of wonderful projects with it, and so have people Ive shown it to!\nSometimes I see newcomers dissatisfied with MicroPython, because the helper tools they initially pick dont suit it well. For instance, they try and start out with a regular serial terminal application that doesnt fit the MicroPython constraints, or a general IDE that requires a fair bit of clicking around every time you need to run your code. In particular, Id make sure that you know your options no matter whether you prefer GUI or commandline  both have seriously nice tools for MicroPython use!\nThe main problem to be solved with MicroPython is that you have a single serial port that everything happens through  both file upload and also debugging. For ESP8266/32-based boards, its a physical serial port, and for chips like RP2040 and ESP32-S* where a hardware USB peripheral is available, its a virtual one  which makes things harder because the virtual port might get re-enumerated every now and then, possibly surprising your terminal application. If you want to upload a program of yours, you need to free up the serial port, and to see the programs output, you will need to reopen that port immediately after  not a convenient thing to do if youre using something like PuTTy.\nSo, using MicroPython-friendly software is a must for a comfortable hacking experience. What are your options?\nPower Of Thonny And Friends\nWhether youre primarily a GUI user, or youre teaching someone that is, Thonny is undoubtedly number one in MicroPython world  its an IDE developed with Python in mind, and it has seriously impressive MicroPython integrations. Your boards terminal is being managed as if effortlessly in the background  just open your files in different tabs as you normally do, and press the Run button sometimes.\nExpecting more? There is more  basically anything MicroPython adjacent youd do from commandline, is present in Thonny in a comfortable way. For instance, are you working with an ESP32 board that doesnt yet have a MicroPython image in its flash? Lucky you, theres an esptool integration that lets you flash an image into your MCU through a dialog box. Want debugging? Theres single-step debugging that works in an intuitive user-friendly way  youd find this pretty hard to happen from console apart from specially engineered print statements, but Thonny delivers.\n\nNot looking to pick a new IDE? There are VSCode extensions. Arduino IDE more your jam? Yeah, well, remember how Arduino has a MicroPython IDE now? Its decently usable, so if you got used to the Arduino keybindings, you might like it. More of a commandline user? Youve got a good few options, then, and they are similarly powerful.\nMpremote And Ampy\nRather use the terminal? Maybe IDEs are too clunky for you and the terminal windows cleanliness provides for a distraction-free environment you can only dream about, maybe its just the thing youve used your entire life, or maybe youre even debugging a MicroPython device over an SSH connection? mpremote is the tool to save you.\nmpremote is part of the MicroPython project, its developed alongside the project, and its got plenty of killer features to show for it. It includes an inline terminal emulator that lets you access REPL effortlessly to see your codes results and interact with the variables afterwards, correctly managing things like Ctrl+C so you can interrupt your code if needed and still poke at its variables in the REPL. You can also explore the MicroPython filesystem Linux-style with ease, and, most importantly, you can mount your current directory up to it with mpremote mount, and mpremote will send files to your board as the on-MCU interpreter requests them.\nOverall, mpremote offers a seriously comfortable environment for iterating on MicroPython code lightning quick. Without it, you would need to reopen the serial port each time you need to upload a new file  here, you can just chain a bunch of commands together and mpremote will dutifully do the serial port juggling needed to get you there.\nIn addition to that, you can see that mpremote is designed to help you with awkward-to-do things you didnt know you needed to do. Need to sync your boards RTC time with your computers time? Thats a mpremote rtc command away. Want to access the MicroPython package manager? Thats mpremote mip. Your board needs to switch into bootloader mode? No need to fiddle with buttons, just use mpremote bootloader. In short, mpremote is a MicroPython powerhouse for everyone whos most comfortable in a terminal window.\n\nThere is an alternative here, too: ampy, a personal choice of mine, which I use combined with screen. Ampy is a tool initially designed by Adafruit, and its more barebones  I like it because I have control of whats happening when I issue a command to a software, keeping my MicroPython devices in a known state at all times. On the other hand, it does require jugging the serial port on your own, so when I need to update my code, I exit screen, run the ampy command, then re-enter screen again. I regularly work with large MicroPython files that also import static library files that dont change for months, however, so having control of the upload process seems to save me a fair bit of time.\nThere are caveats, of course  the major one is, when using screen in serial terminal mode, you need to press `Ctrl+A k y` (kill window) instead of `Ctrl+A d` to detach the screen session. If you do the detach instead, as you might be used to with screen, the serial port will remain open until you unplug the device or kill the screen process, and ampy will fail mysteriously.\nSummary\nI hope this toolkit overview helps you make sure youre using exactly the kind of MicroPython environment that works for you  while compiling it, Ive learned some nuances myself! Next time, we shall talk about CircuitPython  a MicroPython fork that has grown into a contender in the educational Python space, and how it is different from MicroPython in a number of crucial ways you deserve to know about.", "title": "Thonny\u3068\u305d\u306e\u4ef2\u9593\u306e\u529b", "body": "MicroPython\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u3002Thonny\u304cGUI\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u3002VSCode\u62e1\u5f35\u6a5f\u80fd\u3082\u3002mpremote\u306fCLI\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u3002\u30d5\u30a1\u30a4\u30eb\u8ee2\u9001\u3084RTC\u540c\u671f\u3082\u7c21\u5358\u306b\u3002Ampy\u306f\u30b7\u30f3\u30d7\u30eb\u306a\u304c\u3089\u5236\u5fa1\u304c\u53ef\u80fd\u3002\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002MicroPython\u74b0\u5883\u3092\u9078\u629e\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u3002", "titles": ["Thonny\u3068\u305d\u306e\u4ef2\u9593\u306e\u529b", "Mpremote\u3068Ampy", "MicroPython\u306b\u6700\u9069\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u4f7f\u7528\u3059\u308b", "VSCode\u62e1\u5f35\u6a5f\u80fd\u3068Arduino IDE", "MicroPython\u306e\u5feb\u9069\u306a\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb"]}