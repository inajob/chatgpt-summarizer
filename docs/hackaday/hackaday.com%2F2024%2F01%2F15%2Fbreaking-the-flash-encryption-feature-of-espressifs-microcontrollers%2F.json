{"pubDate": "2024-01-16T06:00:21", "original_title": "Breaking The Flash Encryption Feature Of Espressif\u2019s Microcontrollers", "link": "https://hackaday.com/2024/01/15/breaking-the-flash-encryption-feature-of-espressifs-microcontrollers/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/01/esp32_side-channel_attack_cpa_board_diagram.png", "original_content": "Espressifs ESP32 microcontrollers come with a Flash encryption feature that when enabled ensures that the data and code stored on the (usually external) Flash chip is encrypted with AES-256 (ESP32) or better (ESP32-C3, -C6). For the ESP32 this encryption feature has been shown to be vulnerable to side channel attacks (SCA), leading\u00a0[courk] to not only replicate this result with a custom ESP Correlation Power Analysis (CPA) board (pictured) that captures power usage of the MCU, but also to try his luck with the ESP32-C3 and ESP32-C6 parts that should be tougher nuts to crack.\nWhereas the ESP32 uses a fairly straightforward AES-256 encryption routine that together with the exposed Flash communication lines on the QSPI bus make for a textbook SCA example, the ESP32-C3 ups the encryption to XTS-AES, which uses two 128-bit keys on the -C3 part (XTS-256). This particular MCU is still susceptible to the same SCA attack with CPA, making it somewhat harder to attack than the ESP32, but by no means impossible.\n\nFollowing the advisory from Espressif (PDF) regarding the cracked ESP32 Flash encryption, anti-SCA measures were said to be implemented in future Espressif designs, which includes the ESP32-C6. These measure serve mostly to mask and obfuscate the internal operations in order make power trace data less useful. These countermeasures can be enabled in stages, which [courk] did, to see how much they affect a CPA-based SCA. Perhaps shockingly, none of these seemed to affect the CPA attack much, if at all.\nAs a bonus round, [courk] then decided to speed up the painfully slow process of recovering the encryption keys by fault injection, which just requires the first 128 bytes (one block) on the -C3 and -C6 parts. Using a voltage fault injection the Secure Boot feature is bypassed. The essential idea is that through a buffer overflow custom code can be run, which dumps the entire Flash content. After demonstrating this and report it to Espressif, an advisory was published that notes that theres no defense against this SCA and fault injection attack, other than using an ESP32 part that has internal Flash and no access to the QSPI bus from the outside.\nIt would seem that with how leaky the Flash encryption is on these ESP32-family parts, placing your bets on an attacker having an aversion to decapping an IC might indeed be your best defense.\nTop image: Block Diagram of the ESP CPA Board (Credit: Courk at courk.cc)", "title": "\u300cESP32\u304a\u3088\u3073ESP32-C3\u3001-C6\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u6697\u53f7\u5316\u306e\u8106\u5f31\u6027\u300d", "body": "Espressif\u306eESP32\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306f\u3001AES-256\u3067\u6697\u53f7\u5316\u3057\u305f\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u6697\u53f7\u5316\u6a5f\u80fd\u306fSCA\u653b\u6483\u306b\u5bfe\u3057\u3066\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3059\u3002ESP32-C3\u3068ESP32-C6\u306f\u3088\u308a\u5f37\u56fa\u306a\u6697\u53f7\u5316\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u3082\u540c\u69d8\u306e\u653b\u6483\u306b\u8106\u5f31\u3067\u3059\u3002Espressif\u306f\u4eca\u5f8c\u306e\u8a2d\u8a08\u3067\u5bfe\u7b56\u3092\u8b1b\u3058\u308b\u3068\u767a\u8868\u3057\u307e\u3057\u305f\u304c\u3001\u73fe\u5728\u306e\u5bfe\u7b56\u306f\u6709\u52b9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30a8\u30f3\u30c9\u306e\u6697\u53f7\u5316\u30ad\u30fc\u5fa9\u5143\u30d7\u30ed\u30bb\u30b9\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u3001\u96fb\u5727\u306e\u30d5\u30a9\u30eb\u30c8\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3082\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002", "titles": ["\u300cESP32\u304a\u3088\u3073ESP32-C3\u3001-C6\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u6697\u53f7\u5316\u306e\u8106\u5f31\u6027\u300d", "\u300c\u96fb\u5b50\u5de5\u4f5c\u611b\u597d\u5bb6\u5fc5\u898b\uff01ESP32\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8106\u5f31\u6027\u89e3\u8aac\u300d", "\u300c\u65b0\u305f\u306a\u30cf\u30c3\u30ad\u30f3\u30b0\u624b\u6cd5\uff01ESP32-C3\u304a\u3088\u3073ESP32-C6\u306e\u6697\u53f7\u5316\u30ad\u30fc\u5fa9\u5143\u653b\u6483\u300d", "\u300c\u95c7\u306e\u6280\u8853\uff01\u96fb\u5727\u30d5\u30a9\u30eb\u30c8\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u305fESP32\u30bb\u30ad\u30e5\u30a2\u30d6\u30fc\u30c8\u56de\u907f\u300d", "\u300cESP32\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u3068\u9632\u885b\u7b56\u300d"]}