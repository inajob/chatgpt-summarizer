{"pubDate": "2024-04-08T23:00:15", "original_title": "A Brief History of Keyboard Encoding", "link": "https://hackaday.com/2024/04/08/a-brief-history-of-keyboard-encoding/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2022/02/MCM_Model_70_microcomputer_1974_APL_keyboard.jpg", "original_content": "Photoelectric encoder keyboard configured as ASCII\nWhile typing away on our DIN, PS/2, USB or Bluetooth keyboards one of the questions which we rarely concern ourselves with is that of how the keyboard registers which keys were pressing. One exception here is when the keyboard can only register a limited number of simultaneous keypresses (rollover). Even though most keyboards today use a matrix which connects the keys, there are many configuration choices even here, which much like other keyboard configurations come with their own advantages and disadvantages. As a good primer we can look at this article by\u00a0[Daniel Beardsmore] as he takes us through both historical and current-day keyboards.\nEspecially before\u00a0 it was realistic to just put an entire microcontroller with a look-up table into every keyboard, more inventive approaches were required to not only register keypresses, but also encode them for the host computer. The photoelectric approach of the 1960s was one such encoding method, before diode matrices became popular, along with more exotic encoding switches that contained their code already hard-wired on their multitude of pins. One inevitable limitation with these was that of a lack of multi-key support, leading to the development of matrix scan technology around 1970.\nMatrix scanning keyboards allow for multiple key presses at the same time, tackle debouncing of keys and were at the forefront of what gives us the ubiquitous and generally boringly reliable keyboards which we use today.", "title": "ASCII\u5f62\u5f0f\u3068\u3057\u3066\u69cb\u6210\u3055\u308c\u305f\u5149\u96fb\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30ad\u30fc\u30dc\u30fc\u30c9", "body": "ASCII\u5f62\u5f0f\u3067\u69cb\u6210\u3055\u308c\u305f\u30d5\u30a9\u30c8\u96fb\u5b50\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30ad\u30fc\u30dc\u30fc\u30c9\u3002\u30ad\u30fc\u30dc\u30fc\u30c9\u304c\u3069\u306e\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3044\u308b\u304b\u3092\u767b\u9332\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8ff0\u3079\u3089\u308c\u3066\u304a\u308a\u3001\u30de\u30c8\u30ea\u30af\u30b9\u30b9\u30ad\u30e3\u30f3\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u306e\u767a\u5c55\u306b\u3088\u308a\u3001\u8907\u6570\u306e\u30ad\u30fc\u5165\u529b\u3092\u53ef\u80fd\u306b\u3057\u3001\u4fe1\u983c\u6027\u306e\u9ad8\u3044\u73fe\u4ee3\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u304c\u958b\u767a\u3055\u308c\u305f\u3002", "titles": ["ASCII\u5f62\u5f0f\u3068\u3057\u3066\u69cb\u6210\u3055\u308c\u305f\u5149\u96fb\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30ad\u30fc\u30dc\u30fc\u30c9", "1960\u5e74\u4ee3\u306e\u5149\u96fb\u30a2\u30d7\u30ed\u30fc\u30c1: \u30ad\u30fc\u62bc\u4e0b\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u4e00\u624b\u6cd5", "\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u6280\u8853: \u30c7\u30a3\u30aa\u30fc\u30c9\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u3084\u30a8\u30ad\u30be\u30c1\u30c3\u30af\u306a\u30b9\u30a4\u30c3\u30c1", "\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u30b9\u30ad\u30e3\u30f3\u30c6\u30af\u30ce\u30ed\u30b8\u30fc: \u591a\u91cd\u30ad\u30fc\u5bfe\u5fdc\u3092\u53ef\u80fd\u306b\u3059\u308b\u30ad\u30fc\u30dc\u30fc\u30c9", "\u30ad\u30fc\u30dc\u30fc\u30c9\u6280\u8853\u306e\u9032\u5316: \u591a\u91cd\u30ad\u30fc\u5bfe\u5fdc\u3068\u4fe1\u983c\u6027\u3092\u8aac\u660e"]}