{"pubDate": "2024-05-20T17:30:09", "original_title": "Supercon 2023: Exploring the Elegance of the Voja4", "link": "https://hackaday.com/2024/05/20/supercon-2023-exploring-the-elegance-of-the-voja4/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/05/voja4.jpg", "youtube": "https://www.youtube.com/watch?v=cUcKpRigZts", "original_content": "When you design an electronic badge, the goal is to make a device thats interesting and has enough depth to keep your attendees engaged for the duration of the con but not so complicated that they cant become proficient with it before they have to head home. Its a difficult balance to nail down, and truth be told, not every Supercon badge has stuck the landing in this regard.\nBut if youve really done things right, youll create a piece of hardware that manages to outlive the event it was designed for. A badge that attendees continue to explore for months, and potentially even years, afterward. If the talk Inside the Voja4 by Nathan Jones is any indication, we think its safe to say that goal was achieved with the Supercon 2022 badge.\nDuring this forty-minute presentation, Nathan discusses what makes the 4-bit badge so fascinating from a technical standpoint and how it could theoretically be expanded to accomplish far more complex tasks than one might assume at first glance.\n\nFollowing The Instructions\nThe bulk of Nathans presentation is on the architecture of the Voja4, or more specifically, the architecture used by the emulated 4-bit CPU that lives inside the badges PIC24 microcontroller. The emulated CPU isnt based on anything that ever existed in the real world  it came straight from the imagination of badge designer Voja Antoni\u0107. But that doesnt mean its some fanciful creation, either. Nathan breaks down how it compares to more traditional CPU architectures and the rationale behind its deviation from the norms.\nIf the goal of the Voja4 was simply to get people writing code for vintage hardware, we could have just put a 6502 on the thing and called it a day. But in that case, the user would simply have found some 6502 code on the Internet, ran it on the badge, and then promptly forgot about the whole thing. Instead, the goal was to get attendees acquainted with the idea of bare metal programming and the joys of actually being able to understand what the computer is doing at each step.\nKeeping in mind the ideal level of badge complexity, it was necessary to create a processor that used a significantly reduced instruction set. In the short term, this makes programming the badge in assembly easier than if it had used a real CPU. On the flip side, this austerity does mean your final code could end up longer and more complicated than is strictly necessary. As Nathan says, it would be nice to have a multiplication instruction built in, but that doesnt mean you cant work around it.\n\nUnlike pretty much anything else attendees would have likely had experience with, the Voja4 uses a 12-bit instruction length. Within these 12 bits, which corresponded to 12 physical buttons and LEDs on the front of the badge, you could express both the opcode and up to two operands. At first glance, this would seem to limit you to just 16 possible opcodes, but by designing some of the opcodes so they only require a single operand, Voja was able to double that number.\nCompared to other architectures, which can throw you for a loop with things like variable instruction lengths, this makes it much easier to understand whats going on during each cycle on the Voja4.\nLimited By Imaginationand RAM\nLooking at the Voja4 and its specifications, you might naturally assume that its little more than a computational novelty. But Nathan argues that the instruction set, while limited, is complete enough that theres no task it cannot perform  assuming youve got some time to burn. He points to examples of folks running Linux on 8-bit chips like the ATmega1284P, which can take hours just to boot up to the login prompt.\nThat said, theres technically still one missing element: more memory. The Voja4, as designed, cant address enough memory to make something like this possible, but at the end of his talk, Nathan proposes some hypothetical modifications that could be made to allow the badge to address external memory over the serial port.\nAgain, patience would be the name of the game with such an arrangement. But if given all the memory it could handle and enough time to chew through it, the only remaining limitation on the Voja4 would be within the users imagination. While we dont expect anyone to boot Linux with it as they did on the 2019 FPGA badge, wed love to see somebody actually try and expand the Voja4s memory and really push the envelope on what it can do. Maybe for Supercon 2024?\n", "title": "Voja4: \u30b9\u30fc\u30d1\u30fc\u30b3\u30f3\u30d0\u30c3\u30b8\u306e\u6280\u8853\u7684\u9b45\u529b", "body": "\u96fb\u5b50\u30d0\u30c3\u30b8\u306e\u8a2d\u8a08\u306f\u8208\u5473\u6df1\u304f\u3001\u53c2\u52a0\u8005\u3092\u5f15\u304d\u4ed8\u3051\u308b\u304c\u3001\u8907\u96d1\u3059\u304e\u305a\u7c21\u5358\u306b\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u306e\u304c\u96e3\u3057\u3044\u3002Supercon 2022\u30d0\u30c3\u30b8\u306f\u3001\u6280\u8853\u7684\u306b\u9b45\u529b\u7684\u3067\u9577\u304f\u4f7f\u3048\u308b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u63d0\u4f9b\u3057\u3001\u6765\u5e74\u3082\u9032\u5316\u304c\u671f\u5f85\u3055\u308c\u308b\u3002", "titles": ["Voja4: \u30b9\u30fc\u30d1\u30fc\u30b3\u30f3\u30d0\u30c3\u30b8\u306e\u6280\u8853\u7684\u9b45\u529b", "Voja4: \u5b8c\u5168\u306a\u307e\u3067\u306e\u30d0\u30c3\u30b8\u306e\u8a2d\u8a08\u8981\u7d20", "Voja4: 4\u30d3\u30c3\u30c8CPU\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u89e3\u8aac", "Voja4: 12\u30d3\u30c3\u30c8\u547d\u4ee4\u9577\u306e\u5236\u7d04\u3068\u53ef\u80fd\u6027", "Voja4: \u30e1\u30e2\u30ea\u5bb9\u91cf\u3092\u62e1\u5f35\u3057\u3066\u65b0\u305f\u306a\u6311\u6226"]}