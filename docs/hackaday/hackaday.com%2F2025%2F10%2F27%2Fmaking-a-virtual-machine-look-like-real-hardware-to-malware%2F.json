{"pubDate": "2025-10-28T02:00:49", "original_title": "Making a Virtual Machine Look like Real Hardware to Malware", "link": "https://hackaday.com/2025/10/27/making-a-virtual-machine-look-like-real-hardware-to-malware/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/win10_virtualbox_vm_malware_brootforce_youtube.jpg", "original_content": "Running suspicious software in a virtual machine seems like a basic precaution to figure out whether said software contains naughty code. Unfortunately its generally rather easy to detect whether or not ones software runs inside a VM, with [bRootForce] going through a list of ways that a VirtualBox VM can be detected from inside the guest OS. While there are a range of obvious naming issues, such as the occurrence of the word VirtualBox everywhere, there many more subtle ways too.\nDemonstrated is the PoC malware application called Al-Khaser, which can be used to verify ones anti-malware systems, such as when trying to unleash a debugger on a piece of malware, run it inside a VM, along with many more uses. Among its anti-virtualization features are specific registry key names and values, file system artefacts, directory names, MAC addresses, virtual devices, etc.\nIn order to squeeze by those checks, [bRootForce] created the vbox_stealth shell script for Bash-blessed systems in order to use the VirtualBox Manager for the renaming of hardware identifier, along with the VBoxCloak projects PowerShell script thats used inside a Windows VirtualBox guest instance to rename registry keys, kill VirtualBox-specific processes, and delete VirtualBox-specific files.\nTheoretically this should make it much harder for any malware to detect that its not running inside Windows on real hardware, but as always there are more subtle ways that are even harder to disguise.\n\n"}