{"pubDate": "2024-02-28T12:00:27", "original_title": "Avoid I2C Address Conflicts On ESP32 By Pin Muxing", "link": "https://hackaday.com/2024/02/28/avoid-i2c-address-conflicts-on-esp32-by-pin-muxing/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/hadimg_esp32_i2cmux_feat.jpg", "original_content": "Using hardware I2C on an ESP32? Do you need to connect multiple I2C devices with the same address? Normally, you wouldnt be able to do that without extra parts, but on the ESP32, [BastelBaus] has found a nice hack  just connect your devices to different pins and slightly abuse the ESP32 GPIO muxing, no extra hardware required!\nInitially, they tried separating SDA and SCL completely, and after a bit of tinkering, thats worked out wonders! For this method, [BastelBaus] provides example Arduino code you could easily integrate into your project, and shows logic analyzer captures that demonstrate theres barely any overhead. Later, theyve also found out that you could multiplex only one of the pins, specifically, SDA, having the SCL line be common! As far as we see, this could also work out with split SCL, but do let us know if that doesnt sound right.\nTypically, such a problem is solved with an I2C multiplexer, and weve highlighted projects with them before. However, this simple method could also work on chips like the RP2040 or even the Raspberry Pi 4  just a bit more limited, since the GPIO muxing for I2C has less available ports! Also, if youre not using a chip with such a comfortable GPIO mux and you must use devices with overlapping addresses, check out the comment section under our I2C ecosystem article  theres a fair few other methods you can use. And, if this method ever malfunctions for you, theres a bunch of very straightforward ways you could debug your bus!"}