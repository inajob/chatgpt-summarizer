{"pubDate": "2024-08-29T14:00:05", "original_title": "3D Printering: Klipper, the Free 3D Printer Upgrade", "link": "https://hackaday.com/2024/08/29/3d-printering-klipper-the-free-3d-printer-upgrade/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/02/3D-Printering-Header-New.jpg", "original_content": "I have several 3D printers, and Ive always been satisfied with using either Repetier or Marlin on all of them. There are a few other firmware versions that could run on my hardware, but those two have been all Ive needed. Sure, it was painful for a while having to juggle features to fit the firmware image onto the smaller microcontroller boards. Now that Marlin supports big 32-bit boards however, that hasnt been a problem. But recently, Ive been on a program to switch everything to Klipper.\nIn this post, Ill tell you why I did it and give you some data about why you might consider it, too.\nThe Landscape\nMarlin is written in C and burned into a 3D printers flash memory. It does a lot. It receives G-code commands, interprets them, and translates them to meaningful actions on the hardware. Modern versions handle automatic transformations to account for lumpy beds, input shaping to reduce shaking, and linear advance to produce better prints.\nIt might seem simple to control a 3D printer, but there are lots of little details to take into account. For example, if you are moving the head between two XY coordinates and you expect a certain flow rate, then you have to figure out how fast to turn the steppers to get the right amount of plastic out over that time. You also may have to retract before you start a move, make sure temperatures are stable, and transform the actual coordinates based on bed leveling data. Theres a lot going on.\nKlipper does the exact same job, but it does it differently. On the 3D printer board is a tiny piece of software that does very little. Its a bit like a device driver for the printer. All by itself, it does nothing. But it can handle very basic commands that describe how to move the machine.\nAll the rest of the processing you expect to happen now runs on some Linux computer. That is very often a Raspberry Pi, but it could be a spare laptop, your desktop computer, or anything that will run a reasonable Linux install. Several vendors even sell single-board computers with touchscreens made specifically for running this part of Klipper.\nHowever, even though a screen is nice, you dont really need it. Ill talk about that more later.\n\nThe Problem\nHistorically, Klipper was a way to break out of the limitations of using tiny 8-bit controller boards with limited memory. These days, you can get plenty of powerful 3D printer controller boards, so that isnt as much of an issue as it used to be.\nInstead, I have another problem. The build. One of my printers is a custom printer that doesnt really match any other printer in the world. So, I have to build my own version of Marlin. Thats actually not very hard to do. However, there are two things that are very annoying. First, you have to flash the firmware. The printer uses DFU, and I have brought out the bootload switch, but it is still a pain, and I possibly will brick the printer if I make a mistake. A recoverable brick, but still.\nBut the real problem is keeping my version of Marlin up to date with the official version. The version I have running now is old enough to not have some of the cool features, so I would have to merge the mainline in with my fork. Can it be done? Of course. But its awkward, and the longer you wait, the worse it gets.\nFor a recent 3D printing class I sometimes teach, I picked up two cheap printers that had great support for Klipper, so they were my guinea pigs before I attempted to switch over to the custom printer.\nI should note that Klipper, I think, appeals to people who like tweaking settings and editing configuration files. Since youre reading Hackaday, theres a good chance that describes you. But if you despise opening a Bash shell and entering text, you might think about avoiding Klipper. While the UIs do a good job of protecting you from most of this, theres going to be times when youll need to get your hands dirty.\nIs Klipper the Solution?\nYou do have to flash a small program over to your board to run Klipper, but once you do it, you very likely will never do it again. If you are dissatisfied, you can flash Marlin back and theres no harm done. Just make sure you can get your hands on a stock firmware image for your printer before you start making any changes. In my case, I do have the ability to go back to Marlin if I ever wanted to. But at this point, the only reason Id make the switch back was if I planned on selling the machine to a beginner.\nAfter that one flash, all the other setups for anything you want to do are done through Linux, mostly through a simple configuration file. There are also web-based and touchscreen-based GUIs, but everything is really in a file. The code, too, is mostly in Python, so making a change or adding something is relatively simple, especially if you are comfortable with Linux. The hardware stub and a small part of the host is in C, however.\nIf you arent comfortable with Linux, the user interfaces will help. You can even use them to edit your configuration files in your browser, so it is possible to have no idea how to use Linux and still get by.\nKlipper Architecture\nI was going to draw a diagram of the Klipper architecture, but [Sineos] beat me to it, so I borrowed this one from the Klipper discourse groups documentation.\n[Sineos] created this diagram for the Klipper knowledge baseAt the top right is the Klipper firmware  thats the stub that executes basic commands on the hardware. The box on the bottom right indicates that you can even treat the computer Klipper is running on as a hardware host, and  what isnt shown  is that Klipper can manage multiple controller boards (more on that later).\nThe final red block is the host, and thats where all the real processing occurs. It reads G-code and worries about bed level, temperature, and so on. One of the key features is that you control it with macros, which could look like G-code or something else.\nCustom G-Code\nFor example, suppose you want to create a new G-code, say G12345. As far as I know, thats not a legal G-code. But you can define a macro named G12345 and make it do whatever you want. You can also define macros for real G-codes if you want. So, defining G28 would allow you to take over how the printer homes itself.\nYou can also have a macro named HACKADAY_LOGO or FILAMENT_CHANGE and stick those in your G code to make Klipper do anything you want. You can even do programming language constructions like for loops and if/then/else in your macros.\nKlipper is almost completely concerned with reading input codes and spitting out basic movements. A lot of system management falls to Moonraker, which talks to Klipper for you and communicates with the Web, MQTT, Home Automation, and more. A configuration file is also used to set up Moonraker. So for example, if you want a text message when your print is complete, Moonraker can do that. It also can keep your system up to date.\nUser Interfaces\nIt also communicates with user interfaces. For example, if you have a touch screen, it also talks to the system via Moonraker. However, the user interface is usually a web browser viewing pages provided by Fluidd or Mainsail. In fact, you can run both on different ports and use either one you like at any time. The browser doesnt have to be on the machine you have Klipper on, by the way. In that way, it is like OctoPrint, which you can also use if you like.\nOctoPrint has many features but can be heavy to run. For whatever reason, most people seem to run Fluidd or Mainsail, even though it is possible to use OctoPrint and benefit from its many plugins and features. Moonraker can even be made to mimic OctoPrint  so slicers that know how to send jobs to Octoprint can also send jobs to Klipper.\nHeres a look at part of Fluidds main page (you can, of course, configure and theme it):\nPart of the Fluidd main page during a print.\nThe Next Trick Juggling!\nI mentioned earlier that Klipper can control multiple boards. Some new bed sensors, for example, are their own computers, and Klipper can talk to them directly.\nFor another example. Suppose you have a board with lots of stepper drivers, and you decide to build a printer with four extruders. Later, you decide you want filament run-out sensors for each one, but your board doesnt have enough input ports. No problem! Just get a second cheap board, flash it with the stub firmware, and tell Klipper about it. Theres no reason those sensors have to be on the same board as the other electronics. If you are running on a Raspberry Pi, there may be times when you want the Pi to not only run the main Klipper code but also host I/O devices, and thats the function of that bottom block.\nNext Steps\nIn the next installment, Ill tell you more about how you can get started and a few things to look out for. If you already use Klipper, let us know your favorite tricks in the comments.\nWe covered Klipper way back in 2017, and it has come a long way since then. Of course, there are other ways to speed up your 3D prints.", "title": "3D\u30d7\u30ea\u30f3\u30bf\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u5207\u308a\u66ff\u3048\uff1aMarlin\u304b\u3089Klipper\u3078", "body": "\u8457\u8005\u306f\u3044\u304f\u3064\u304b\u306e3D\u30d7\u30ea\u30f3\u30bf\u30fc\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u307e\u3067Repertier\u3084Marlin\u3092\u4f7f\u7528\u3057\u3066\u6e80\u8db3\u3057\u3066\u304d\u305f\u3002\u6700\u8fd1\u306fKlipper\u306b\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u304a\u308a\u3001\u305d\u306e\u7406\u7531\u3084\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u308b\u3002Klipper\u306e\u69cb\u9020\u3084\u5229\u70b9\u306a\u3069\u3092\u56f3\u3084\u8aac\u660e\u3067\u7d39\u4ecb\u3057\u3066\u3044\u308b\u3002", "titles": ["3D\u30d7\u30ea\u30f3\u30bf\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u5207\u308a\u66ff\u3048\uff1aMarlin\u304b\u3089Klipper\u3078", "Klipper\uff1a\u30ab\u30b9\u30bf\u30e03D\u30d7\u30ea\u30f3\u30bf\u30fc\u3067\u306e\u65b0\u3057\u3044\u9078\u629e\u80a2", "Klipper vs Marlin\uff1a3D\u30d7\u30ea\u30f3\u30bf\u30fc\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u6bd4\u8f03", "Klipper\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6d3b\u7528\uff1a\u67d4\u8edf\u306a\u8a2d\u5b9a\u3068\u64cd\u4f5c\u6027", "Klipper\u306e\u9b45\u529b\uff1a3D\u30d7\u30ea\u30f3\u30bf\u30fc\u611b\u597d\u5bb6\u306b\u5411\u3051\u305f\u6700\u65b0\u60c5\u5831"]}