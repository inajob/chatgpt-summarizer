{"pubDate": "2024-07-18T17:00:25", "original_title": "Supercon 2023: Bringing Arcade Classics to New Hardware", "link": "https://hackaday.com/2024/07/18/supercon-2023-bringing-arcade-classics-to-new-hardware/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/hickman23_feat.jpg", "youtube": "https://www.youtube.com/watch?v=ZMyO", "original_content": "The processing power of modern game consoles is absolutely staggering when compared to the coin-op arcade machines of the early 1980s. Packed with terabytes of internal storage and gigabytes of RAM, theres hardly a comparison to make with the Z80 cabinets that ran classics like Pac-Man. But despite being designed to pump out lifelike 4K imagery without breaking a virtual sweat, occasionally even these cutting-edge consoles are tasked with running one of those iconic early games like Dig Dug or Pole Position. Nostalgia is a hell of a drug\nAs long as there are still demand for these genre-defining games, developers will have to keep figuring out ways to bring them to newer  and vastly more complex  systems. Which is precisely the topic of Bob Hickmans 2023 Supercon talk,\u00a0The Bits and Bytes of Bringing Arcade Classics to Game Consoles. Having spent decades as a professional game developer, hes got plenty of experience with the unique constraints presented by both consoles and handhelds, and what it takes to get old code running on new silicon.\n\nWhy Not Emulate?\nFor any reasonably tech-savvy person, the first thing that will come to mind when talking about bringing old games to new hardware is naturally going to be emulation. At first glance, it would seem to be the ideal solution: you dont have to recreate the game from scratch, the gameplay should be exactly as players remember it, and theres probably an open source emulator core out there already that you can port over to whatever your target system is.\nDepending on the hardware, emulation isnt always viable.\nBut as Bob explains early on in his talk, its not quite that simple in the real world. Sure, emulation\u00a0should provide a perfect recreation of the game, but in practice, there are always differences that will manifest themselves in unexpected ways. Plus modern audiences are often going to expect enhancements (upgraded graphics, online play, etc) that are likely going to require some modification to the original game anyway.\nThere is also the issue of performance to consider. While this is going to be less of a problem on a modern console, you might be trying to bring the game over to something like a smartphone which may or may not have enough processing power to emulate the original system at the the speeds necessary to deliver the experience youre aiming for.\nTo illustrate the point, most of Bobs talk covers a particular project he was involved in back in 2001: bringing Namco Museum to Nintendos Game Boy Advance (GBA).\nThe Fine Art of Porting\nPowered by an ARM7 CPU running at a little over 16 MHz, the GBA wasnt exactly the ideal platform for emulation. At the same time, simply recreating the games included in Namco Museum from scratch wasnt really an option either. Not only would it have been a considerable undertaking, but the final result would have been different enough from the originals that youd lose that nostalgic charm.\nThe solution? Porting the games over to portable C code that could be compiled for the GBA. But even here, things wouldnt exactly be smooth sailing. For one thing, Bob points out that you wont necessarily have access to the original source code. So the first step is likely going to be extracting the binary and graphical assets from a ROM of the game  this could be pulled literally from an arcade cabinet and read into the computer, or if youre pressed for time, perhaps downloaded from one of the seedier corners of the Internet.\nAfter decompiling the games binary into Z80 assembly, Bob says the next step would be to convert that over to C. The results arent going to be perfect, but theyll be better than nothing. The resulting C code certainly isnt going to compile on the first go, but youll get plenty of error messages in the attempt, and that will tell you where you need to focus your attention on. Fixing these issues one-by-one is going to be time consuming, but will be worth the effort in the end. Eventually, youll get a binary that compiles and actually runs on your target systembut you arent done yet.\nUp to this point youve just been worried about getting the code compiled and running. Whether or not it actually does what its supposed to do has been only a vague concern. So when you get this far, the binary you run likely wont look or play anything like its supposed to. For one thing, the graphics are sure to be busted. Youll need to go in there and rewrite the graphics functions so theyll work on your target system while still taking the same inputs as the original versions. Thats going to include figuring out how to scale everything to fit your new target resolution.\nYoull need to do something similar for handling user input, as well. The original arcade cabinet probably had some memory mapped scheme where reading from an address in memory would tell it which physical buttons were being pressed, so thats going to need to be modified to fit the games new home.\nKeep knocking these issues out as they come up, and eventually youll have a working game. Sort of.\nGetting Up to Speed\nThe final part of the process is optimization. Bob recalls that, after porting over the original Z80 code and getting it running\u00a0 properly on the GBA, some of the games would only run at a fraction of their original speed. It wasnt because the GBA didnt have the computational power to do the games justice, its just that the code wasnt working to the systems strengths.\nPole Position running on the GBA.\nOne trick that Bob details is adding some code that will record each function called by the code, and have somebody play the game for a bit. After youve collected enough data, youll be able to identify the most commonly used functions and properly direct your optimization efforts.\nUnfortunately, theres no magic bullet for code optimization. But Bob does mention some commonly used tricks, such as using pre-computed lookup tables instead of trying to do sine and cosine math in real-time. Theres also things the new hardware will be capable of that you might be able to put to use, even with an older game that wasnt designed with it in mind.\nBob gives an excellent example of this in discussing the optimizations for Pole Position. Originally the background objects on the horizon were rendered in the same way the rest of the game was, but this proved to be slower on the GBA than anticipated. So the solution was to take the entire skyline, save it as a pre-rendered image, and use the GBAs hardware scrolling capabilities to move it. Along with a few other tricks, this got the 1982 racer running at the proper 60 frames per second.\nNot All Fun and Games\nWhile Bobs talk was focused on a very specific niche, many of the tricks and techniques he describes could be applied to other aspects of software development. Whether its taking old assembly code and turning it into C that your modern computer can run, or tracking down which functions are worth your time to refactor, theres plenty in this presentation that you can use in whatever software project you might have going on.\nNow whether or not your project is as much fun to bug-test as Galaga\u00a0 well, thats another topic entirely.\n", "title": "\u30b2\u30fc\u30e0\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u30a2\u30fc\u30b1\u30fc\u30c9\u30af\u30e9\u30b7\u30c3\u30af\u30b9\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30d3\u30c3\u30c8\u3068\u30d0\u30a4\u30c8", "body": "1980\u5e74\u4ee3\u306e\u30b3\u30a4\u30f3\u30aa\u30d7\u306e\u30a2\u30fc\u30b1\u30fc\u30c9\u30de\u30b7\u30f3\u3068\u6bd4\u3079\u3066\u3001\u73fe\u4ee3\u306e\u30b2\u30fc\u30e0\u30b3\u30f3\u30bd\u30fc\u30eb\u306e\u51e6\u7406\u80fd\u529b\u306f\u9a5a\u7570\u7684\u3002\u3057\u304b\u3057\u3001\u6614\u306e\u30b2\u30fc\u30e0\u3092\u65b0\u3057\u3044\u30b7\u30b9\u30c6\u30e0\u306b\u79fb\u690d\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u306a\u304f\u3001\u53e4\u3044\u30b3\u30fc\u30c9\u3092\u65b0\u3057\u3044\u30b7\u30ea\u30b3\u30f3\u3067\u5b9f\u884c\u3055\u305b\u308b\u6280\u8853\u3092\u958b\u767a\u8005\u306f\u7814\u7a76\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002", "titles": ["\u30b2\u30fc\u30e0\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u30a2\u30fc\u30b1\u30fc\u30c9\u30af\u30e9\u30b7\u30c3\u30af\u30b9\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30d3\u30c3\u30c8\u3068\u30d0\u30a4\u30c8", "\u53e4\u5178\u30b2\u30fc\u30e0\u3092\u65b0\u3057\u3044\u30b7\u30b9\u30c6\u30e0\u306b\u6301\u3061\u8fbc\u3080\u305f\u3081\u306e\u65b9\u6cd5", "\u30dd\u30fc\u30bf\u30d6\u30ebC\u30b3\u30fc\u30c9\u306b\u3088\u308b\u30b2\u30fc\u30e0\u306e\u79fb\u690d", "\u53e4\u3044\u30b2\u30fc\u30e0\u3092\u65b0\u3057\u3044\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u6700\u9069\u5316\u3059\u308b\u65b9\u6cd5", "\u30b3\u30fc\u30c9\u6700\u9069\u5316\u306e\u79d8\u8a23"]}