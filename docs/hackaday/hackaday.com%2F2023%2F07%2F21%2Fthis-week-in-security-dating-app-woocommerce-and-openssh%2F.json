{"pubDate": "2023-07-21T14:00:28", "original_title": "This Week in Security: Dating App, WooCommerce, and OpenSSH", "link": "https://hackaday.com/2023/07/21/this-week-in-security-dating-app-woocommerce-and-openssh/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Up first this week is a report from vpnMentor, covering the unsecured database backing a set of dating apps, including 419 Dating. The report is a bit light on the technical details, like what sort of database this was, or how exactly it was accessed. But the result is 2.3 million exposed records, containing email address, photos  sometimes explicit, and more. Apparently also exposed were server backups and logs.\nThe good news here is that once [Jeremiah Fowler] discovered the database door unlocked and hanging open, he made a disclosure, and the database was secured. We can only hope that it wasnt discovered by any bad actors in the meantime. The app has now disappeared from the Google Play store, and had just a bit of a sketchy air about it.\nWooCommerce Under Siege\nBack in March, CVE-2023-28121 was fixed in the WooCommerce plugin for WordPress. The issue here is an authentication bypass that allows an unauthenticated user to commandeer other user accounts.\nWithin a few months, working exploits had been derived from the details of the patch plugging the hole. It wasnt hard. A function for determining the current user was explicitly trusting the contents of the X-WCPAY-PLATFORM-CHECKOUT-USER request header. Set that value in a request sent to the server, and ding, youre administrator.\nAnd now the cows are coming home to roost. Active exploitation started in earnest on July 14, and the folks at Wordfence clocked a staggering 1.3 million exploitation attempts on the 16th. Whats particularly interesting is that the Wordfence data gathering system saw a huge increase in requests for the readme.txt file that indicates the presence of the WooCommerce plugin on a WordPress site. These requests were observed before the attacks got started, making for an interesting early warning system.\nOpenSSH Has an RCE\nBut dont panic. Yes, theres an RCE. And yes it bypasses Address Space Layour Randomization, Position Independent Executables, and the No eXecute bit. The good news is that its only reachable by going back down an SSH connection that has ssh-agent forwarding enabled.\nThis calls for a bit of background. SSH is the Secure SHell program, which allows remote command line connection across the internet. Ssh-agent is a helper program than runs automatically and manages SSH keys  those keys that let you log in to another machine without a password. One of the tricks that a sysadmin has is agent forwarding, enabled with the -A flag on the ssh command. This allows the SSH binary on the remote machine to pull keys from the local machines ssh-agent process, in order to authenticate an SSH session initiated off to yet another endpoint. Its always had a warning that it shouldnt be done with an untrusted machine, to avoid abuse of those keys.\nWell now we have yet another reason not to do ssh-agent forwarding. The core observation made by researchers at Qualsys was that the remote machine can trigger a load and unload of all the shared libraries in the /usr/lib* folders. And notably, those libraries load in the context of the ssh-agent application, which is not the intended behavior of many of those libraries. The question then becomes, what mischief can be had with just those two primitives?\nTo find some interesting misbehavior, a fuzzing approach was used, where all of the available libraries in the Ubuntu repositories were run in this condition and an strace captured. There were some interesting findings, like several libraries setting the stack to executable, and some having the nodelete flag set. Then a handful of libraries set up a segfault handler, and fail to properly deregister it when unloaded. And some libraries just crash right away with a segfault.\nThis does suggest an attack that might work, using library loads and unloads: Make the ssh-agent stack executable, register a SIGSEGV handler and then unmap the code from under the handler. Then load a nodelete library, which puts useful code under the handler pointer, and finally load a library that crashes, jumping execution to the segfault handler. The right code gadget being executed then jumps to the stack, where shellcode can be waiting in a buffer.\nIts brilliant, and thankfully a very narrow windows of exposure for most of us. The flaw was fixed in an update of OpenSSH this Wednesday. The broader suggestion is to avoid using ssh-agent forwarding, and instead use ssh jump hosts. Or theres always ssh port forwarding.\nForager\nTruffle Security has announced Forager, a search engine for leaked secrets. The idea is that individuals and companies routinely publish things to GitHub that they really didnt intend to make public. Across all of GitHub, Truffle sees something like 1,800 new secrets leaked a day.\nWhat Forager intends to do is automate the confirmation that those secrets are legitimate, make an attempt at informing the organization of the leak, and then categorize those results in a sane way. If you go to Forager now, you can search through the results, but unless you log in with an organization email address, all the results are redacted.\nBits and Bytes\nIf you ever wanted to know more about MacOS pen testing, and despaired because nearly every resource is aimed at Windows and Linux, then Cyberark has you covered. In the first installment of what will hopefully be a long series, were introduced to the basics of applications in MacOS, covering details like sandboxing, GUI and network testing, and more. This is one to bookmark, for future reference and further articles.\nGigabyte has gotten some free security analysis of its Baseboard Management Controller firmware, since it was all dumped in a ransomware attack a couple years ago. Turns out, that firmware had some really dire vulnerabilities, which Eclypsium found in a code review. Two separate CVEs chain together to make a worst-case CVSS 10 attack scenario. Eclypsium has a bit of grim fun at the expense of lights-out management, calling this finding Lights Out Forever.", "title": "\u30c7\u30fc\u30c8\u30a2\u30d7\u30ea\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u6f0f\u6d29\u30012.3\u4e07\u4eba\u5206\u306e\u500b\u4eba\u60c5\u5831\u304c\u6d41\u51fa\u3057\u305f", "body": "vpnMentor\u306b\u3088\u308b\u5831\u544a\u3067\u306f\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u7518\u3044\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u30c0\u30a4\u30a2\u30eb\u30a2\u30c3\u30d7\u30a2\u30d7\u30ea\u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u30022.3\u767e\u4e07\u4ef6\u4ee5\u4e0a\u306e\u60c5\u5831\u304c\u6d41\u51fa\u3057\u3001\u500b\u4eba\u60c5\u5831\u304c\u60aa\u7528\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002", "titles": ["\u30c7\u30fc\u30c8\u30a2\u30d7\u30ea\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u6f0f\u6d29\u30012.3\u4e07\u4eba\u5206\u306e\u500b\u4eba\u60c5\u5831\u304c\u6d41\u51fa\u3057\u305f", "WordPress\u306eWooCommerce\u30d7\u30e9\u30b0\u30a4\u30f3\u304c\u8a8d\u8a3c\u30d0\u30a4\u30d1\u30b9\u306e\u8106\u5f31\u6027\u3092\u62b1\u3048\u3066\u3044\u305f", "OpenSSH\u306b\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c\u306e\u8106\u5f31\u6027\u304c\u767a\u898b\u3055\u308c\u308b", "GitHub\u4e0a\u30671\u65e5\u306b1,800\u3082\u306e\u6a5f\u5bc6\u60c5\u5831\u304c\u6f0f\u6d29\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5224\u660e", "Gigabyte\u306e\u57fa\u677f\u7ba1\u7406\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306b\u6df1\u523b\u306a\u8106\u5f31\u6027\u304c\u898b\u3064\u304b\u308b"]}