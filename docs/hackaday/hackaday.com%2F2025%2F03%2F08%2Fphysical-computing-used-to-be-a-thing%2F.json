{"pubDate": "2025-03-08T15:00:04", "original_title": "Physical Computing Used to be a Thing", "link": "https://hackaday.com/2025/03/08/physical-computing-used-to-be-a-thing/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2017/08/ledip.jpg", "original_content": "In the early 2000s, the idea that you could write programs on microcontrollers that did things in the physical world, like run motors or light up LEDs, was kind of new. At the time, most people thought of coding as stuff that stayed on the screen, or in cyberspace. This idea of writing code for physical gadgets was uncommon enough that it had a buzzword of its own: \u201cphysical computing\u201d.\nYou never hear much about \u201cphysical computing\u201d these days, but that\u2019s not because the concept went away. Rather, it\u2019s probably because it\u2019s almost become the norm. I realized this as Tom Nardi and I were talking on the podcast about a number of apparently different trends that all point in the same direction.\nWe started off talking about the early days of the Arduino revolution. Sure, folks have been building hobby projects with microcontrollers built in before Arduino, but the combination of a standardized board, a wide-ranging software library, and abundant examples to learn from brought embedded programming to a much wider audience. And particularly, it brought this to an audience of beginners who were not only blinking an LED for the first time, but maybe even taking their first steps into coding. For many, the Arduino hello world was their coding hello world as well. These folks are \u201cphysical computing\u201d natives.\nNow, it\u2019s to the point that when Arya goes to visit FOSDEM, an open-source software convention, there is hardware everywhere. Why? Because many successful software projects support open hardware, and many others run on it. People port their favorite programming languages to microcontroller platforms, and as they become more powerful, the lines between the \u201cbig\u201d computers and the \u201cmicro\u201d ones starts to blur.\nAnd I think this is awesome. For one, it\u2019s somehow more rewarding, when you\u2019re just starting to learn to code, to see the letters you type cause something in the physical world to happen, even if it\u2019s just blinking an LED. At the same time, everything has a microcontroller in it these days, and hacking on these devices is also another flavor of physical computing \u2013 there\u2019s code in everything that you might think of as hardware. And with open licenses, everything being under version control, and more openness in open hardware than we\u2019ve ever seen before, the open-source hardware world reflects the open-source software ethos.\nAre we getting past the point where the hardware / software distinction is even worth making? And was \u201cphysical computing\u201d just the buzzword for the final stages of blurring out those lines?\n\nThis article is part of the Hackaday.com newsletter, delivered every seven days for each of the last 200+ weeks. It also includes our favorite articles from the last seven days that you can see on the web version of the newsletter.\n\nWant this type of article to hit your inbox every Friday morning? You should sign up!\n\n"}