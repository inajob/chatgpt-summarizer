{"pubDate": "2024-07-25T17:00:18", "original_title": "Linux Fu: Failing Pipelines", "link": "https://hackaday.com/2024/07/25/linux-fu-failing-pipelines/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "Bash is great for automating little tasks, but sometimes a little script you think will take a minute to write turns into a half hour or more. This is the story of one of those half-hour scripts.\nI have too many 3D printers. In particular, I have three that are almost  but not exactly  the same, so each one has a slightly different build process when I want to update their firmware. In all fairness, one of those printers is heading out the door soon, but Ill probably still wind up building firmware images for it.\nMy initial process was painful. I have a special directory with the four files needed to configure Marlin for each machine. I copy all four files and ask PlatformIO to perform the build. Usually, it succeeds and gives me a file that looks like firmware-yyyyddmmhhmm.bin or something like that.\nThe problem is that the build process doesnt know which of the three machines is the target: Sulu, Checkov, or Fraiser. (Long story.) So, I manually look at the file name, copy it, and rename it. Of course, this is an error-prone process, and Im basically lazy, so I decided to write a script to do it. I figured it would take just a minute to bundle up all the steps. I was wrong.\n\nFirst Attempt\nCopying the files to the right place was a piece of cake. I did check to make sure they existed. The problem came from launching PlatformIO, seeing the result on the screen, and being able to parse the filename out of the stream.\nI thought it would be easy:\nFN=$(pio run | grep '^Renamed to' | cut -d ' ' -f 3 )\nThat should do the build and leave $FN with the name of the file I need to rename and process. It does, but there are two problems. You cant see whats happening, and you cant tell when the build fails.\nEasy Problem First\nThe pipeline consumes the builds output. Of course, a tee command can manage that, right? Well, sort of. The problem is that the tee command sends things to a file and standard out, but the standard out, in this case, is the pipe. Sure, I could tee the output to a temporary file and then process that file later, but thats messy.\nSo, I resorted to a Bash-specific feature:\nFN=$(pio run | tee /dev/fd/2 | grep ...\nThis puts the output on my screen but still sends it down the pipe, too. Sure, there are cases when this isnt a good idea, and it isnt very portable, but for my own use, it works just fine, and Im OK with that. There are other ways to do this, like using /dev/tty if you know you are only using the script from a terminal.\nHarder Problem\nThe bigger problem is that if the build fails  and it might \u00a0 there isnt a good way to fail the whole pipeline. By default, the pipes return value is the last return value, and cut is happy to report success as long as it runs.\nThere are a number of possible answers. Again, I could have resorted to a temporary file. However, I decided to set a bash option to cause any failing item in a pipe to fail the whole pipe immediately:\nset -o pipefail\nSo now, in part, my script looks like this:\nset -o pipefail\nFN=$(pio run | tee /dev/fd/2 | grep '^Renamed to' | cut -d ' ' -f 3 )\nif [ $? -eq 0 ]\nthen\n   echo Success...\n   cp \".pio/build/STM32F103RC_creality/$FN\" \"configurations/$1\"\n   echo Result: \"configurations/$1/$FN\"\nelse\n   echo Build failed\n   exit 3\nfi\nFinal Analysis\nIs it brain surgery? Nope. But it is one of those bumps in the road in what should have been a five-minute exercise. Maybe next time you run into it, youll save yourself at least 25 minutes. This gets the job done, but it isnt a stellar example of bash programming. I would hate to run it through a lint-like checker.", "title": "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u81ea\u52d5\u3001\u52b9\u7387\u7684\u306b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u65b9\u6cd5", "body": "Bash\u3092\u4f7f\u3063\u305f\u30bf\u30b9\u30af\u306e\u81ea\u52d5\u5316\u306b\u3064\u3044\u3066\u3001\u601d\u3063\u305f\u3088\u308a\u3082\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u534a\u6642\u9593\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\u306e\u7d4c\u9a13\u8ac7\u30023D\u30d7\u30ea\u30f3\u30bf\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u66f4\u65b0\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u81ea\u52d5\u5316\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304d\u3001\u305d\u306e\u8a66\u884c\u932f\u8aa4\u3092\u901a\u3057\u3066\u89e3\u8aac\u3002", "titles": ["\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u81ea\u52d5\u3001\u52b9\u7387\u7684\u306b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u65b9\u6cd5", "Bash\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3088\u308b\u96fb\u5b50\u5de5\u4f5c\u30d7\u30ed\u30bb\u30b9\u306e\u81ea\u52d5\u5316", "\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3088\u308b\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u4f5c\u696d\u306e\u5de5\u592b", "\uff13D\u30d7\u30ea\u30f3\u30bf\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u66f4\u65b0\u3092\u81ea\u52d5\u5316\u3059\u308b\u65b9\u6cd5", "\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0IO\u3092\u4f7f\u7528\u3057\u305f\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u30d3\u30eb\u30c9\u30d7\u30ed\u30bb\u30b9\u306e\u81ea\u52d5\u5316"]}