{"pubDate": "2024-01-26T15:00:59", "original_title": "This Week in Security: MOAB, Microsoft, and Printers", "link": "https://hackaday.com/2024/01/26/this-week-in-security-moab-microsoft-and-printers/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "This week, news has broken of the Mother of All Breaches, MOAB. Its 12 terabytes and 26 billion records, averaging about 500 bytes each. Now note that a record here is likely not a discrete email address, but simply a piece of data  a row on the database.\nNow before we all lose our minds over this, theres an important detail to take note of: These arent new leaks. This is a compilation of leaks, and as far as researchers have checked, there arent any new leaks disclosed here. This was someones database of accumulated leak data, accidentally re-leaked via an unsecured database. [Troy Hunt] goes so far as to speculate that it could be from a breach search service, which sounds pretty plausible.\nThere was yet another release of credentials late last week that hasnt attracted as much attention, but seems to represent a much bigger issue. The Naz.api data set isnt a breach where a company was hacked, and their entire user database was stolen. Instead, this one is combination of a credential stuffing list and stealer logs.\nCredential stuffing is basically a smarter brute force attack, where the credentials from one breach are tried on multiple other sites. Such a list is just the results where guesses were successful. The really interesting bit is that this dataset seems to include stealer logs. Put simply, thats the results of malware that scrapes victim machines for credentials.\nNaz.api has over 70 million unique email addresses, and it looks like about a third of them are new, at least according to the Haveibeenpwned dataset. Now thats significant, though not really worthy of the MOAB title, either.\nMicrosofts Mysterious Shellacking\nMicrosoft got their email breached, and the story is weird. Microsft states that it was Midnight Blizzard, a Russian APT, and that initial access was via a password spray attack  essentially a dictionary attack. Microsoft states that this approach attackers to compromise a legacy non-production test tenant account. And from this foothold, attackers used the account\u2019s permissions to access a very small percentage of Microsoft corporate email accounts, including members of our senior leadership team. It feels like theres a whole lot of details in the missing step two of this story, before Midnight Blizzard arrived at PROFIT!!.\nA late update has come in on this story. It looks like there was an old OAuth application that had some sort of global admin access to the entire Microsoft corporate environment. This is very new information, but its beginning to look like Microsoft accidentally left the keys in the lock on this one.\nHP Saves Printers by Bricking Them\nPrinter companies have done some sketchy things over the years. For example, I remember one unit I was tasked with configuring, that was programmed not to print anything until a Windows machine finished an online registration process  it was bricked out of the box, unless unlocked through this process. So its not terribly surprising to read that HP is pulling a similar stunt, bricking printers when third-party ink replacements are installed. If youre wondering how they havent been sued into oblivion for this tactic, the answer is that the lawsuits are still ongoing. But what really caught our attention is the explanation HP came up with to defend this practice: We brick printers to protect them from viruses on that unauthorized ink.\nOK, so lets take a look at this claim. HP puts a memory chip in each of their cartridges, which contains the model and serial number of the cartridge. The printer pulls this data from the chip and sends it off to HP for verification. So, embedded firmware, pulling very structured data from a black-box source, that gets lightly manipulated and forwarded on. That sounds exactly like a situation where buffer overflows and vulnerable code would abound. So the basic premise checks out. HP printers probably have vulnerable code that reads from ink cartridges.\nThe rest of HPs argument is that third-party cartridges are using re-programmable chips, which could contain a malicious payload. Because HP has a secure manufacturing process, its much less likely to deliver something malicious. And honestly, that thought checks out, too. Who knows where third-party cartridges come from, and whos had access to them?\nSo Thanks HP? Not so fast. Theres a couple intervening points. The first is that this sort of attack would necessarily be targeted and difficult to pull off. Its a possible threat, but one thats squarely in the realm of state-sponsored actors. And most importantly, why exactly do HP ink cartridges have data chips and a serial data connection in them? Its specifically so HP can implement cartridge DRM. So yes, this is a self-causing security problem.\nAnd if thats not enough printer security news for one week, Lexmark has announced a pair of vulnerabilities in PostScript interpreters. The really interesting one is a vulnerability in the Service Engineer menu, that allows for arbitrary code execution.\nCrawling Domains for Secrets\nIts amazing what a clever idea can turn into with just a few days of work, and about $100 worth of compute. A researcher at Escape built a webcrawler with a single purpose: looking for exposed API keys. The crawler was fed with the Majestic Million list of the top one million domains (Hackaday clocks in at number 2,757), and set off to work.\nThe results are a bit surprising. After scanning just under a million domains  governmental and other sensitive targets were pruned from the list  the tool found 18,000 exposed secrets. Thats nearly two percent of the worlds top million domains. Yikes!\nAtlassian detailed and scanned\nLast week we talked about a nasty Confluence vulnerability, and this week it already seems to be under active exploitation. ProjectDiscovery has us covered with a fairly deep dive into the issue, and its not a hard one to understand. Confluence uses Velocity template files, and Struts to actually serve those pages. But its possible to access the template files directly as an unauthenticated user. Thats not great, but what turns this into a serious vulnerability is that some of those templates will take HTTP parameters, and fire off processes with them. The text-inline.vm template in particular is vulnerable to this, and injected parameters can lead to code execution.\n\nBits and Bytes\nAlso from ProjectDiscovery, we have cvemap, an interesting little tool for quickly searching, sorting, and reviewing released vulnerabilities. Of particular interest is the integration with GitHub, the tracking of whether PoCs are in the wild, and more.\nWe prefer to talk about security problems when there are patches or workarounds available to mitigate the problem. Thats why we really dont like problems like this one, that gets released after radio silence from the vendor. Researchers at HeroLab found a deserialization vulnerability in the Gambio online shop software that can lead to code execution. It was discovered back in December, and after six weeks of silence, we have disclosure. HeroLab has included a workaround that should protect Gambio installs, but warns that it may lead to functionality breakage.\nAnd finally, theres a bit of a storm brewing around CVEs, particularly when it comes to WordPress Plugins. It seems that a handful of security vendors are making the assumption that every vulnerability has always existed, and report CVEs as affecting every version prior to the fix, even when only a single version is vulnerable. The problem seems to be worse when these security vendors are anointed as CVE Numbering Authorities, CNAs. There is some hope, in that the CNA rules are being revised, and some of these issues are being considered. Heres hoping."}