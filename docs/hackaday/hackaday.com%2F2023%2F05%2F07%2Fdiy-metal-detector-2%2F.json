{"pubDate": "2023-05-08T02:00:00", "original_title": "DIY Metal Detector", "link": "https://hackaday.com/2023/05/07/diy-metal-detector-2/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/05/metal.png", "original_content": "If you want to get rich by hunting with a metal detector, you might want to consider how much you invested in the hardware to start with. Finding a tin can with a $200 detector might not make economic sense. But building a metal detector yourself doesnt have to be hard, as [Mirko] shows in a recent post. His STM32-based pulse induction metal detector looks good and works well, as you can see in the video below.\n[Mirko] reports that the device can detect a coin at 30 cm and a large metal object at more than 80 cm. The project uses the Arduino IDE and a Blue Pill STM32 module. The project looks good with an LED module and a rotary encoder to set sensitivity.\n\nPulse induction metal detectors use a single coil to send and receive short pulses. This differs from the more common BFO-style which uses two frequencies that produce a beat frequency that changes in the presence of metal. These use two coils and are more affected by mineralization  the interference caused by minerals in the soil  and general interference. Typically, BFO detectors have less sensitivity, especially at a distance.\nThis isnt the first pulsed induction detector weve seen. Of course, for a simple one you can  to forestall comments  use a 555.\n", "title": "\u81ea\u5206\u3067\u4f5c\u308c\u308b\uff01STM32\u30d9\u30fc\u30b9\u306e\u91d1\u5c5e\u63a2\u77e5\u6a5f\u306e\u4f5c\u308a\u65b9", "body": "DIY\u3067\u4f5c\u3063\u305fSTM32\u306e\u30d1\u30eb\u30b9\u30a4\u30f3\u30c0\u30af\u30b7\u30e7\u30f3\u91d1\u5c5e\u63a2\u77e5\u6a5f\u3092\u7d39\u4ecb\u3002$200\u306e\u88fd\u54c1\u3088\u308a\u306f\u307f\u3064\u304b\u308b\u91d1\u5c5e\u306b\u3088\u3063\u3066\u30b3\u30b9\u30d1\u304c\u5909\u308f\u3063\u3066\u304f\u308b\u30022\u3064\u306e\u30b3\u30a4\u30eb\u3092\u4f7f\u3046BFO\u65b9\u5f0f\u3088\u308a\u3082PI\u65b9\u5f0f\u306f\u30de\u30a4\u30ca\u30b9\u5f71\u97ff\u3092\u56de\u907f\u3057\u3001\u5927\u304d\u306a\u91d1\u5c5e\u7269\u4f53\u3082\u767a\u898b\u3067\u304d\u308b\u305f\u3081\u3001\u8ddd\u96e2\u611f\u306b\u5bfe\u3057\u3066\u3088\u308a\u654f\u611f\u3002\u305f\u3060\u3057\u3001\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306f\u6700\u5c0f\u9650\u306e\u69cb\u6210\u306b\u7559\u3081\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u9060\u8ddd\u96e2\u3067\u306f\u611f\u5ea6\u304c\u4f4e\u3044\u3002", "titles": ["\u81ea\u5206\u3067\u4f5c\u308c\u308b\uff01STM32\u30d9\u30fc\u30b9\u306e\u91d1\u5c5e\u63a2\u77e5\u6a5f\u306e\u4f5c\u308a\u65b9", "\u96fb\u5b50\u5de5\u4f5c\u3067\u81ea\u4f5c\u91d1\u5c5e\u63a2\u77e5\u6a5f\u3092\u4f5c\u308d\u3046", "\u81ea\u4f5c\u91d1\u5c5e\u63a2\u77e5\u6a5f\u3067\u304a\u5b9d\u63a2\u3057\u3092\u697d\u3057\u3082\u3046", "STM32\u3068ArduinoIDE\u3092\u4f7f\u3063\u305f\u91d1\u5c5e\u63a2\u77e5\u6a5f\u306e\u4f5c\u6210\u65b9\u6cd5", "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u81ea\u4f5c\u3067\u91d1\u5c5e\u3092\u691c\u77e5\u3059\u308b\u65b9\u6cd5\u2212STM32\u3092\u6d3b\u7528\u3057\u305f\u91d1\u5c5e\u63a2\u77e5\u6a5f\u306e\u4f5c\u308a\u65b9"]}