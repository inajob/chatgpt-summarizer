{"pubDate": "2025-08-16T20:00:00", "original_title": "2025 One Hertz Challenge: STM32 Blinks In Under 50 Bytes", "link": "https://hackaday.com/2025/08/16/2025-one-hertz-challenge-stm32-blinks-in-under-50-bytes/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/08/172401754319539942-1-e1754879947427.png", "original_content": "Many of us have run a Blink program on a microcontroller before. Its effectively the Hello, World! of the embedded space. However, few of us have ever thought about optimizing our Blink code to be as miniscule as possible. But thats precisely what [Rudra Lad] did for this entry into the 2025 One Hertz Challenge!\nThis example of Blink, delay_blinky_13, is built specifically for the STM32F4 Discovery microcontroller development board. [Rudra] notes the code is highly optimized and compiles down to a binary size of under 50 bytes. The code doesnt even use RAM, and it aims to get the blink as close to 1 Hz as possible. Many optimizations were used to crunch it down as small as possible. For example, the standard startup code isnt used, with the entire program instead written in the Reset_Handler to save space. Bit-band is also used to write to peripheral registers to blink the LED, since this uses less instructions than the typical methods. Meanwhile, with many tweaks to the delay counting routine, [Rudra] was eventually able to get the blink frequency to 1.00019 Hz, as measured on a logic analyzer. Thats pretty darn close!\nWhile its rare that you have only 50 bytes of binary space to blink an LED, work like this is a great way to flex your coding muscles. Code is on Github for the curious, and if youve worked up your own impressive tiny binaries, dont hesitate to let us know!\n \n\n\n"}