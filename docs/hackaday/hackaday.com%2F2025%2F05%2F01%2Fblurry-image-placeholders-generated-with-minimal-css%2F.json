{"pubDate": "2025-05-02T02:00:03", "original_title": "Blurry Image Placeholders, Generated With Minimal CSS", "link": "https://hackaday.com/2025/05/01/blurry-image-placeholders-generated-with-minimal-css/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/LQIP-Featured-Anim.gif", "original_content": "Low-quality image placeholders (LQIPs) have a solid place in web page design. There are many different solutions but the main gotcha is that generating them tends to lean on things like JavaScript, requires lengthy chunks of not-particularly-human-readable code, or other tradeoffs. [Lean] came up with an elegant, minimal solution in pure CSS to create LQIPs.\nHeres how it works: all required data is packed into a single CSS integer, which is decoded directly in CSS (no need for any JavaScript) to dynamically generate an image that renders immediately. Another benefit is that without any need for wrappers or long strings of data this method avoids cluttering the HTML. The code is little more than a line like img src=\"\u2026\" style=\"--lqip:567213\" which is certainly tidy, as well as a welcome boon to those who hand-edit files.\nThe trick with generating LQIPs from scratch is getting an output that isnt hard on the eyes or otherwise jarring in its composition. [Lean] experimented until settling on an encoding method that reliably delivered smooth color gradients and balance.\nThis method therefore turns a single integer into a perfectly-serviceable LQIP, using only CSS. Theres even a separate tool [Lean] created to compress any given image into the integer format used (so the result will look like a blurred version of the original image). Its true that the results look very blurred but the code is clean, minimal, and the technique is easily implemented. You can see it in action in [Lean]s interactive LQIP gallery.\nCSS has a lot of capability baked into it, and its capable of much more than just styling and lining up elements. How about trigonometric functions in CSS? Or from the other direction, check out implementing a CSS (and HTML) renderer on an ESP32.", "title": "- CSS\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306aLQIP\u751f\u6210\u6cd5", "body": "CSS\u306e\u307f\u3067\u4f4e\u54c1\u8cea\u753b\u50cf\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc(LQIP)\u3092\u751f\u6210\u3059\u308b\u624b\u6cd5\u304c\u7d39\u4ecb\u3002\u30b7\u30f3\u30d7\u30eb\u3067\u30b3\u30fc\u30c9\u304c\u30af\u30ea\u30fc\u30f3\u3002", "titles": ["- CSS\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306aLQIP\u751f\u6210\u6cd5", "- JavaScript\u4e0d\u8981\uff01\u30af\u30ea\u30fc\u30f3\u306aLQIP\u3092CSS\u3067\u4f5c\u6210", "- \u30b9\u30e0\u30fc\u30ba\u306a\u8272\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u751f\u3080LQIP\u6280\u8853", "- CSS\u3067\u753b\u50cf\u3092\u6574\u6570\u5316\u3059\u308b\u65b0\u3057\u3044\u624b\u6cd5", "- ESP32\u3067\u306eCSS\u30ec\u30f3\u30c0\u30e9\u30fc\u5b9f\u88c5\u3092\u8003\u3048\u308b"]}