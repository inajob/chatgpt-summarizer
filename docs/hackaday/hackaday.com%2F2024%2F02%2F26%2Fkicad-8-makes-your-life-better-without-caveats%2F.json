{"pubDate": "2024-02-26T21:00:39", "original_title": "KiCad 8 Makes Your Life Better Without Caveats", "link": "https://hackaday.com/2024/02/26/kicad-8-makes-your-life-better-without-caveats/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/hadimg_kicad8_feat.png", "youtube": "https://www.youtube.com/watch?v=SnEL6TOusoQ", "original_content": "A few days ago, KiCad 8 was released, and its a straight upgrade to any PCB designers quality of life. Theres a blog post as usual, and, this year, theres also a FOSDEM talk from [Wayne Stambaugh] talking about the changes that we now all get to benefit from. Having gone through both of these, our impression is that KiCad 8 developers went over the entire suite, asking: this is cool, but could we make it better? The end result is indeed a massive improvement in a thousand different ways, from small to fundamental, and all of them seem to be direct upgrades from the KiCad 7 experience.\n\nFor a start, KiCad works better with whatever other tools you might use. Theres the recently added LTSpice schematic import and overall serious SPICE simulation improvements, SVG and DXF import for the schematic editor, an export copper option for STEP, mechanical CAD import QoL tweaks, IPC-2581 export for whenever manufacturers start supporting it, and Cadence Allegro netlist export in case youd like to use KiCad for schematic duty only. You can now also import footprint and symbol libraries from Altium and CADSTAR, as well as import EasyEDA projects directly, and this release brings enough features that you might just want to try those importers out.\nTheres much more to see on the KiCad front itself, too  separation of schematic editor grid sizes for wire and text positioning, Git integration, a new flexible BOM export tool, live previews when tweaking schematic symbols or footprints in text editor, improved 3D viewer UI, ARM64 support on Windows, and even on-hover preview of symbols and footprints when picking them from a library list. If your footprint or symbol differ from the library-contained one, theres now an interactive diff window showing you the changes visually, and its now easier to edit footprint pads in bulk thanks to footprint editor improvements. Last but not least, theres automatic schematic label and wire creation mechanisms for quick wireup, and improved net highlights in complex hierarchical schematic designs  the schematic editor has received a lot of love, and it is eager to share.\nA lot of sharp edges have been filleted in on the PCB editor front, too. You can now resize length tuning patterns on the fly, easily assign nets to graphic shapes to aid your RF or capacitive touch design, power symbols now have editable names, and theres a new pin 1 marker on the block that should work better in more situations than the previous convention ever could. For automation afficionados, weve seen `kicad_cli` introduced in KiCad 7, and now it adds ERC/DRC exports for all your automated pull request review needs, BoM export, gITF and VRML 3D model exports, and a bunch more.\nKiCads usage is ramping up, and industry players are taking note  for instance, Wurth Electronics has recently pledged to bring all their components to KiCad as a library. On the KiCad 9 roadmap, we see stable API IPC interface for Python scripts, visual diff and merge for Git, license embedding into files, reusable schematics and design blocks, pad stacks and guard rings, ODB++ export, certainly, quite a bit more that we didnt yet know we needed. Oh, and they dont forget about keeping things up to date either  this release brings a trove of documentation and UI translation updates.\nWhatever your toolkit is, chances are, KiCad 8 works with it way better now, and whatever kind of KiCad user you are, theres something in this release for you. Consider trying KiCad 8 out, report bugs if needed, donate, or maybe even get some KiCad merch while at it. It is wise to hold off on a .0.0 release, but all the new features sure make it a tempting offer.\n", "title": "KiCad 8: PCB\u8a2d\u8a08\u306e\u305f\u3081\u306e\u5927\u5e45\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8", "body": "KiCad 8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3001\u591a\u304f\u306e\u6539\u5584\u304c\u52a0\u3048\u3089\u308c\u305f\u3002LTSpice\u306e\u30b9\u30ad\u30fc\u30de\u30a4\u30f3\u30dd\u30fc\u30c8\u3001SPICE\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6539\u5584\u3001SVG\u3068DXF\u30a4\u30f3\u30dd\u30fc\u30c8\u3001IPC-2581\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u306a\u3069\u3001\u591a\u6570\u306e\u65b0\u6a5f\u80fd\u304c\u3042\u308b\u3002PCB\u30a8\u30c7\u30a3\u30bf\u30fc\u3084\u30ad\u30e3\u30d7\u30c1\u30e3\u30fc\u7de8\u96c6\u6a5f\u80fd\u3082\u3055\u307e\u3056\u307e\u306a\u6539\u5584\u304c\u52a0\u3048\u3089\u308c\u305f\u3002", "titles": ["KiCad 8: PCB\u8a2d\u8a08\u306e\u305f\u3081\u306e\u5927\u5e45\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8", "KiCad 8: \u4fbf\u5229\u306a\u65b0\u6a5f\u80fd\u3068\u6539\u5584\u70b9\u3092\u7d39\u4ecb", "KiCad 8: \u3088\u308a\u4f7f\u3044\u3084\u3059\u304f\u306a\u3063\u305f\u30c4\u30fc\u30eb\u7fa4", "KiCad 8: Altium\u3084CADSTAR\u304b\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30a4\u30f3\u30dd\u30fc\u30c8\u6a5f\u80fd\u8ffd\u52a0", "KiCad 8: Git\u7d71\u5408\u30843D\u30d3\u30e5\u30fc\u30a2\u30fcUI\u306e\u6539\u5584\u306a\u3069\u3001\u3055\u307e\u3056\u307e\u306a\u65b0\u6a5f\u80fd"]}