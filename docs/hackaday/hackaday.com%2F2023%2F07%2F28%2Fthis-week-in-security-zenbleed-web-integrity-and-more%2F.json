{"pubDate": "2023-07-28T14:00:38", "original_title": "This Week in Security: Zenbleed, Web Integrity, and More!", "link": "https://hackaday.com/2023/07/28/this-week-in-security-zenbleed-web-integrity-and-more/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Up first is Zenbleed, a particularly worrying speculative execution bug, that unfortunately happens to be really simple to exploit. It leaks data from function like strlen, memcpy, and strcmp. Its vulnerable from within virtual machines, and potentially from within the browser. The scope is fairly limited, though, as Zenbleed only affects Zen 2 CPUs: thats the AMD Epyc 7002 series, the Ryzen 3000 series, and some of the Ryzen 4000, 5000, and 7020 series of CPUs, specifically those with the built-in Radeon graphics.\nAnd at the heart of problem is a pointer use-after-free  that happens inside the CPU itself. We normally think of CPU registers as fixed locations on the silicon. But in the case of XMM and YMM registers, theres actually a shared store of register space, and the individual registers are mapped into that space using a method very reminiscent of pointers.\n\nXMM registers are 128 bits long, and YMM registers are 256 bits long. As a performance optimization, compilers often use the vzeroupper instruction to set the upper half of a YMM register to 0, letting the CPU run the rest of the instructions using 128-bit calculations. The important thing to understand is that the underlying memory isnt set to zero, but the pseudo-pointer is just flagged as equaling zero.\n\nNow heres the speculative execution: The CPU executes code ahead of time that includes a vzeroupper. If the CPU guesses wrong, it rolls back the execution, including that vzeroupper instruction, but the underlying storage may have already been assigned to one of the other XMM registers. The data is still there, and can simply be read back from the register. Note, this isnt a side-channel attack, the data is just there, ready to be accessed.\nWhats interesting is the sorts of data that is found in those registers. Modern compilers use these vector processing instructions for some essential functions, like strcmp, memcpy, and srtlen. Those routines deal with keys, passwords, log messages, and more.\nI tested this on my server, powered by an AMD 7302P, and confirmed that from within a virtual machine, the proof of concept code was able to access log messages from the bare-metal Alma Linux install. Thats really not good. Thankfully, AMD has published a microcode patch for these server series processors, and AlmaLinux has made that patch available. I did repeat the test after installing, and the microcode patch does indeed shut down the data leak.\nWhat about desktop and mobile chips? Well unfortunately, those updates arent out yet, and dont have a target date until later this year  December in the worst case. It appears that the server patch from AMD came way ahead of schedule and let the cat out of the proverbial bag, explaining the less than coordinated disclosure were seeing.\nGoogles Web Environment Integrity\nThe Internet is up in arms over a project at Google to add Web Environment Integrity (WEI) to Google Chrome.\u00a0The purpose of the WEI proposal is spelled out in the draft specification. It allows a website to have confidence that a connection is coming from a real user, and a validated web environment, without violating that users privacy by fingerprinting them.\nThe way this would work is through attestation, where a trusted third party has access to the browser, and then attests that it is approved. This seems to be essentially an anti-cheat scheme, or another layer of DRM. Which is where we get into the weeds of possibly being a terrible idea.\nThis is the argument made by Vivaldi, there is no guarantee this new system wont be terribly abused to keep other browsers out of the marketplace. And whither Linux? Anti-cheat measures have been very difficult to implement in a sane way on Linux. If the standard takes off, will Linux browsers just be locked out of the fun? Is it a better world when third parties get to determine the software you are allowed to run? Its fair to say that we have more questions than answers.\nUbuntus Overlay\nIn a bit of research cleverly named Game Over(lay), [Sagi Tzadik] and [Shir Tamari] of Wiz describe a flaw they found in Ubuntus patches on top of OverlayFS. The short version is that the Linux kernel had a vulnerability in the OverlayFS kernel module in 2020. Fixes were added to the vfs_setxattr function, but Ubuntu exposes more functionality by skipping this function, and directly calling __vfs_setxattr_noperm. Because of the Ubuntu-specific changes, the fixes in the upstream kernel are bypassed in Ubuntus kernels.\nThe exact issue is the ability to set file capabilities. setcap is the newer, better approach to the setuid bit, which allows an unprivileged user to run a binary with greater capabilities. Take a look at fping:\n[jbennett@Celeborn Downloads]$ getcap /usr/sbin/fping\n/usr/sbin/fping cap_net_raw=ep\nThe key to making that secure is that only root can assign capabilities. Except inside container filesystems, where the process of building them sometimes requires file capabilities. The unprivileged user can launch a new namespace and create the more capable executable in the lower directory. Where this goes wrong is when the OverlayFS filesystem is mounted, and the executable gets touched. The system makes a copy of the file, to the upper half of the OverlayFS, but that copy exists outside the created namespace, escaping the sandbox.\nThe estimate is that almost 40% of Ubuntu installs are vulnerable to this exploit. Thankfully its a local-only escalation of privilege flaw. Its still quite a menace as part of an attack chain, so go forth and patch!\n\nBits and Bytes\nThe Spring Java framework has an issue in the WebFlux component, where a double asterisk ** pattern can hit an edge case in the security coverage, potentially allowing for security bypass. It clocks in at a CVSS 9.1 base score, and 8.8 overall.\nAnd finally, dont miss our coverage of the intentional weakness in the TETRA radio standard. The whole story reminds me quite a bit of Operation Rubicon, where Crypto AG shipped similarly compromised devices under the direction of the US and German governments.", "title": "\"Zenbleed: AMD\u306eCPU\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3059\u7c21\u5358\u306a\u30d0\u30b0\"", "body": "Zenbleed\u306f\u3001\u7279\u306b\u5fc3\u914d\u306a\u63a8\u6e2c\u5b9f\u884c\u306e\u30d0\u30b0\u3067\u3042\u308a\u3001\u975e\u5e38\u306b\u7c21\u5358\u306b\u60aa\u7528\u3067\u304d\u307e\u3059\u3002Zen 2 CPU\u306b\u306e\u307f\u5f71\u97ff\u3092\u4e0e\u3048\u307e\u3059\u3002Zen 2 CPU\u306f\u3001AMD Epyc 7002\u30b7\u30ea\u30fc\u30ba\u3001Ryzen 3000\u30b7\u30ea\u30fc\u30ba\u3001\u4e00\u90e8\u306eRyzen 4000\u30015000\u3001\u304a\u3088\u30737020\u30b7\u30ea\u30fc\u30ba\u306eCPU\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\u554f\u984c\u306e\u6838\u5fc3\u306f\u3001CPU\u5185\u90e8\u3067\u767a\u751f\u3059\u308b\u30dd\u30a4\u30f3\u30bf\u306e\u4f7f\u7528\u5f8c\u89e3\u653e\u3067\u3059\u3002\u3053\u306e\u30d0\u30b0\u306b\u306f\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u30d1\u30c3\u30c1\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u3084\u30e2\u30d0\u30a4\u30eb\u306e\u30c1\u30c3\u30d7\u306b\u306f\u307e\u3060\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\nGoogle\u306f\u3001Google Chrome\u306bWeb Environment Integrity\uff08WEI\uff09\u3092\u8ffd\u52a0\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3055\u308c\u3066\u3044\u307e\u3059\u3002WEI\u306f\u3001Web\u74b0\u5883\u304c\u4fe1\u983c\u3067\u304d\u308b\u3082\u306e\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002WEI\u306b\u306f\u3001\u4fe1\u983c\u3067\u304d\u308b\u7b2c\u4e09\u8005\u304c\u30d6\u30e9\u30a6\u30b6\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u627f\u8a8d\u3055\u308c\u305f\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nUbuntu\u306eOverlayFS\u306b\u306f\u30012020\u5e74\u306b\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3057\u305f\u3002Ubuntu\u306e\u30d1\u30c3\u30c1\u3067\u306f\u4fee\u6b63\u304c\u30d0\u30a4\u30d1\u30b9\u3055\u308c\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u30ad\u30e3\u30d1\u30d3\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u30d0\u30b0\u306b\u3088\u308a\u3001\u307b\u3068\u3093\u306940%\u306eUbuntu\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u653b\u6483\u306b\u5bfe\u3057\u3066\u8106\u5f31\u3067\u3059\u3002\n\nSpring Java\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306f\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u30a8\u30c3\u30b8\u30b1\u30fc\u30b9\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u56de\u907f\u304c\u53ef\u80fd\u306a\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\nTETRA\u7121\u7dda\u898f\u683c\u306b\u610f\u56f3\u7684\u306a\u5f31\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u3001\u904e\u53bb\u306eCrypto AG\u306e\u4e8b\u4ef6\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002", "titles": ["\"Zenbleed: AMD\u306eCPU\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3059\u7c21\u5358\u306a\u30d0\u30b0\"", "\"Zen 2 CPU\u306b\u95a2\u3059\u308b\u6f0f\u6d29\u30d0\u30b0\uff1a\u4eee\u60f3\u30de\u30b7\u30f3\u304a\u3088\u3073\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30c7\u30fc\u30bf\u30ea\u30fc\u30af\"", "\"Google Chrome\u306eWeb\u74b0\u5883\u306e\u5b8c\u5168\u6027\uff1a\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u4fb5\u5bb3\u306a\u3057\u3067\u306e\u4fe1\u983c\u6027\u306e\u5411\u4e0a\"", "\"Ubuntu\u306eOverlayFS\u30d1\u30c3\u30c1\u306e\u6b20\u9665\uff1a\u60aa\u610f\u306e\u3042\u308b\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30b9\u30b1\u30ec\u30fc\u30b7\u30e7\u30f3\"", "\"Spring Java\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u56de\u907f\u306e\u53ef\u80fd\u6027\uff1aWebFlux\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u554f\u984c\""]}