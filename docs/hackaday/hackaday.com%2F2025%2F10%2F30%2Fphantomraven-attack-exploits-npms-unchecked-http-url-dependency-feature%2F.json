{"pubDate": "2025-10-31T02:00:07", "original_title": "PhantomRaven Attack Exploits NPM\u2019s Unchecked HTTP URL Dependency Feature", "link": "https://hackaday.com/2025/10/30/phantomraven-attack-exploits-npms-unchecked-http-url-dependency-feature/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/3782_Common_Raven_in_flight.jpg", "original_content": "An example of RDD in a packages dependencies list. Its not even counted as a real dependency. (Credit: Koi.ai)\nHaving another security threat emanating from Node.js Node Package Manager (NPM) feels like a weekly event at this point, but this newly discovered one is among the more refined. It exploits not only the remote dynamic dependencies (RDD) feature in NPM, but also uses the increased occurrence of LLM-generated non-existent package names to its advantage. Called slopsquatting, its only the first step in this attack that the researchers over at [Koi] stumbled over by accident.\nCalling it the PhantomRaven attack for that cool vibe, they found that it had started in August of 2025, with some malicious packages detected and removed by NPM, but eighty subsequent packages evaded detection. A property of these packages is that in their dependencies list they use RDD to download malicious code from a HTTP URL. It was this traffic to the same HTTP domain that tipped off the researchers.\nFor some incomprehensible reason, allowing these HTTP URLs as package dependency is an integral part of the RDD feature. Since the malicious URL is not found in the code itself, it will slip by security scanners, nor is the download cached, giving the attackers significantly more control. This fake dependency is run automatically, without user interaction or notification that it has now begun to scan the filesystem for credentials and anything else of use.\nThe names of the fake packages were also chosen specifically to match incomplete package names that an LLM might spit out, such as unused-import instead of the full package name of eslint-plugin-unused-imports as example. This serves to highlight why you should not only strictly validate direct dependencies, but also their dependencies. As for why RDD is even a thing, this is something that NPM will hopefully explain soon.\nTop image: North American Common Raven (Corvus corax principalis) in flight at Muir Beach in Northern California (Credit: Copetersen, Wikimedia)", "title": "Node.js\u306e\u65b0\u305f\u306a\u8105\u5a01\uff1a\u30b9\u30ed\u30c3\u30d7\u30b9\u30b3\u30c3\u30c6\u30a3\u30f3\u30b0\u653b\u6483\u3068\u306f\uff1f", "body": "NPM\u306e\u8106\u5f31\u6027\u300cPhantomRaven\u653b\u6483\u300d\u304c\u767a\u898b\u3055\u308c\u3001\u60aa\u610f\u3042\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30ea\u30e2\u30fc\u30c8\u4f9d\u5b58\u95a2\u4fc2\u3092\u5229\u7528\u3002", "titles": ["Node.js\u306e\u65b0\u305f\u306a\u8105\u5a01\uff1a\u30b9\u30ed\u30c3\u30d7\u30b9\u30b3\u30c3\u30c6\u30a3\u30f3\u30b0\u653b\u6483\u3068\u306f\uff1f", "RDD\u6a5f\u80fd\u3092\u60aa\u7528\u3057\u305f\u30d5\u30a1\u30f3\u30c8\u30e0\u30ec\u30a4\u30f4\u30f3\u653b\u6483\u306e\u5b9f\u614b", "NPM\u3067\u767a\u898b\u3055\u308c\u305f\u60aa\u610f\u3042\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8105\u5a01", "\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u306e\u843d\u3068\u3057\u7a74\uff1a\u60aa\u8cea\u30b3\u30fc\u30c9\u304c\u5fcd\u3073\u5bc4\u308b", "LLM\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e\u5371\u967a\u6027\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56\u306e\u91cd\u8981\u6027"]}