{"pubDate": "2024-10-08T15:30:00", "original_title": "Running Game Boy Games On STM32 MCUs is Peanuts", "link": "https://hackaday.com/2024/10/08/running-game-boy-games-on-stm32-mcus-is-peanuts/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/10/stm32boy_tetris.png", "original_content": "Using a STM32F429 Discovery board\u00a0[Jan Zwiener] put together a Game Boy-compatible system called STM32Boy. It is based around the Peanut-GB Game Boy emulator core, which is a pretty nifty and fast single-header GB emulator library in C99. Considering that the average 32-bit MCU these days is significantly faster than the ~4 MHz\u00a0 8-bit Sharp SM83 (Intel 8080/Zilog Z80 hybrid) in the original Game Boy its probably no surprise that the STM32F429 (up to 180 MHz) can emulate this 8-bit SoC just fine.\nSince Peanut-GB is a library, the developer using it is expected to provide their own routines to read and write RAM and ROM and to handle errors. Optional are the line drawing, audio read/write and serial Tx/Rx functions, with the library providing reset and a host of other utility functions. Audio functionality is provided externally, such as using the provided MiniGB APU. Although fast, it comes with a range of caveats that limit compatibility and accuracy.\nFor STM32Boy, [Jan] uses the LCD screen thats on the STM32 development board to render the screen on, along with a Game Boy skin. The LCDs touch feature is then used for the controls, as can be elucidated from the main source file. Of note is that the target GB ROM is directly compiled into the firmware image rather than provided via an external SD card. This involves using the xxd tool to create a hex version of the ROM image that can be included. Not a bad way to get a PoC up and running, but we imagine that if you want to create a more usable GB-like system it should at least be able to play more than one game without having to reflash the MCU.", "title": "STM32Boy: STM32F429 Discovery \u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u305fGame Boy\u4e92\u63db\u30b7\u30b9\u30c6\u30e0", "body": "STM32Boy\u306f\u3001STM32F429 Discovery\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3055\u308c\u305fGame Boy\u4e92\u63db\u30b7\u30b9\u30c6\u30e0\u3067\u3059\u3002Peanut-GB\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u30b3\u30a2\u306b\u57fa\u3065\u3044\u3066\u304a\u308a\u3001\u9ad8\u901f\u3067\u512a\u308c\u305f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6301\u3061\u307e\u3059\u304c\u3001\u4e92\u63db\u6027\u3084\u7cbe\u5ea6\u306b\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002ROM\u306fSD\u30ab\u30fc\u30c9\u3067\u306f\u306a\u304f\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u30a4\u30e1\u30fc\u30b8\u306b\u76f4\u63a5\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u30011\u3064\u306e\u30b2\u30fc\u30e0\u3092\u518d\u8d77\u52d5\u305b\u305a\u306b\u518d\u751f\u3067\u304d\u308b\u3088\u3046\u6539\u5584\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002", "titles": ["STM32Boy: STM32F429 Discovery \u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u305fGame Boy\u4e92\u63db\u30b7\u30b9\u30c6\u30e0", "Peanut-GB\u30b3\u30a2: STM32F429 Discovery \u30dc\u30fc\u30c9\u3067\u306e\u5229\u7528", "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3: STM32F429 Discovery \u30dc\u30fc\u30c9\u3067\u306e8-bit SoC\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3", "STM32Boy: LCD\u753b\u9762\u3092\u6d3b\u7528\u3057\u305fGame Boy\u98a8\u30b7\u30b9\u30c6\u30e0", "\u30b2\u30fc\u30e0\u958b\u767a: STM32Boy\u306e\u305f\u3081\u306eGB ROM\u30a4\u30e1\u30fc\u30b8\u306e\u7d44\u307f\u8fbc\u307f\u3068\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb"]}