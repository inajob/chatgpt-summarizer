{"pubDate": "2024-06-08T02:00:53", "original_title": "Make Your Code Slower With Multithreading", "link": "https://hackaday.com/2024/06/07/make-your-code-slower-with-multithreading/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/06/DALL-E-abstract-multithreading.png", "original_content": "With the performance of modern CPU cores plateauing recently, the main performance gains are with multiple cores and multithreaded applications. Typically, a fast GPU is only so mind-bogglingly quick because thousands of cores operate in parallel on the same set of tasks. So, it would seem prudent for our applications to try to code in a multithreaded fashion to take advantage of this parallelism. Or so it would seem, but as [Marc Brooker] illustrates, its not as simple as one would assume, and its very easy to end up with far worse overall performance and no easy way to fix it.\n[Marc] was rerunning an old experiment to calculate the expected number of birthdays in a shared group of people using brute force. The experiment was essentially a tight loop running a pseudorandom number generator, the standard libc rand() function. [Marc] profiled the code for single-thread and multithreaded versions and noted the runtime dramatically increased beyond two threads. Something fishy was going on. Running perf, [Marc] noted that there were significant L1 cache misses, but the real killer for performance was the increase in expensive context switches.\u00a0 Perf indicated that for four threads, the was an overhead of nearly 50% servicing spin locks. There were no locks in the code, so after more perf magic, the syscalls taking all the time were identified.\u00a0 Something in there was using a futex (or fast userspace mutex) a whole lot.\n\nAfter delving into the glibc source code, a comment said it all:\n/* POSIX.1c requires that there is mutual exclusion for the `rand' and\n`srand' functions to prevent concurrent calls from modifying common\ndata.  */\n__libc_lock_lock (lock);\n (void) __random_r (unsafe_state, retval);\n __libc_lock_unlock (lock);\nBy replacing the call to rand() with random_r(), the programs performance with four threads improved dramatically. The runtime was reduced to a theoretical quarter of the single-thread version. As Marc summarizes, multi-threaded programming is not always as straightforward as one might think. While performance can be significantly worse in some cases, improvements are possible. However, this is not guaranteed to be the case in every situation.\nThe art of debugging and profiling code is complex, so heres how to use Valgrind to look for problems you might not even know about. Even the humble Linux pipe needs to be thought out to get decent performance. What a surprise!", "title": "\u73fe\u4ee3\u306eCPU\u30b3\u30a2\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u3068\u30de\u30eb\u30c1\u30b3\u30a2\u306e\u6d3b\u7528", "body": "\u73fe\u4ee3\u306eCPU\u30b3\u30a2\u306e\u6027\u80fd\u304c\u6700\u8fd1\u505c\u6ede\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u8907\u6570\u306e\u30b3\u30a2\u304a\u3088\u3073\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4e3b\u306a\u6027\u80fd\u5411\u4e0a\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3002GPU\u306e\u9ad8\u901f\u52d5\u4f5c\u306f\u3001\u81a8\u5927\u306a\u6570\u306e\u30b3\u30a2\u304c\u540c\u3058\u30bf\u30b9\u30af\u306e\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u4e00\u898b\u7c21\u5358\u306b\u898b\u3048\u308b\u304c\u3001\u5b9f\u969b\u306b\u306f\u8907\u96d1\u306a\u8ab2\u984c\u304c\u3042\u308b\u3002", "titles": ["\u73fe\u4ee3\u306eCPU\u30b3\u30a2\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u3068\u30de\u30eb\u30c1\u30b3\u30a2\u306e\u6d3b\u7528", "\u591a\u304f\u306e\u30b3\u30a2\u304c\u540c\u6642\u306b\u6f14\u7b97\u3059\u308bGPU\u306e\u9a5a\u7570\u7684\u306a\u901f\u3055", "\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u96e3\u3057\u3055\u3068\u6ce8\u610f\u70b9", "\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3067\u898b\u3064\u304b\u3063\u305f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30b9\u30a4\u30c3\u30c1\u306e\u554f\u984c", "Valgrind\u3092\u4f7f\u3063\u305f\u30c7\u30d0\u30c3\u30b0\u3068\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306e\u6280\u6cd5"]}