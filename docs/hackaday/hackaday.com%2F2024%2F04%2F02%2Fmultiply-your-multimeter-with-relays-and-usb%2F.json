{"pubDate": "2024-04-02T15:30:25", "original_title": "Multiply Your Multimeter with Relays and USB", "link": "https://hackaday.com/2024/04/02/multiply-your-multimeter-with-relays-and-usb/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/03/relay_mux.png", "original_content": "Multimeters are a bit like potato chips: you cant have just one. But theyre a lot more expensive than potato chips, especially the good ones, and while its tempting to just go get another one when you need to make multiple measurements, sometimes its not practical. Thats why something like this 24 relay-based multiplexer might be a handy addition to your bench\nIn this age of electronics plenty, youd think that a simple USB relay board would be easy enough to lay hands on. But [Petteri Aimonen] had enough trouble finding a decent one that it became easier to just roll one up from scratch. His goal was to switch both the positive and negative test leads from up to four instruments to a common set of outputs, and to have two independent switching banks, for those times when four-lead measurements are needed. The choice of relay was important; [Petteri] settled on a Panasonic DPDT signal relay with low wetting current contacts and a low-current coil. The coils are driven by a TBD62783A 8-channel driver chip, while an STM32 takes care of USB duties.\nThe mechanical design of this multiplexer is just as slick as the electrical. [Petteri] designed the PCB to act as the cover for a standard Hammond project box, so all the traces and SMD components are mounted on the back. That just leaves the forest of banana-plug binding posts on the front, along with a couple of pushbuttons for manual input switching and nicely silkscreened labels. The multiplexer is controlled over USB using the SCPI protocol, which happily includes an instrument class for signal switchers.\nWe think the fit and finish on this one is fantastic, as is usual with one of [Petteri]s builds. Youll probably recall his calibrated current reference or his snazzy differential probe.", "title": "24\u30ea\u30ec\u30fc\u3092\u4f7f\u3063\u305f\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u30fc\u306e\u81ea\u4f5c\u65b9\u6cd5", "body": "\u30de\u30eb\u30c1\u30e1\u30fc\u30bf\u30fc\u306f\u30dd\u30c6\u30c8\u30c1\u30c3\u30d7\u30b9\u306e\u3088\u3046\u3067\u30011\u3064\u3067\u306f\u6e08\u307e\u306a\u3044\u3002\u3057\u304b\u3057\u3001\u5c02\u9580\u5bb6\u5411\u3051\u306e\u30de\u30eb\u30c1\u30e1\u30fc\u30bf\u30fc\u306f\u9ad8\u4fa1\u3060\u3002\u305d\u306e\u305f\u3081\u300124\u30ea\u30ec\u30fc\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u30fc\u304c\u4fbf\u5229\u3002\u4f4e\u96fb\u6d41\u30ea\u30ec\u30fc\u3068USB\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u53ef\u80fd\u3002", "titles": ["24\u30ea\u30ec\u30fc\u3092\u4f7f\u3063\u305f\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u30fc\u306e\u81ea\u4f5c\u65b9\u6cd5", "USB\u30ea\u30ec\u30fc\u30dc\u30fc\u30c9\u306e\u4f5c\u6210\u624b\u9806", "STM32\u30de\u30a4\u30b3\u30f3\u3092\u7528\u3044\u305f\u96fb\u5b50\u5de5\u4f5c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u8a2d\u8a08\u3068\u6a5f\u68b0\u8a2d\u8a08\u306e\u878d\u5408\uff1a\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u30fc\u306e\u5b8c\u6210\u54c1", "SCPI\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u7528\u3057\u305fUSB\u5236\u5fa1\u306e\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5\u30fc"]}