{"pubDate": "2024-09-27T05:00:00", "original_title": "Stretch Goal: 300X Arduino", "link": "https://hackaday.com/2024/09/26/stretch-goal-300x-arduino/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/09/flex.png", "original_content": "The Faboratory at Yale University has set a number of stretch goals. We dont mean that in the usual sense. Theyve been making, as you can see in the video below, clones of commercial devices that can stretch over 300%. Theyve done Ardunios and similar controllers along with sensors. The idea is to put computer circuits in flexible robots and other places where flexibility is key, like wearable electronics.\nIf you are interested in details, youll want to read the paper in Science Robotics. They take the existing PCB layout and use a laser to cut patterns in a paper mask over the stretchable substrate. They then apply oxidized gallium-indium to build conductors.\n\nWe arent sure what we want with a stretchable Arduino, but we are sure someone wants them. We also wonder how much stretching these devices will survive before something happens. In the video, some of the motion looked pretty violent! There are also pictures of the circuits twisting in strange ways, too.\nThe starfish-like robot shows the controlling Arduino bucking like a faux cowboy on a mechanical horse. On the other hand, a full-sized Arduino wouldnt have been practical. However, you might consider using tiny circuits, which are certainly possible these days.\nWant to build your own? You are in luck, as the Faboratory has instructions and details on GitHub about how you can make your own flex circuit. Perhaps we will see a flexible SAO badge at Supercon this year? Youd think these were totally unique, but there have been many attempts at making stretchy circuits, including some other DIY guides for different techniques.\n", "title": "Yale\u5927\u5b66Faboratory\u306e\u67d4\u8edf\u306aArduino\u3068\u67d4\u8edf\u306a\u30ed\u30dc\u30c3\u30c8", "body": "\u30a4\u30a8\u30fc\u30eb\u5927\u5b66\u306eFaboratory\u306f\u3001\u5546\u7528\u30c7\u30d0\u30a4\u30b9\u306e\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u3001\u67d4\u8edf\u30ed\u30dc\u30c3\u30c8\u3084\u30a6\u30a7\u30a2\u30e9\u30d6\u30eb\u30a8\u30ec\u30af\u30c8\u30ed\u30cb\u30af\u30b9\u306b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u56de\u8def\u3092\u914d\u7f6e\u3059\u308b\u8a66\u307f\u3092\u884c\u3063\u3066\u3044\u308b\u3002\u8a73\u7d30\u306fScience Robotics\u306e\u8ad6\u6587\u3067\u78ba\u8a8d\u53ef\u80fd\u3002GitHub\u3067\u81ea\u4f5c\u306e\u624b\u9806\u3092\u63d0\u4f9b\u3002", "titles": ["Yale\u5927\u5b66Faboratory\u306e\u67d4\u8edf\u306aArduino\u3068\u67d4\u8edf\u306a\u30ed\u30dc\u30c3\u30c8", "\u30b9\u30c8\u30ec\u30c3\u30c1\u53ef\u80fd\u306a\u30b5\u30fc\u30ad\u30c3\u30c8\u3067\u67d4\u8edf\u306a\u30c7\u30d0\u30a4\u30b9\u3092\u4f5c\u308b", "Wearable Electronics\u306b\u9069\u3057\u305f\u67d4\u8edf\u306aArduino\u306e\u4f5c\u88fd\u65b9\u6cd5", "\u67d4\u8edf\u6027\u304c\u91cd\u8981\u306a\u30ed\u30dc\u30c3\u30c8\u306b\u5185\u8535\u3067\u304d\u308b\u30b9\u30c8\u30ec\u30c3\u30c1\u53ef\u80fd\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u56de\u8def", "GitHub\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u67d4\u8edf\u306a\u56de\u8def\u306eDIY\u30ac\u30a4\u30c9"]}