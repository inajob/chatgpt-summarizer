{"pubDate": "2025-05-02T14:00:53", "original_title": "This Week in Security: AirBorne, EvilNotify, and Revoked RDP", "link": "https://hackaday.com/2025/05/02/this-week-in-security-airborne-evilnotify-and-revoked-rdp/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "This week, Oligo has announced the AirBorne series of vulnerabilities in the Apple Airdrop protocol and SDK. This is a particularly serious set of issues, and notably affects MacOS desktops and laptops, the iOS and iPadOS mobile devices, and many IoT devices that use the Apple SDK to provide AirPlay support. Its a group of 16 CVEs based on 23 total reported issues, with the ramifications ranging from an authentication bypass, to local file reads, all the way to Remote Code Execution (RCE).\nAirPlay is a WiFi based peer-to-peer protocol, used to share or stream media between devices. It uses port 7000, and a custom protocol that has elements of both HTTP and RTSP. This scheme makes heavy use of property lists (plists) for transferring serialized information. And as we well know, serialization and data parsing interfaces are great places to look for vulnerabilities. Oligo provides an example, where a plist is expected to contain a dictionary object, but was actually constructed with a simple string. De-serializing that plist results in a malformed dictionary, and attempting to access it will crash the process.\nAnother demo is using AirPlay to achieve an arbitrary memory write against a MacOS device. Because its such a powerful primative, this can be used for zero-click exploitation, though the actual demo uses the music app, and launches with a user click. Prior to the patch, this affected any MacOS device with AirPlay enabled, and set to either Anyone on the same network or Everyone. Because of the zero-click nature, this could be made into a wormable exploit.\n\nApple has released updates for their products for all of the CVEs, but whats going to really take a long time to clean up is the IoT devices that were build with the vulnerable SDK. Its likely that many of those devices will never receive updates.\nEvilNotify\nIts apparently the week for Apple exploits, because heres another one, this time from [Guilherme Rambo]. Apple has built multiple systems for doing Inter Process Communications (IPC), but the simplest is the Darwin Notification API. Its part of the shared code that runs on all of Apples OSs, and this IPC has some quirks. Namely, theres no verification system, and no restrictions on which processes can send or receive messages.\nThat led our researcher to ask what you may be asking: does this lack of authentication allow for any security violations? Among many novel notifications this technique can spoof, theres one thats particularly problematic: The device restore in progress. This locks the device, leaving only a reboot option. Annoying, but not a permanent problem.\nThe really nasty version of this trick is to put the code triggering a restore in progress message inside an apps widget extension. iOS loads those automatically at boot, making for an infuriating bootloop. [Guilherme] reported the problem to Apple, made a very nice $17,500 in the progress. The fix from Apple is a welcome surprise, in that they added an authorization mechanism for sensitive notification endpoints. Its very likely that there are other ways that this technique could have been abused, so the more comprehensive fix was the way to go.\nJenkins\nContinuous Integration is one of the most powerful tools a software project can use to stay on top of code quality. Unfortunately as those CI toolchains get more complicated, they are more likely to be vulnerable, as [John Stawinski] from Praetorian has discovered. This attack chain would target the Node.js repository at Github via an outside pull request, and ends with code execution on the Jenkins host machines.\nThe trick to pulling this off is to spoof the timestamp on a Pull Request. The Node.js CI uses PR labels to control what CI will do with the incoming request. Tooling automatically adds the needs-ci label depending on what files are modified. A maintainer reviews the PR, and approves the CI run. A Jenkins runner will pick up the job, compare that the Git timestamp predated the maintainers approval, and then runs the CI job. Git timestamps are trivial to spoof, so its possible to load an additional commit to the target PR with a commit timestamp in the past. The runner doesnt catch the deception, and runs the now-malicious code.\n[John] reported the findings, and Node.js maintainers jumped into action right away. The primary fix was to do SHA sum comparisons to validate Jenkins runs, rather than just relying on timestamp. Out of an abundance of caution, the Jenkins runners were re-imaged, and then [John] was invited to try to recreate the exploit. The Node.js blog post has some additional thoughts on this exploit, like pointing out that its a Time-of-Check-Time-of-Use (TOCTOU) exploit. We dont normally think of TOCTOU bugs where a human is the check part of the equation.\n2024 in 0-days\nGoogle has published an overview of the 75 zero-day vulnerabilities that were exploited in 2024. Thats down from the 98 vulnerabilities exploited in 2023, but the Threat Intelligence Group behind this report are of the opinion that were still on an upward trend for zero-day exploitation. Some platforms like mobile and web browsers have seen drastic improvements in zero-day prevention, while enterprise targets are on the rise. The real stand-out is the targeting of security appliances and other network devices, at more than 60% of the vulnerabilities tracked.\nWhen it comes to the attackers behind exploitation, its a mix between state-sponsored attacks, legal commercial surveillance, and financially motivated attacks. It will be interesting to see how 2025 stacks up in comparison. But one thing is for certain: Zero-days arent going away any time soon.\nPerplexing Passwords for RDP\nThe world of computer security just got an interesting surprise, as Microsoft declared it not-a-bug that Windows machines will continue to accept revoked credentials for Remote Desktop Protocol (RDP) logins. [Daniel Wade] discovered the issue and reported it to Microsoft, and then after being told it wasnt a security vulnerability, shared his report with Ars Technica.\nSo what exactly is happening here? Its the case of a Windows machine login via Azure or a Microsoft account. That account is used to enable RDP, and the machine caches the username and password so logins work even when the computer is offline. The problem really comes in how those cached passwords get evicted from the cache. When it comes to RDP logins, it seems they are simply never removed.\nThere is a stark disconnect between what [Wade] has observed, and what Microsoft has to say about it. Its long been known that Windows machines will cache passwords, but that cache will get updated the next time the machine logs in to the domain controller. This is what Microsofts responses seem to be referencing. The actual report is that in the case of RDP, the cached passwords will never expire, regardless of changing that password in the cloud and logging on to the machine repeatedly.\nBits and Bytes\nSamsung makes a digital signage line, powered by the MagicINFO server application. That server has an unauthenticated endpoint, accepting file uploads with insufficient filename sanitization. That combination leads to arbitrary pre-auth code execution. While thats not great, what makes this a real problem is that the report was first sent to Samsung in January, no response was ever received, and it seems that no fixes have officially been published.\nA series of Viasat modems have a buffer overflow in their SNORE web interface. This leads to unauthenticated, arbitrary code execution on the system, from either the LAN or OTA interface, but thankfully not from the public Internet itself. This one is interesting in that it was found via static code analysis.\nIPv6 is the answer to all of our IPv4 induced woes, right? It has Stateless Address Autoconfiguration (SLAAC) to handle IP addressing without DHCP, and Router Advertisement (RA) to discover how to route packets. And now, taking advantage of that great functionality is Spellbinder, a malicious tool to pull off SLACC attacks and do DNS poisoning. Its not entirely new, as weve seen Man in the Middle attacks on IPv4 networks for years. IPv6 just makes it so much easier."}