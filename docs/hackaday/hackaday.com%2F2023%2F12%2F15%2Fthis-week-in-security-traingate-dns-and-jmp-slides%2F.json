{"pubDate": "2023-12-15T15:20:45", "original_title": "This Week in Security: Traingate, DNS, and JMP Slides", "link": "https://hackaday.com/2023/12/15/this-week-in-security-traingate-dns-and-jmp-slides/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Remember Dieselgate, the scandal where certain diesel vehicles would detect an emissions test, and run cleaner for it, cheating the test? Traingate may just put that one into perspective. Well tell the story from the beginning, but buckle up for a wild and astonishing ride. It all starts with Polish trains getting a maintenance overhaul. These trains were built by Newag, who bid on the maintenance contract, but the contract was won by another company, SPS. This sort of overhaul involves breaking each train into its components, inspecting, lubricating, etc, and putting it all back together again. The first train went through this process, was fully reassembled, and then refused to move. After exhausting all of the conventional troubleshooting measures, SPS brought in the hackers.\n\nDragon Sector is a Polish research group, who gained some worldwide attention for work on Toshiba laptop BIOS security. And it turns out that these were the perfect group for the job. From cobbling together hardware to improving Ghidras support for Infineon TriCore architecture, there was a lot of work done to even get a toehold into the trains systems. But finally they could do memory dumps, and compare the broken train with working ones. There was a set of configuration flags that seemed to hold the key. But this particular train was badly needed in service. So Newag, the original manufacturer, was finally contacted to complete the maintenance and get the train running again. Hackers are nothing, however, if not persistent. After pulling an all-nighter, and with literal minutes to spare, Dragon Sector was able to overwrite the memory of the broken train with a valid configuration, and it once again came to life.\nSo far, nothing here seems suspicious. Startup checks after maintenance could easily go awry, leading to this sort of situation. But Dragon Sector kept digging, refining their tools, and teasing more secrets out of the train firmware. And what they found was astonishing. Up first was GPS coordinates, corresponding to every train yard in Poland capable of doing this sort of maintenance overhaul. If a train was parked inside any maintenance yard but Newags for over 10 days, the flag would trigger and the train would be disabled. Its hard to see that feature as anything but a blatant attempt to brick any train that didnt come back to Newag for maintenance. But wait, theres more.\nReplacing certain components would lead to similar breakage, until an undocumented cheat code was tapped in to the main computer console on the train. In another case, a train would break after hitting a million kilometers. Yet another train was scheduled to break down with a bad compressor on a given date  and a programming error delayed that breakdown until a year later. All told, Dragon Sector looked at 29 trains across Poland, and found these wonderful little surprises in 24 of them. Through Polands CERT Polska, law enforcement agencies have been notified about this case.\nIn response, Newag has accused Dragon Sector of slander and computer crimes, as well as being threats to railway safety. All we can say is that we hope a thorough investigation will establish the truth of the case, and hold the true criminals to account.\nIts Always DNS\nEver wondered how a DNS server gets updates about DNS names? It turns out there are a couple ways. One is for clients to send updates directly, advertising their DNS name and IP address. DNS Dynamic updates are supported in multiple DNS servers, including Active Directory (AD), and in pretty much every implementation this has a reasonable security implementation. On the other hand, there is also DNS updates sent as part of a DHCP request. And those have problems.\nThis write-up is very Active Directory focused, but it wouldnt surprise us to find a similar problem in other DHCP servers. Namely, the DNS update isnt authenticated. Any device that is given an IP address can request a DNS name at the same time. The way this works in a Microsoft server environment is the DNS service uses its own credentials to forward the DNS update to the DNS server. If those are two separate servers, and the name is already registered directly by another host, the update will fail. But an unclaimed name, or even the DHCP servers name itself are up for grabs. And in the case of the DNS and DHCP services running on the same server, pretty much any DNS name is in play. And in an AD environment, that allows for all sorts of further attacks on authentication.\nThese issues have been reported to Microsoft, who consider them to be known issues, not quite worthy of a security fix. They are worth knowing about when building an AD network. To help keep us out of trouble, Akamai has written Invoke-DHCPCheckup as a powershell tool to check for issues.\nDo the JMP Slide\nTheres a technique used when writing exploits, the NOP slide. Its a series of No Operation commands followed by the target shellcode. The idea is that a vulnerability will jump somewhere into this attacker-controlled memory area, but the exact destination can vary. This is used so often that blocks of 0x90 in data is one of the tells that it may be malicious. there is a problem with the NOP slide, in that it can take longer than you want to make it through all the NOP instructions to get to the juicy shellcode. And thats where the JMP slide comes into play.\nThe basis is that we know how many bytes are left in the slide, so we can use JMP instructions to go right to the payload. Thats great, except for alignment. Namely, the x86 machine code freely mixes instructions and arguments. If you dont know exactly where instruction will land in your buffer, how do you know if youre about to execute a jmp, or execute the offset as an instruction? There are a couple obvious ways to approach this, like using 0x90 values as argument to JMP, followed by a much smaller NOP slide zone to catch the JMP.\nThat one is a bit of a challenge, too, because the JMP command is based on offsets that can be positive or negative, and 0x90 happens to be a negative offset. That can work, but the entire shellcode payload has to be constructed backwards to manage it. There is one other option, the conditional jump JCC opcodes. These are 0x70-0x7F in machine code, which manages to be positive offsets. The only problem there is that these jumps are conditional upon a register value, which is unknown. The final solution is to use the Jump if Greater opcode twice, followed by the Jump if Less or Equal opcode twice. Both are positive offsets, and both make steady progress though the JMP slide to eventually land in a small NOP slide to finally run shellcode. Clever!\nBits and Bytes\nAfter getting fired, it may be tempting to burn your bridges on the way out. If that includes wiping code repositories, deleting log files, taking home proprietary code, stealing a work laptop, and impersonating colleagues maybe dont. A software engineer from First Republic Bank just couldnt resist the temptation, and will serve two years in prison, three years of probation, and pay $529,000 in restitution for damages. Definitely not worth it.\nAnd for a stark reminder why not everything needs to be connected to the network or Internet, see the fallout from a cyberattack on Kyivstar in Ukraine. This phone and Internet provider was taken down on Tuesday, in what appears to be a devastating data wiping attack. Banks and stores are closed due to payment processing being down, and at least one city had to manually disconnect their street lights from the power grid, because the software controller was disabled as a byproduct of the attack. Maybe the old mechanical timers were better after all.", "title": "\u30dd\u30fc\u30e9\u30f3\u30c9\u306e\u5217\u8eca\u306b\u304a\u3051\u308b\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u30aa\u30fc\u30d0\u30fc\u30db\u30fc\u30eb\u3068\u30cf\u30c3\u30ad\u30f3\u30b0\u306e\u8b0e", "body": "\u30dd\u30fc\u30e9\u30f3\u30c9\u306e\u5217\u8eca\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u4e2d\u306b\u30cf\u30c3\u30ab\u30fc\u304c\u898b\u3064\u304b\u308a\u3001\u7591\u60d1\u306e\u8a2d\u5b9a\u304c\u767a\u899a\u3002\u60aa\u610f\u306e\u3042\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3084\u30c1\u30fc\u30c8\u30b3\u30fc\u30c9\u304c\u4f7f\u7528\u3055\u308c\u3001\u554f\u984c\u304c\u751f\u3058\u308b\u3002\u307e\u305f\u3001DHCP\u30b5\u30fc\u30d0\u30fc\u306eDNS\u66f4\u65b0\u306b\u306f\u8a8d\u8a3c\u306e\u554f\u984c\u304c\u3042\u308a\u3001\u653b\u6483\u306b\u3064\u306a\u304c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u3002\u6700\u5f8c\u306b\u3001\u5143\u9280\u884c\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u4e0d\u6b63\u884c\u70ba\u306b\u3088\u3063\u3066\u902e\u6355\u3055\u308c\u305f\u3002\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u3059\u3079\u3066\u3092\u63a5\u7d9a\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3053\u3068\u306e\u8a3c\u660e\u3082\u3002", "titles": ["\u30dd\u30fc\u30e9\u30f3\u30c9\u306e\u5217\u8eca\u306b\u304a\u3051\u308b\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u30aa\u30fc\u30d0\u30fc\u30db\u30fc\u30eb\u3068\u30cf\u30c3\u30ad\u30f3\u30b0\u306e\u8b0e", "DNS\u30b5\u30fc\u30d0\u30fc\u306e\u4e0d\u6b63\u306a\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8106\u5f31\u6027", "\u30a8\u30af\u30b9\u30d7\u30ed\u30a4\u30c8\u306b\u304a\u3051\u308bJMP\u30b9\u30e9\u30a4\u30c9\u6280\u8853\u306e\u89e3\u8aac", "\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u304c\u9000\u8077\u5f8c\u306b\u72af\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u884c\u70ba", "\u30af\u30e9\u30a4\u30d6\u30b9\u30bf\u30fc\u306e\u30b5\u30a4\u30d0\u30fc\u653b\u6483\u304c\u3082\u305f\u3089\u3057\u305f\u6df1\u523b\u306a\u5f71\u97ff"]}