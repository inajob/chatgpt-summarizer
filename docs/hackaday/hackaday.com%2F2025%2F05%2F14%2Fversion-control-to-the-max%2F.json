{"pubDate": "2025-05-14T14:00:02", "original_title": "Version Control to the Max", "link": "https://hackaday.com/2025/05/14/version-control-to-the-max/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2017/05/git01.jpg", "original_content": "There was a time when version control was an exotic idea. Today, things like Git and a handful of other tools allow developers to easily rewind the clock or work on different versions of the same thing with very little effort. Im here to encourage you not only to use version control but also to go even a step further, at least for important projects.\nMy First Job\nThe QDP-100 with  count em  two 8 floppies (from an ad in Byte magazine)\nI remember my first real job back in the early 1980s. We made a particular type of sensor that had a 6805 CPU onboard and, of course, had firmware. We did all the development on physically big CP/M machines with the improbable name of Quasar QDP-100s. No, not that Quasar. Wed generate a hex file, burn an EPROM, test, and eventually, the code would make it out in the field.\nOf course, you always have to make changes. You might send a technician out with a tube full of EPROMs or, in an emergency, wed buy the EPROMs space on a Greyhound bus. Nothing like today.\nI was just getting started, and the guy who wrote the code for those sensors wasnt much older than me. One day, we got a report that something was misbehaving out in the field. I asked him how we knew what version of the code was on the sensor. The blank look I got back worried me.\nSeat of the Pants\nVersion control circa 1981 alongside a 3.5-inch floppy that held much more data\nTurns out, hed burn however many EPROMs were required and then plow forward developing code. We had no idea what code was really running in the field. After we fixed the issue, I asked for and received a new rule. Every time we shipped an EEPROM, it got a version number sticker, and the entire development directory went on an 8 floppy. The floppy got a write-protect tab and went up on the shelf.\nI was young. I realize now that I needed to back those up, too, but it was still better than what we had been doing.\nEnter Meta Version Control\nToday, it would have been easy to label a commit and, later, check it back out. But there is still a latent problem. Your source code is only part of the equation when you are writing code. Theres also your development environment, including the libraries, the compiler, and anything else that can add to or modify your code. How do you version control that? Then theres the operating system, which could interact with your code or development tools too.\nMaybe it is a call back to my 8 floppy days, but I have taken to doing serious development in a virtual machine. It doesnt matter if you use QEMU or VirtualBox or VMWare. Just use it. The reason is simple. When you do a release, you can backup the entire development environment.\nWhen you need to change something five years from now, you might find the debugger no longer runs on your version of the OS. The compiler fixed some bugs that you rely on or added some that you now trip over. But if you are in your comfy five-year-old virtual environment, you wont care. Ive had a number of cases where I wish I had done that because my old DOS software wont run anymore. Switched to Linux? Or NewOS 2100tm? No problem, as long as it can host a virtual machine.\nCant decide on which one to use? [How to Simple] has some thoughts in the video below.\n\nHow About You?\nHow about it? Do you or will you virtualize and save? Do you use containers for this sort of thing? Or do you simply have faith that your version-controlled source code is sufficient? Let us know in the comments.\nIf you think Git is just for software, think again.", "title": "\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306e\u91cd\u8981\u6027\u3068\u9032\u5316", "body": "\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u91cd\u8981\u3067\u3001\u958b\u767a\u74b0\u5883\u3082\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3059\u308b\u3079\u304d\u3002", "titles": ["\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306e\u91cd\u8981\u6027\u3068\u9032\u5316", "1980\u5e74\u4ee3\u306e\u96fb\u5b50\u5de5\u4f5c\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306e\u8ab2\u984c", "\u30e1\u30bf\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306e\u5c0e\u5165\u3068\u305d\u306e\u5229\u70b9", "\u30d0\u30fc\u30c1\u30e3\u30eb\u30de\u30b7\u30f3\u3092\u6d3b\u7528\u3057\u305f\u958b\u767a\u74b0\u5883\u306e\u4fdd\u5b58\u6cd5", "Git\u306e\u53ef\u80fd\u6027\uff1a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u3092\u8d85\u3048\u3066"]}