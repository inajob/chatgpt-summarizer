{"pubDate": "2024-02-12T15:00:49", "original_title": "Hands On: Bus Pirate 5", "link": "https://hackaday.com/2024/02/12/hands-on-bus-pirate-5/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/bp5review_feat.jpg", "original_content": "If youve been involved with electronics and hardware hacking for awhile, theres an excellent chance youve heard of the Bus Pirate. First introduced on the pages of Hackaday back in 2008 by creator Ian Lesnet, the open hardware multi-tool was designed not only as away to easily tap into a wide array of communication protocols, but to provide various functions that would be useful during hardware development or reverse engineering. The Bus Pirate could talk to your I2C and SPI devices, while also being able to measure frequencies, check voltages, program chips, and even function as a logic analyzer or oscilloscope.\nBus Pirate 3, circa 2012\nThe Bus Pirate provided an incredible number of tools at a hobbyist-friendly price, and it wasnt long before the device became so popular that it achieved a milestone which only a few hardware hacking gadgets can boast: its sales started to get undercut by cheap overseas clones. Of course, as an open hardware device, this wasnt really a problem. If other companies wanted to crank out cheap Bus Pirates, thats fine. It freed Ian up to research a next-generation version of the device.\nBut it turns out that was easier said than done. Its around this point that the Bus Pirate enters what might be considered its Duke Nukem Forever phase. It took 15 years to release the sequel to 1996s Duke Nukem 3D because the state-of-the-art in video games kept changing, and the developers didnt want to be behind the curve. Similarly, Ian and his team spent years developing and redeveloping versions of the Bus Pirate that utilized different hardware platforms, such as the STM32 and ICE40 FPGA. But each time, there would be problems sourcing components, or something newer and more interesting would be released.\nBut then in 2021 the Raspberry Pi Pico hit the scene, and soon after, the bare RP2040 chip. Not only were the vast I/O capabilities of the new microcontroller a perfect fit for the Bus Pirate, but the chip was cheap and widely available. Finally, after years of false starts, the Bus Pirate 5 was born.\nI was able to grab one of the first all-new Bus Pirates off the production line in January, and have been spending the last week or so playing around with it. While theres definitely room for improvement on the software side of things, the hardware is extremely promising, and Im very excited to be see how this new chapter in the Bus Pirate story plays out.\n\nUnder the Hood\nWhile the heart of the Bus Pirate 5 is the RP2040, theres still plenty of other hardware along for the ride.\n\nUnder normal circumstances, the RP2040 would have enough I/O for pretty much any task. But since this is a device that is designed to communicate with as many things as possible, the chip actually needed a bit of help in the free pins department. As such, a pair of 74HC595 shift registers are connected to the SPI bus to provide an additional 16 outputs on the board, which are used for internal functions such as controlling the LCD backlight and switching in the 10 k\u03a9 pull-up resistors for the I/O pins.\nSimilarly, a 16-channel CD4067 analog mux is being used to overcome the fact that the RP2040 has only four ADC pins. It might seem odd that a unabashedly digital device like this would need so many analog inputs, but one of the goals for this new version of the Bus Pirate was the ability to measure voltages on each of its eight output pins, unlike the previous incarnations of the device that could only measure voltage on a single dedicated pin.\nEach of the eight I/O pins on the Bus Pirate 5 go through a 74LVC1T45 bidirectional buffer, which allows the 3.3 V pins of the RP2040 to safely communicate with devices from 1.2 V all the way up to 5.5 V. It actually takes two pins from the RP2040 to control each buffer: one is used to configure it as an input or output, and the other is used to read or write from it.\nTheres also a 1 Gbit NAND flash chip attached to the SPI bus which holds the devices JSON configuration files. The volume is presented to the host computer as a USB Mass Storage device, and can also be modified from the Bus Pirate text interface using familiar commands like ls, cd, and cat. This flash storage can also be used to hold log files, firmware dumps, images to be flashed, or in a pinch, an episode or two of the Hackaday Podcast.\nProgrammable Power Supply\nPerhaps one of the most exciting advancements of the Bus Pirate 5 over its predecessors is the programmable power supply. Earlier Bus Pirates had dedicated 3.3 V and 5 V pins that could be turned on and off, but this time theres a single VOUT pin in the connector that can be set to output between ~1 V and 5 V thanks to the use of an adjustable regulator  the exact lower limit depends on whether your production run gets the MCP1824 or AP2127, which can be swapped depending on availability.\n\nWhats more, the PSU offers real-time current measurement as well as a programmable 0 mA  500 mA current limiter thats implemented with only a handful of components thanks to a clever comparator circuit.\nPirating on the Big Screen\nOf course, you dont have to look inside the Bus Pirate 5 to see the most obvious new feature. The ST7789V 240 x 320 IPS LCD is front and center, and acts as a multi-purpose display depending on what the device is doing. Most of the time, it functions as a dynamic label, showing what each pin does given the current mode that the Bus Pirate is in. For example, when you switch to UART mode, youll instantly be able to see which pins have been set to TX and RX.\n<!--[if lt IE 9]>document.createElement('video');<![endif]-->\nhttps://hackaday.com/wp-content/uploads/2024/02/bp5review_display.mp4\nIts hard to overstate how incredibly handy this function is. Anyone who used an earlier Bus Pirate will know the struggle of trying to figure out if you had the right pins hooked up  more often than not youd have to go online and look up the pinout for the connector because it wasnt always obvious what connection did what as you moved between different modes.\nBeyond the pin labels, the screen also shows the voltage and current figures for the programmable power supply, and theres an oscilloscope mode thats in the early phases of development. Combined with the user-programmable button, its going to be exciting to see what the community does with the Bus Pirate 5 screen.\nThere are Four, Eighteen Lights!\nHackers love LEDs. Thats never been disputed by anybody. So its no surprise that the Bus Pirate 5 has LEDs on it, especially since the older models also came equipped with an array of status lights to indicate various conditions the device could be in. But even stillthe eighteen SK6812 RGB LEDs lining the board is going to be seen as excessive to some.\n\nTen of the LEDs are reverse mounted and shine through holes in the PCB to light up the front of the milky translucent case, and the other eight are side-firing variants that provide the sort of underglow effect you might expect from a over-the-top gaming keyboard or a car from one of the Fast  Furious movies.\nFor those that arent looking to turn their workbench into a rave, dont worry. You have complete control over the LEDs on the Bus Pirate 5, with multiple options available for brightness, animation pattern, and colors. Its also possible to simply turn them off entirely. The LED configuration is saved to the non-volatile flash chip, so whatever your choices are, they will persist through power cycles.\nhttps://hackaday.com/wp-content/uploads/2024/02/bp5review_lights.mp4\nPersonally, I think the default LED settings are reasonable enough. I dont find it particularly distracting, and it does give the device a unique look among all the other bits of hardware scattered over the bench. That said, I also appreciate the fact that the user is given the option of either customizing them or simply switching them off, as different people will of course have their own opinions on the matter.\nWhat\u00a0does bother me a bit is that, at least in the current firmware, the LEDs serve no practical purpose. On the Bus Pirate 3, the LEDs were important  for example, you could tell at a glance if it was sending power to a downstream device. This is a feature that could have been expanded on the BP 5, with visually distinct animations indicating the various communications modes, and a flashing alert if the current limiter is triggered.\nConsole Cowboy\nIf youve used an earlier Bus Pirate, youll feel right at home with this latest version. Its serial terminal interface has gotten a refresh, now featuring colors and a very slick persistent status bar at the bottom, but many of the commands remain the same and the workflow of moving through modes and communicating with devices is basically identical. If you havent used a Bus Pirate previously, the interface is fairly straightforward and the built-in help functions will usually get you on the right track.\n\nYou dont need any special software to access the Bus Pirate interface; just open up your favorite serial terminal and point it to the USB device thats created when you plug it in. If youre using a Chrome-based browser you can even connect to it via the Web Serial API.\nAs a precaution, the Bus Pirate starts in High Impedance mode, which disables most of the functions that deal with actually powering and communicating with devices. Youll first have to select the communications mode that corresponds with your target device (UART, SPI, I2C, etc), and from there can turn on the power and start sending commands or performing operations.\nHere you can see a basic example of communicating with an I2C device, in this case, a Bosch BME280 sensor:\n\nAfter selecting I2C mode, you enable the power supply and enter the desired voltage and current limits. You can then run the first macro, which by default performs a brute-force I2C scan. With the returned R/W addresses for the detected device, you can craft your I2C packets. In this example Im sending a request for the register 0xD0 (Chip ID), and reading one byte of data from it (0x58).\nThe Journey Has Only Just Begun\nBus Pirate veterans with a keen eye may have already noticed that there are fewer commands and functions listed in the above screenshots than what theyre used to. Thats because, while the hardware side of things may have been in development for several years at this point, the software is still in its infancy. Updates are being pushed furiously to the firmwares GitHub repository, with an automated nightly build process ensuring users always have access to the latest and greatest code.\nIan has also dropped some interesting hints on where the firmware might be headed now that he can get his head out of hardware mode and dedicate his time to writing code. Theres even been some rumblings about looking into a MicroPython variant of the firmware, which holds some fascinating possibilities. We saw first-hand how powerful the rapid iterative development process made possible by Python on the RP2040 is during last years Hackaday Supercon, with attendees bending the Vectorscope badge to their will in record time. That kind of flexibility on a device like the Bus Pirate 5 is honestly very exciting.\nI made a conscious decision not to call this a review of the Bus Pirate 5, because quite simply, it wouldnt be fair to pass final judgment on a product thats still under active development. Its an extremely promising platform, and is improving on a nearly daily basis, but anyone jumping on the bandwagon this early should be prepared for a few teething issues. That said, I have every confidence that between Ian and the community, the newest member of the Bus Pirate family will become just as indispensable of a hardware hacking tool as its legendary predecessor.", "title": "\u300cBus Pirate 5\u300d\uff1a\u96fb\u5b50\u5de5\u4f5c\u306b\u304a\u3051\u308b\u7a76\u6975\u306e\u30de\u30eb\u30c1\u30c4\u30fc\u30eb\u304c\u767b\u5834", "body": "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30cf\u30c3\u30ad\u30f3\u30b0\u30c7\u30d0\u30a4\u30b9\u300cBus Pirate\u300d\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u300cBus Pirate 5\u300d\u304c\u767b\u5834\u3057\u307e\u3057\u305f\u3002\u65b0\u3057\u3044\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3084LCD\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3092\u642d\u8f09\u3057\u3066\u304a\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u306fLED\u306e\u8a2d\u5b9a\u3082\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f\u307e\u3060\u958b\u767a\u4e2d\u3067\u3059\u304c\u3001\u5c06\u6765\u7684\u306b\u306fMicroPython\u3092\u4f7f\u7528\u3059\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002", "titles": ["\u300cBus Pirate 5\u300d\uff1a\u96fb\u5b50\u5de5\u4f5c\u306b\u304a\u3051\u308b\u7a76\u6975\u306e\u30de\u30eb\u30c1\u30c4\u30fc\u30eb\u304c\u767b\u5834", "\u300c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u958b\u767a\u306e\u65b0\u6642\u4ee3\u300d\uff1aBus Pirate 5\u306e\u9032\u5316\u306b\u3088\u308b\u9769\u65b0\u7684\u306a\u6a5f\u80fd", "\u300cRP2040\u3092\u6d3b\u7528\u3057\u305f\u6b21\u4e16\u4ee3\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u300d\uff1aBus Pirate 5\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30c7\u30b6\u30a4\u30f3\u89e3\u8aac", "\u300c\u30d7\u30ed\u30b0\u30e9\u30de\u30d6\u30eb\u96fb\u6e90\u300d\uff1aBus Pirate 5\u306e\u6700\u65b0\u6a5f\u80fd\u304c\u3082\u305f\u3089\u3059\u53ef\u80fd\u6027", "\u300c\u9769\u65b0\u7684\u306a\u8868\u793a\u6a5f\u80fd\u3068LED\u30e9\u30a4\u30c8\u300d\uff1aBus Pirate 5\u306e\u30d3\u30b8\u30e5\u30a2\u30eb\u4f53\u9a13\u306e\u9032\u5316"]}