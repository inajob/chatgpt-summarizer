{"pubDate": "2024-01-19T16:30:01", "original_title": "Z80 I/O Madness", "link": "https://hackaday.com/2024/01/19/z80-i-o-madness/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/01/z80.png", "youtube": "https://www.youtube.com/watch?v=aB9AuKx8kBU", "original_content": "While the 8080 started the personal computer revolution, the Z80 was quickly a winner because it was easier to use and had more capabilities. [Noel] found out though that the Z80 OUT instruction is a little odd and, in fact, some of the period documentation was incorrect.\nMany CPUs used memory-mapped I/O, but the 8080 and Z80 had dedicated I/O addressing pins and instructions so you could fill up the memory map with actual memory and still have some I/O devices. A quick look in the famous Zaks book on Z80 programming indicates that an instruction like OUT (C),A would write the A register to the output device indicated by the BC register pair (even though the instruction only mentions C. However, [Noel] missed the note about the B register and saw in the Zilog documentation that it did. Since he didnt read the note in the Zaks book until later, he assumed it was a discrepancy. Therefore, he went to the silicon to get the correct answer.\nBreadboarding a little Z80 system allowed him to look at the actual behavior of the instruction. However, he also didnt appreciate the syntax of the assembly language statements. Weve done enough Z80 assembly that none of it struck us as particularly crazy, especially since odd instruction mnemonics were the norm in those days.\nStill, it was interesting to see him work through all the instructions. He then looks at how Amstrad used or abused the instructions to do something even stranger.\nIf you want to breadboard a minimal Z80 system, consider this one. If you enjoy abuse of the Z80 I/O system, you dont want to miss this Z80 hack for protected mode.\n\n", "title": "Z80 OUT\u547d\u4ee4\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306e\u6b63\u3057\u3044\u7406\u89e3\u3092\u5f97\u308b\u65b9\u6cd5\u3068\u306f\uff1f", "body": "8080\u306f\u30d1\u30fc\u30bd\u30ca\u30eb\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u9769\u547d\u3092\u8d77\u3053\u3057\u307e\u3057\u305f\u304c\u3001Z80\u306f\u4f7f\u3044\u3084\u3059\u304f\u3066\u6a5f\u80fd\u3082\u591a\u304f\u3001\u3059\u3050\u306b\u52dd\u5229\u3092\u53ce\u3081\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001Z80\u306eOUT\u547d\u4ee4\u306f\u5c11\u3057\u7279\u6b8a\u3067\u3001\u4e00\u90e8\u306e\u8aac\u660e\u66f8\u306b\u306f\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u3002\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3084\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u77e5\u8b58\u3092\u6d3b\u304b\u3057\u3001Z80\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u3066\u6b63\u3057\u3044\u6319\u52d5\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u69cb\u6587\u3082\u8abf\u67fb\u3057\u307e\u3057\u305f\u3002Amstrad\u304c\u3053\u306e\u547d\u4ee4\u3092\u4f7f\u7528\u3057\u305f\u308a\u4e71\u7528\u3057\u305f\u308a\u3059\u308b\u69d8\u5b50\u3082\u8208\u5473\u6df1\u304b\u3063\u305f\u3067\u3059\u3002", "titles": ["Z80 OUT\u547d\u4ee4\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306e\u6b63\u3057\u3044\u7406\u89e3\u3092\u5f97\u308b\u65b9\u6cd5\u3068\u306f\uff1f", "Z80\u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u30c9I/O\u3068\u306f\u4f55\u3067\u3059\u304b\uff1f", "Z80\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u69cb\u6587\u306b\u3064\u3044\u3066\u306e\u6ce8\u610f\u70b9\u3068\u306f\uff1f", "Amstrad\u304cZ80\u547d\u4ee4\u3092\u4f7f\u7528\u3057\u3066\u884c\u3063\u305f\u5947\u5999\u306a\u64cd\u4f5c\u3068\u306f\uff1f", "\u5b88\u3089\u308c\u305f\u30e2\u30fc\u30c9\u306eZ80\u3092\u5229\u7528\u3057\u305f\u30cf\u30c3\u30af\u306e\u8a73\u7d30\u3068\u306f\uff1f"]}