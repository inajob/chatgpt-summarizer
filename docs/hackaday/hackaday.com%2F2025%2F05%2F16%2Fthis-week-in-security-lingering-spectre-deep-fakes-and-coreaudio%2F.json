{"pubDate": "2025-05-16T14:00:28", "original_title": "This Week in Security: Lingering Spectre, Deep Fakes, and CoreAudio", "link": "https://hackaday.com/2025/05/16/this-week-in-security-lingering-spectre-deep-fakes-and-coreaudio/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Spectre lives. Weve got two separate pieces of research, each finding new processor primitives that allow Spectre-style memory leaks. Before we dive into the details of the new techniques, lets quickly remind ourselves what Spectre is. Modern CPUs use a variety of clever tricks to execute code faster, and one of the stumbling blocks is memory latency. When a program reaches a branch in execution, the program will proceed in one of two possible directions, and its often a value from memory that determines which branch is taken. Rather than wait for the memory to be fetched, modern CPUs will predict which branch execution will take, and speculatively execute the code down that branch. Once the memory is fetched and the branch is properly evaluated, the speculatively executed code is rewound if the guess was wrong, or made authoritative if the guess was correct. Spectre is the realization that incorrect branch prediction can change the contents of the CPU cache, and those changes can be detected through cache timing measurements. The end result is that arbitrary system memory can be leaked from a low privileged or even sandboxed user process.\nIn response to Spectre, OS developers and CPU designers have added domain isolation protections, that prevent branch prediction poisoning in an attack process from affecting the branch prediction in the kernel or another process. Training Solo is the clever idea from VUSec that branch prediction poisoning could just be done from within the kernel space, and avoid any domain switching at all. That can be done through cBPF, the classic Berkeley Packet Filter (BPF) kernel VM. By default, all users on a Linux system can run cBPF code, throwing the doors back open for Spectre shenanigans. Theres also an address collision attack where an unrelated branch can be used to train a target branch. Researchers also discovered a pair of CVEs in Intels CPUs, where prediction training was broken in specific cases, allowing for a wild 17 kB/sec memory leak.\n\nAlso revealed this week is the Branch Privilege Injection research from COMSEC. This is the realization that Intel Branch Prediction happens asynchronously, and in certain cases there is a race condition between the updates to the prediction engine, and the code being predicted. In short, user-mode branch prediction training can be used to poison kernel-mode prediction, due to the race condition.\n(Editors note: Video seems down for the moment. Hopefully YouTube will get it cleared again soon. Something, something hackers.)\n\nBoth of these Spectre attacks have been patched by Intel with microcode, and the Linux kernel has integrated patches for the Training Solo issue. Training Solo may also impact some ARM processors, and ARM has issued guidance on the vulnerability. The real downside is that each fix seems to come with yet another performance hit.\nIs That Real Cash? And What Does That Even Mean?\nOver at the Something From Nothing blog, we have a surprisingly deep topic, in a teardown of banknote validators. For the younger in the audience, there was a time in years gone by where not every vending machine had a credit card reader built-in, and the only option was to carefully straighten a bill and feed it into the bill slot on the machine. Bow how do those machines know its really a bill, and not just the right sized piece of paper?\nAnd thats where this gets interesting. Modern currency has multiple security features in a single bill, like magnetic ink, micro printing, holograms, watermarks, and more. But how does a bill validator check for all those things? Mainly LEDs and photodetectors, it seems. With some machines including hall effect sensors, magnetic tape heads for detecting magnetic ink, and in rare cases a full linear CCD for scanning the bill as its inserted. Each of those detectors (except the CCD) produces a simple data stream from each bill thats checked. Surely it would be easy enough to figure out the fingerprint of a real bill, and produce something that looks just like the real thing  but only to a validator?\nIn theory, probably, but the combination of sensors presents a real problem. Its really the same problem with counterfeiting a bill in general: implementing a single security feature is doable, but getting them all right at the same time is nearly impossible. And so with the humble banknote validator.\nDont Trust That Phone Call\nTheres a scam that has risen to popularity with the advent of AI voice impersonation. It usually takes the form of a young person calling a parent or grandparent from jail or a hospital, asking for money to be wired to make it home. It sounds convincing, because its an AI deepfake of the targets loved one. This is no longer just a technique to take advantage of loving grandparents. The FBI has issued a warning about an ongoing campaign using deepfakes of US officials. The aim of this malware campaign seems to be just getting the victim to click on a malicious link. This same technique was used in a LastPass attack last year, and the technique has become so convincing, its not likely to go away anytime soon.\nAI Searching SharePoint\nMicrosoft has tried not to be left behind in the current flurry of AI rollouts that every tech company seems to be engaging in. Microsofts SharePoint is not immune, and the result is Microsoft Copilot for SharePoint. This gives an AI agent access to a companys SharePoint knowledge base, allowing users to query it for information. Its AI as a better search engine. This has some ramifications for security, as SharePoint installs tend to collect sensitive data.\nThe first ramification is the most straightforward. The AI can be used to search for that sensitive data. But Copilot pulling data from a SharePoint file doesnt count as a view, making for a very stealthy way to pull data from those sensitive files. Pen Test Partners found something even better on a real assessment. A passwords file hosted on SharePoint was unavailable to view, but in an odd way. This file hadnt been locked down using SharePoint permissions, but instead the file was restricted from previewing in the browser. This was likely an attempt to keep eyes off the contents of the file. And Copilot was willing to be super helpful, pasting the contents of that file right into a chat window. Whoops.\nFuzzing Apples CoreAudio\nGoogler [Dillon Franke] has the story of finding a type confusion flaw in Apples CoreAudio daemon, reachable via Mach Inter-Process Communication (IPC) messages, allowing for potential arbitrary code execution from within a sandboxed process. This is a really interesting fuzzing + reverse engineering journey, and it starts with imagining the attack he wanted to find: Something that could be launched from within a sandboxed browser, take advantage of already available IPC mechanisms, and exploit a complex process with elevated privileges.\nCoreaudiod ticks all the boxes, but its a closed source daemon. How does one approach this problem? The easy option is to just fuzz over the IPC messages. It would be a perfectly viable strategy, to fuzz CoreAudio via Mach calls. The downside is that the fuzzer would run slower, and have much less visibility into whats happening in the target process. A much more powerful approach is to build a fuzzing harness that allows hooking directly to the library in question. There is some definite library wizardry at play here, linking into a library function that hasnt been exported.\nThe vulnerability that he found was type confusion, where the daemon expected an ioctl object, but could be supplied arbitrary data. As an ioctl object contains a pointer to a vtable, which is essentially a collection of function pointers. It then attempts to call a function from that table. Its an ideal situation for exploitation. The fix from Apple is an explicit type check on the incoming objects.\nBits and Bytes\nAsus publishes the DriverHub tool, a gui-less driver updater. It communicates with driverhub.asus.com using RPC calls. The problem is that it checks for the right web URL using a wildcard, and driverhub.asus.com.mrbruh.com was considered completely valid. Among the functions DriverHub can perform is to install drivers and updates. Chaining a couple of fake updates together results in relatively easy admin code execution on the local machine, with the only prerequisites being the DriverHub software being installed, and clicking a single malicious link. Ouch.\nThe VirtualBox VGA driver just patched a buffer overflow that could result in VM escape. The vmsvga3dSurfaceMipBufferSize call could be manipulated so no memory is actually allocated, but VirtualBox itself believes a buffer is there and writable. This memory write ability can be leveraged into arbitrary memory read and write capability on the host system.\nAnd finally, whats old is new again. APT28, a Russian state actor, has been using very old-school Cross Site Scripting (XSS) attacks to gain access to targets webmail systems. The attack here is JavaScript in an emails HTML code. That JS then used already known XSS exploits to exfiltrate emails and contacts. The worst part of this campaign is how low-effort it was. These arent cutting-edge 0-days. Instead, the targets email servers just hadnt been updated. Keep your webmail installs up to date!", "title": "- \u30b9\u30da\u30af\u30c8\u30eb\u518d\u6765\uff1a\u65b0\u305f\u306aCPU\u30e1\u30e2\u30ea\u6f0f\u6d29\u6280\u8853\u306e\u767a\u898b", "body": "Spectre\u306e\u65b0\u578b\u653b\u6483\u304c\u767a\u898b\u3055\u308c\u3001Intel\u3068Linux\u304c\u5bfe\u7b56\u3092\u5b9f\u65bd\u3002\u6df1\u523b\u306a\u6027\u80fd\u4f4e\u4e0b\u3092\u4f34\u3046\u3002", "titles": ["- \u30b9\u30da\u30af\u30c8\u30eb\u518d\u6765\uff1a\u65b0\u305f\u306aCPU\u30e1\u30e2\u30ea\u6f0f\u6d29\u6280\u8853\u306e\u767a\u898b", "- \u9280\u884c\u5238\u30d0\u30ea\u30c7\u30fc\u30bf\u30fc\u306e\u4ed5\u7d44\u307f\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u80fd", "- \u6df1\u5c64\u5b66\u7fd2\u306b\u3088\u308b\u97f3\u58f0\u8a50\u6b3a\uff1aAI\u306e\u9032\u5316\u3068\u8105\u5a01", "- Microsoft SharePoint\u306b\u304a\u3051\u308bAI\u5229\u7528\u3068\u30c7\u30fc\u30bf\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u61f8\u5ff5", "- Apple\u306eCoreAudio\u306b\u304a\u3051\u308b\u8106\u5f31\u6027\u3068\u305d\u306e\u5bfe\u7b56\u65b9\u6cd5"]}