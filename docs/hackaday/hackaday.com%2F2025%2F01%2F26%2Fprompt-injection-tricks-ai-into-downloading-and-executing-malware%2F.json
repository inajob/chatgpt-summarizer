{"pubDate": "2025-01-26T14:00:40", "original_title": "Prompt Injection Tricks AI Into Downloading and Executing Malware", "link": "https://hackaday.com/2025/01/26/prompt-injection-tricks-ai-into-downloading-and-executing-malware/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2021/08/GithubCopilot.jpg", "original_content": "[wunderwuzzi] demonstrates a proof of concept in which a service that enables an AI to control a virtual computer (in this case, Anthropics Claude Computer Use) is made to download and execute a piece of malware that successfully connects to a command and control (C2) server. [wonderwuzzi] makes the reasonable case that such a system has therefore become a ZombAI. Heres how it worked.\nReferring to the malware as a support tool and embedding instructions into the body of the web page is what got the binary downloaded and executed, compromising the system.\nAfter setting up a web page with a download link to the malicious binary, [wunderwuzzi] attempts to get Claude to download and run the malware. At first, Claude doesnt bite. But that all changes when the content of the HTML page gets rewritten with instructions to download and execute the Support Tool. That new content gets interpreted as orders to follow; being essentially a form of prompt injection.\nClaude dutifully downloads the malicious binary, then autonomously (and cleverly) locates the downloaded file and even uses chmod to make it executable before running it. The result? A compromised machine.\nNow, just to be clear, Claude Computer Use is experimental and this sort of risk is absolutely and explicitly called out in Anthropics documentation. But whats interesting here is that the methods used to convince Claude to compromise the system its using are essentially the same one might take to convince a person. Make something nefarious look innocent, and obfuscate the true source (and intent) of the directions. Watch it in action from beginning to end in a video, embedded just under the page break.\n\nThis is a demonstration of the importance of security and caution when using or designing systems like this. Its also a reminder that large language models (LLMs) fundamentally mix instructions and input data together in the same stream. This is a big part of what makes them so fantastically useful at communicating naturally, but its also why prompt injection is so tricky to truly solve.\n"}