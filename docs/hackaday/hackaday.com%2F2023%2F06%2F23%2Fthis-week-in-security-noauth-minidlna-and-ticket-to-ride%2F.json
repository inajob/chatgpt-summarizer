{"pubDate": "2023-06-23T14:00:27", "original_title": "This Week in Security: nOAuth, MiniDLNA, and Ticket to Ride", "link": "https://hackaday.com/2023/06/23/this-week-in-security-noauth-minidlna-and-ticket-to-ride/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Theres a fun logic flaw in how multiple online services handle OAuth logins, that abuses Microsofts Azure Active Directory service to allow account takeovers. The problem is how a site handles the Sign In With Microsoft option, when theres an existing account under the same email address. This is an irritating problem for an end-user, when a site offers multiple sign-in options. Trying to remember which option was used to set up an account is a struggle, so many services automatically merge accounts.\nThe problem is that the Microsoft Azure authentication information includes an email address, but Microsoft hasnt done any verification that the account in question actually controls that address. And in fact, its trivial for the Azure admin to change that address at whim. So if the service accepts that email address as authoritative, and auto-merges the accounts, its a trivial account takeover. And its more than just a theoretical problem, as researchers at descope were able to demonstrate the attack, and have found multiple medium and large services that were vulnerable, as well as at least two authentication providers that themselves were vulnerable to this attack.\nMicrosoft has pushed updates to the Azure AD service to make the issue easier to avoid, though it seems that the unverified email field is still being sent on authentication transactions. There is a new flag, RemoveUnverifiedEmailClaim that eliminates the issue, and is enabled by default for new applications. Unfortunately this means that existing vulnerable applications will continue to be vulnerable until fixed on the application side.\nMiniDLNA\n[Hyprdude] was looking for bugs on his Netgear RAX45, so he pulled the GPL sources and started doing some fuzzing. The application that caught his attention was MiniDLNA, a lightweight media hosting application. It has an HTTP stack, and thats where a handful of bugs were found. The juicy one, CVE-2023-33476, is an out-of-bounds (OOB) read and write vulnerability in the HTTP chunked encoding handling. The HTTP one-liner that crashes a vulnerable instance is a simple GET /status HTTP/1.0\\r\\nTransport-Encoding:chunked\\r\\n\\r\\nffffff\\r\\n0\\r\\n\\r\\n.\nNow theres a weird wrinkle here. The RAX45 doesnt crash when sent this code. Netgear seems to be maintaining a private branch of MiniDLNA that has fixes, and isnt included in their GPL bundles. Thats almost certainly a GPL violation, unless its based solely on the MiniDLNA code developed by Netgear employees. With that discovery made, [hyprdude] turned to the main MiniDLNA code base, and found the vulnerability there. Its an order of operations error, hidden by a programmer trying to be too smart.\nwhile( (line req_buf + h-req_buflen)) \n(h-req_chunklen = strtol(line, endptr, 16)  0) \n(endptr != line) )\nThat while loop is looking for three conditions, that the line pointer hasnt overflowed its output, that there is a value left in the input buffer, and that the line pointer hasnt reached the end of the input. The middle condition is where some programmer was trying too hard, to use the results of the strtol() call for the comparison, and also to assign it to the req_chunklen variable. But instead, that variable is set to the result of the comparison  either 0 or 1. And since that value is used to iterate through the input, the sanity checking intended to happen here is quite handily sidestepped.\nThe logic that actually copies the data gets this right:\nwhile ((h-req_chunklen = strtol(chunk, endptr, 16))  0  (endptr != chunk) )\nThe extra pair of parenthesis make the value assignment work as intended. But weve already sneaked bad data through the filter, meaning that packets are accepted with chunk sizes bigger than the packet itself.\nAnd then in part two, we get a fantastic walkthrough on how to turn this bug into a working exploit. The primitive ends up being the ability to slide data from beyond the end of the packet buffer. It requires a bit of creativity, in the form of including whitespace in the HTTP chunks, and then using other HTTP packets to set up a neighboring memory location. Finally, the flaw is used to slide one of those pre-sent packets over a recently freed memory chunk, corrupting the memory metadata about where to find free chunks. And then the next HTTP packet can be steered to allocated memory, namely the Global Offset Table. Overwrite the location of the free() function, pointing it at previous HTTP data, and youve got code execution. Its great work, and the fix has already landed upstream.\nTicket to Ride\nFrance and Germany launched a publicity campaign recently, where they gave away 30,000 free tickets for travel between the two countries. And somewhat predictably, the demand for free tickets DDoSd the servers. But it turns out, there were far worse problems. Like the password reset function, pointing at a non-existent Vercel application. Oops. A kind soul registered that application, and made it a simple test page rather than something malicious.\nBut it gets better. The campaign intended to give out 30,000 tickets. But what about people still filling out the form when the 30,000th ticket was given out? Yes, they still get tickets, too. That was handled with an emailed link to those few stuck in limbo, allowing them to finish registration. The problem was that the code to initiate that process was left in place  accessible to anyone with a browsers debug console.\nAfter spending way too much effort trying to find a security contact, our intrepid researchers apparently got word of problems to the right ears, as this secret page was closed. But the ride doesnt end there, as the API itself would still happily hand out free tickets. After another wild goose chase trying to do security disclosure, that problem *finally* got fixed. No more free tickets.\nSo armed with this experience, the team took a look at a previous campaign, DiscoverEU. Same concept, different government, but the same agencies doing the implementation. Not vulnerable in the same way, but there was a dashboard discovered through Certificate Transparency. Since they were already familiar with the API, why not try using it to create an account? Not only did it work, that account could access the name, email, country, and state of almost 250,000 users. At least they finally knew who to contact for security reports.\nBits and Bytes\nThere are a trio of speculative executions attacks against Ethereum. Unlike speculative execution on a CPU, these issues just manage a Denial of Service attack on the network. Ethereum tries to prevent DOS attacks by charging a small fee for each transaction, but these attacks trade on the insight that invalid transactions dont actually cost those fees. The first example is a technique to run a chain of 140 minor transactions, that ends in a transaction to a sanctioned entity. A node that honors those sanctions will run through the previous transactions, only to discard the work once the final interaction is discovered. A second technique creates valid-looking transactions, that use up a great deal of memory to process, leading to eviction of other, valid transactions from the clients memory pool. The last technique manipulates nodes into including transactions with censored entities, which is only caught by other nodes, and can rapidly harm a specific nodes reputation rating.\nResearchers have published a paper on arxiv detailing a Global SMS Positioning system, which uses the timing of SMS delivery reports to track down the location of receivers. The heavy lifting was done by a machine learning model, and the caveat is that it only really works when theres a known list of locations where the target is likely to be. Still impressive.\nAnd Fortigate RCEs are still a thing, with two more vulnerabilities found recently. At least one has been fixed independently in the latest firmware update. Its another example of one vulnerability finding leading to several others, as attention is drawn to some new or unexplored possible vector. Its not entirely clear what the services are intended to do, listening on ports 1050 and 5555. Sadly, its probably not related to Daft Punks Interstella 5555.", "title": "Microsoft\u306eOAuth\u30ed\u30b0\u30a4\u30f3\u306b\u8106\u5f31\u6027\u3000Azure Active Directory\u3092\u60aa\u7528\u3057\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u4e57\u3063\u53d6\u308a\u304c\u53ef\u80fd\u306b", "body": "Microsoft Azure Active Directory\u306e\u554f\u984c\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u4e57\u3063\u53d6\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3044\u3046\u7814\u7a76\u304c\u3042\u308a\u3001\u65b0\u3057\u3044flag\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u304c\u5224\u660e\u3057\u305f\u3002\u307e\u305f\u3001Netgear RAX45\u3084Ticket to Ride\u3001Ethereum\u306a\u3069\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u306b\u554f\u984c\u306e\u3042\u308b\u30b5\u30fc\u30d3\u30b9\u3084\u30b7\u30b9\u30c6\u30e0\u3082\u5831\u544a\u3055\u308c\u3066\u3044\u308b\u3002SMS\u4f4d\u7f6e\u30b7\u30b9\u30c6\u30e0\u304c\u767a\u898b\u3055\u308c\u305f\u304c\u3001\u9650\u5b9a\u7684\u306a\u9069\u7528\u3057\u304b\u306a\u3044\u3002Fortigate RCEs\u306b\u3064\u3044\u3066\u3082\u5831\u544a\u304c\u3042\u308a\u3001\u6700\u65b0\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3067\u4fee\u6b63\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u30dd\u30fc\u30c81050\u30685555\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u4f55\u306e\u305f\u3081\u306e\u3082\u306e\u304b\u306f\u4e0d\u660e\u3002", "titles": ["Microsoft\u306eOAuth\u30ed\u30b0\u30a4\u30f3\u306b\u8106\u5f31\u6027\u3000Azure Active Directory\u3092\u60aa\u7528\u3057\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u4e57\u3063\u53d6\u308a\u304c\u53ef\u80fd\u306b", "MiniDLNA\u306b\u8106\u5f31\u6027\u3001Netgear RAX45\u306f\u5bfe\u7b56\u6e08\u307f\u3082\u4ed6\u8005\u306f\u672a\u5bfe\u7b56", "\u30a2\u30ab\u30a6\u30f3\u30c8\u53d7\u5165\u308c\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306730,000\u679a\u30c1\u30b1\u30c3\u30c8\u914d\u5e03\u304c\u4e71\u7acb\u3000\u3055\u3089\u306b\u4e0d\u5177\u5408\u591a\u6570", "Ethereum\u306b\u30c7\u30cb\u30a2\u30eb\u30aa\u30d6\u30b5\u30fc\u30d3\u30b9\u653b\u6483\u304c\u767a\u751f", "SMS\u914d\u9054\u5831\u544a\u306b\u3088\u308b\u30b0\u30ed\u30fc\u30d0\u30eb\u4f4d\u7f6e\u7279\u5b9a\u304c\u53ef\u80fd\u306b\u3000\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u6d3b\u7528"]}