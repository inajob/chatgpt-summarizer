{"pubDate": "2024-10-21T14:00:23", "original_title": "An SAO for Hams", "link": "https://hackaday.com/2024/10/21/an-sao-for-hams/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/10/Amateur-Radio.jpg", "original_content": "Generally speaking, the Hackaday Supercon badge will always have a place for SAO (rebranded as Supercon add-ons), and that makes sense. We did originate them, after all. This year, though, weve gone all in on SAO, and, in particular, weve asked to see more SAOs with communication capabilities. The standard has always had an I2C bus, but few people use them. I decided I wanted to set an example and cook up a badge for Supercon. Was it hard? Yes and no. Ill share with you a little about the boards genesis and the issues I found. At the end, Ill make you a special offer, if you are going to Supercon.\nThe Idea\nThe front of the SAOGNR  the SAO connector is, of course, on the back\nIve been a ham radio operator for a very long time. In fact, July was my 47th anniversary in the radio hobby. Well, thats not true. It was my 47th year with a license. I had been listening to shortwave long before then. So, I wanted to do something with Morse code. You dont have to know Morse code to get a license these days, but a lot of hams enjoy it.\nI set out to do a simple board that would play some Morse code messages. But thats just another blinking light LED with a buzzer on it, too. So, naturally, I decided it would also provide Morse code output for the I2C host. That is, the SAO could be used to convert ASCII to Morse code. Sounds simple, right? Sure.\nGetting Started\nI wanted to use a Raspberry Pi Pico but didnt want to violate the SAO size requirements. Luckily, theres an RP2040-Zero module that is quite tiny and looks more or less like a normal Pico. The two big differences are plusses: they have a reset button, and instead of a normal LED, they have a WS2812b-style LED.\n\nUsing that let me not worry about a lot of overhead on the board. Sure, it costs a few bucks more, so if you were mass-producing something, thats not so good. But for this, it was perfect. I only had to add a speaker with a little transistor driver, which is probably unnecessary, four more WS2812B LEDs, and the SAO connector.\nI was going to add a button, but I remembered from last year there is a way to use the BOOTSEL button on the module as a normal button, so I decided to cut a corner there. I could have shrunk the board, but I wanted some area for a protyping area and some cool silk screen, since Im not artistic enough to come up with a nice outline for the board, so I kept the board full-size which is a lot of space.\nThe only strange thing is that the RP2040-Zero has parts on both sides, so it needs a cutout in the board. No problem. KiCAD didnt have a good footprint for it that I could find, so I switched over to EasyEDA. They have handy integration with the parts you can get, too, so it is easy to price your board and even buy them already put together if you like.\nWhile I waited for the boards, I decided to grab a similar Pico board and prototype the software. However, in the middle of this, I got a disturbing e-mail.\nThe Boards are Wrong?\nThe Chinese board house sent me a note: they were not sure the LEDs were connected properly. I checked, and I double-checked. They looked OK to me. I bravely asked them to build the boards as specified and went back to prototyping.\nIm not always a fan of Python, but we have a history of doing badges in Python so people can easily hack them. So I decided to stick to MicroPython. Getting the code and other features to work was a piece of cake. There is something surreal about using regular expressions to filter comments out of a file on a little microprocessor.\nI2C Woe\nOnce I had the main features working, I set out to do the I2C when I realized an unpleasant fact. The Micropython library has I2C classes so you can host an I2C device. It does not have code that lets you be an I2C device yourself. CircuitPython apparently supports this, but I was in no mood to move the code over. Had I realized it going in, I might have made a different choice.\nLuckily, an online forum had some code that directly manipulated the chips I2C registers and I was able to adapt that. If you are thinking of building an SAO with I2C capabilities, this is something to check before you go too far.\nI stuck with the simple protocol that just lets me receive I2C commands because thats all I needed, but there were examples of going further. For my project, I created the I2CTarget class. You tell the constructor which I2C bus you want to use, what pins you want to map to, and the I2C address you want to use. There are defaults for all of that.\nOnce it is running, you can check to see if data is available (call any()) and then read that data (get()). Dont forget that reading data will block, so if you dont want to block, check to see if anything is available first. The I2C hardware on the chip has a small FIFO, so thats fine for this project.\nI did create a subclass that allows an I2C object to act like a menu in the code. The menu object normally gets input from the user, but using this little trick lets the I2C commands fake user input.\nThe Boards Arrive\nThe board came in, as boards tend to do. I changed a few I/O pins in my code and big sigh of relief, the LEDs were fine. A few tweaks on the code and the SAO was complete.\n\nI left you all the files and documentation over on Hackaday.io. Maybe I went a little overboard with the documentation. You can decide. The source code is on GitHub, but youll find the link on the IO page.\nSpecial Offer\nDo you want one? Well, all the design files are there. Fire up your favorite way to etch boards or order them from your favorite board house. It wouldnt be that hard to point-to-point wire one or put one on a breadboard except for the SAO connector, of course.\nHowever, I have a deal for you. I have a limited number of these and will have them at Supercon. Find me  Im easy to find since I mostly hang out at the soldering challenge table  and show me some code you propose to run that either uses the SAO or runs on the SAO. If I have any left, Ill give you one, but when Im out, Im out. So, to be on the safe side, maybe make your own and bring it anyway."}