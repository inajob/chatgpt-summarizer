{"pubDate": "2025-09-09T11:00:08", "original_title": "Further Adventures in Colorimeter Hacking", "link": "https://hackaday.com/2025/09/09/further-adventures-in-colorimeter-hacking/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/09/colorimeter_reverse_engineering.png", "original_content": "\nOne of the great things about sharing hacks is that sometimes one person\u2019s work inspires someone else to take it even further. A case in point is [Ivor]\u2019s colorimeter hacking (parts two and three), which started with some relatively simple request spoofing to install non-stock firmware, and expanded from there until he had complete control over the hardware.\nAfter reading [Adam Zeloof]\u2019s work on replacing the firmware on a cosmetics spectrophotometer with general-purpose firmware, [Ivor] bought two of these colorimeters, one as a backup. He started with [Adam]\u2019s method for updating the firmware by altering the request sent to an update server, but was only able to find the serial number from a quality-control unit. This installed the quality-control firmware, which encountered an error on the device. More searching led [Ivor] to another serial number, which gave him the base firmware, and let him dump and compare the cosmetic, quality-control, and base firmwares.\n\nAfter analyzing traffic between the host computer and the colorimeter during an update, he wrote a Python program to upload firmware without using the official companion app. Since the first data sent over is a loading screen, this let him display custom images, such as the DOOM title page.\nDuring firmware upload, the colorimeter switches into a bootloader, the menu of which has some interesting options, such as viewing and editing the NAND. Opening the device revealed a flash chip, an AT91SAM ARM9 chip, and some test pads. After carefully soldering to the test pads, he was able to dump the bootloader, and with some difficulty, the NAND contents. Changing the chip ID and serial number in the NAND let the quality-control firmware work on the cosmetic model; interestingly, only the first digit of the serial number needed to be valid.\nOf course, the actual journey wasn\u2019t quite this straightforward, and the device seemed to be bricked several times, one of which required the installation of a jumper to force it into a recovery mode. In the end, though, [Ivor] was able to download and upload content to NAND, alter the bootloader, alter the serial number, and enter boot recovery; in short, to have total control over the device\u2019s software. Thoughtfully, he\u2019s used his findings to write a Python utility library to interact with and edit the colorimeter\u2019s software over USB.\nIf this makes you interested in seeing more examples of reverse-engineering, we\u2019ve covered some impressive work on a mini console and an audio interface.", "title": "- \u30ab\u30e9\u30ea\u30e1\u30fc\u30bf\u30fc\u306e\u30cf\u30c3\u30ad\u30f3\u30b0\u3067\u5f97\u305f\u5b8c\u5168\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb", "body": "Ivor\u306f\u30ab\u30e9\u30fcimeter\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u6539\u9020\u3092\u9032\u3081\u3001\u5b8c\u5168\u306b\u5236\u5fa1\u3059\u308b\u306b\u81f3\u3063\u305f\u3002", "titles": ["- \u30ab\u30e9\u30ea\u30e1\u30fc\u30bf\u30fc\u306e\u30cf\u30c3\u30ad\u30f3\u30b0\u3067\u5f97\u305f\u5b8c\u5168\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb", "- Python\u3067\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u5b9f\u73fe", "- \u901a\u4fe1\u89e3\u6790\u304b\u3089\u898b\u3048\u305f\u30ab\u30e9\u30ea\u30e1\u30fc\u30bf\u30fc\u5185\u90e8\u69cb\u9020", "- \u30b7\u30ea\u30a2\u30eb\u756a\u53f7\u5909\u66f4\u3067\u54c1\u8cea\u7ba1\u7406\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u52d5\u4f5c", "- \u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306e\u3055\u3089\u306a\u308b\u4e8b\u4f8b\u3092\u63a2\u7d22\u3057\u3088\u3046"]}