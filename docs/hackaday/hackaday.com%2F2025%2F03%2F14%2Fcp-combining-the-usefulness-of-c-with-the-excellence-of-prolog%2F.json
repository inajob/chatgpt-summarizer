{"pubDate": "2025-03-14T23:00:12", "original_title": "C+P: Combining the Usefulness of C with the Excellence of Prolog", "link": "https://hackaday.com/2025/03/14/cp-combining-the-usefulness-of-c-with-the-excellence-of-prolog/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/03/c_plus_prolog_hello_world.jpg", "original_content": "In a move that will absolutely not over-excite anyone, nor lead to any heated arguments, [needleful] posits that their C Plus Prolog (C+P for short) programming language is the best possible language ever. This is due to it combining the best of the only good programming language (Prolog) with the best of the only useful programming language (C). Although the resulting mash-up syntax that results may trigger Objective-C flashbacks, its actually valid SWI-Prolog, that is subsequently converted to C for compilation.\nLanguage flamewars aside, the motivation for C+P as explained in the projects README was mostly the exploring of macros in a system programming language. More specifically, by implementing a language-within-a-language you can add just about any compile-time feature you want including  as demonstrated in C+P  a form of generics. Even as a way to have a bit of fun, C+P comes dangerously close to being a functional prototype. Its main flaw is probably the lack of validation and error messages, which likely leads to broken C being generated.\nAlso mentioned are the Nim and Haxe languages which can be compiled (transpiled) to C or C++, which is somewhat of a similar idea as C+P, as well as cmacro (based on Common Lisp) and the D language."}