{"pubDate": "2024-11-06T16:30:20", "original_title": "Hardware-in-the-Loop Continuous Integration", "link": "https://hackaday.com/2024/11/06/hardware-in-the-loop-continuous-integration/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/11/7980371730734569022.jpg", "original_content": "How can you tell if your software is doing what its supposed to? Write some tests and run them every time you change anything. But what if youre making hardware? [deqing] has your back with the Automatic Hardware Testing rig. And just as youd expect in the software-only world, you can fire off the system every time you update the firmware in your GitHub.\nA Raspberry Pi compiles the firmware in question and flashes the device under test. The cool part is the custom rig that simulates button presses and reads the resulting values out. No actual LEDs are blinked, but the test rig looks for voltages on the appropriate pins, and a test passes when the timing is between 0.95 and 1.05 seconds for the highs and lows. Firing this entire procedure off at every git check-in ensures that all the example code is working.\nSo far, we can only see how the test rig would work with easily simulated peripherals. If your real application involved speaking to a DAC over I2C, for instance, youd probably want to integrate that into the test rig, but the principle would be the same.\nAre any of you doing this kind of mock-up hardware testing on your projects? Is sounds like it could catch bad mistakes before they got out of the house."}