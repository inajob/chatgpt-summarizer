{"pubDate": "2025-05-23T14:00:56", "original_title": "This Week in Security: Signal DRM, Modern Phone Phreaking, and the Impossible SSH RCE", "link": "https://hackaday.com/2025/05/23/this-week-in-security-signal-drm-modern-phone-phreaking-and-the-impossible-ssh-rce/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Digital Rights Management (DRM) has been the bane of users since it was first introduced. Who remembers the battle it was getting Netflix running on Linux machines, or the literal legal fight over the DVD DRM decryption key? So the news from Signal, that DRM is finally being put to use to protect users is ironic.\nThe reason for this is Microsoft Recall  the AI powered feature that takes a snapshot of everything on the users desktop every few seconds. For whatever reason, you might want to exempt some windows from Recalls memory window. It doesnt speak well for Microsofts implementation that the easiest way for an application to opt out of the feature is to mark its window as containing DRM content. Signal, the private communications platform, is using this to hide from Recall and other screenshotting applications.\nThe Signal blogs warns that this may be just the start of agentic AI being rolled out with insufficient controls and permissions. The issue here isnt the singularity or AI reaching sentience, its the same old security and privacy problems weve always had: Too much information being collected, data being shared without permission, and an untrusted actor having access to way more than it should.\nLegacy Malware?\nThe last few stories weve covered about malicious code in open source repositories have featured how quickly the bad packages were caught. Then theres this story about two-year-old malicious packages on NPM that are just now being found.\nIt may be that the reason these packages werent discovered until now, is that these packages arent looking to exfiltrate data, or steal bitcoin, or load other malware. Instead, these packages have a trigger date, and just sabotage the systems theyre installed on  sometimes in rather subtle ways. If a web application you were writing was experiencing intermittent failures, how long would it take you to suspect malware in one of your JavaScript libraries?\nWhere Are You Calling From?\nPhone phreaking isnt dead, it has just gone digital. One of the possibly apocryphal origins of phone phreaking was a toy bosun whistle in boxes of cereal, that just happened to play a 2600 Hz tone. More serious phreakers used more sophisticated, digital versions of the whistle, calling them blue boxes. In modern times, apparently, the equivalent of the blue box is a rooted Android phone. [Daniel Williams] has the story of playing with Voice over LTE (VoLTE) cell phone calls. A bug in the app he was using forced him to look at the raw network messages coming from O2 UK, his local carrier.\nAnd those messages were weird. VoLTE is essentially using the Session Initiation Protocol (SIP) to handle cell phone calls as Voice over IP (VoIP) calls using the cellular data network. SIP is used in telephony all over the place, from desk phones to video conferencing solutions. SIP calls have headers that work to route the call, which can contain all sorts of metadata about the call. [Daniel] took a look at the SIP headers on a VoLTE call, and noticed some strange things. For one, the International Mobile Subscriber Identity (IMSI) and International Mobile Equipment Identity (IMEI) codes for both the sender and destination were available.\nHe also stumbled onto an interesting header, the Cellular-Network-Info header. This header encodes way too much data about the network the remote caller is connected to, including the exact tower being used. In an urban environment, that locates a cell phone to an area not much bigger than a city block. Together with leaking the IMSI and IMEI, this is a dangerous amount of information to leak to anyone on the network. [Daniel] attempted to report the issue to O2 in late March, and was met with complete silence. However, a mere two days after this write-up was published, on May 19th, O2 finally made contact, and confirmed that the issue had finally been resolved.\nARP Spoofing in Practice\nTCP has an inherent security advantage, because its a stateful connection, its much harder to make a connection from a spoofed IP address. Its harder, but its not impossible. One of the approaches that allows actual TCP connections from spoofed IPs is Address Resolution Protocol (ARP) poisoning. Ethernet switches dont look at IP addresses, but instead route using MAC addresses. ARP is the protocol that distributes the MAC Address to IP mapping on the local network.\nAnd like many protocols from early in the Internets history, ARP requests dont include any cryptography and arent validated. Generally, whoever claims an IP address first wins, so the key is automating this process. And hence, enter NetImposter, a new tool specifically designed to automate this process, sending spoofed ARP packets, and establishing an impossible TCP connection.\nImpossible RCE in SSH\nOver two years ago, researchers at Qualsys discovered a pre-authentication double-free in OpenSSH server version 9.1. 9.2 was quickly released, and because none of the very major distributions had shipped 9.1 yet, what could have been a very nasty problem was patched pretty quietly. Because of the now-standard hardening features in modern Linux and BSD distributions, this vulnerability was thought to be impossible to actually leverage into Remote Code Execution (RCE).\n\nIf someone get a working OpenSSH exploit from this bug, I'm switching my main desktop to Windows 98  (this bug was discovered by a Windows 98 user who noticed sshd was crashing when trying to login to a Linux server!)\n Tavis Ormandy (@taviso) February 14, 2023\n\nThe bug was famously discovered by attempting to SSH into a modern Linux machine from a Windows 98 machine, and Tavis Ormandy claimed he would switch to Windows 98 on his main machine if someone did actually manage to exploit it for RCE. [Perri Adams] thought this was a hilarious challenge, and started working an exploit. Now we have good and bad news about this effort. [Perri] is pretty sure it is actually possible, to groom the heap and with enough attempts, overwrite an interesting pointer, and leak enough information in the process to overcome address randomization, and get RCE. The bad news is that the reward of dooming [Tavis] to a Windows 98 machine for a while wasnt quite enough to be worth the pain of turning the work into a fully functional exploit.\nBut thats where [Perris] OffensiveCon keynote took an AI turn. How well would any of the cutting-edge AIs do at finding, understanding, fixing, and exploiting this vulnerability? As you probably already guessed, the results were mixed. Two of the three AIs thought the function just didnt have any memory management problems at all. Once informed of the problem, the models had more useful analysis of the code, but they still couldnt produce any remotely useful code for exploitation. [Perris] takeaway is that AI systems are approaching the threshold of being useful for defensive programming work. Distilling what code is doing, helping in reverse engineering, and working as a smarter sort of spell checker are all wins for programmers and security researchers. But fortunately, were not anywhere close to a world where AI is developing and deploying exploitations.\n\nBits and Bytes\nThere are a pair of new versions of reverse engineering/forensic tools released very recently. Up first is Frida, a runtime debugger on steroids, that is celebrating its 17th major version release. One of the major features is migrating to pluggable runtime bridges, and moving away from strictly bundling them. We also have Volatility 3, a memory forensics framework. This isnt the first Volatility 3 release, but it is the release where version three officially has parity with the version two of the framework.\nThe Foscam X5 security camera has a pair of buffer overflows, each of which can be leveraged to acieve arbitrary RCE. One of the proof-of-concepts has a very impressive use of a write-null-anywhere primitive to corrupt a return pointer, and jump into a ROP gadget. The concerning element of this disclosure is that the vendor has been completely unresponsive, and the vulnerabilities are still unaddressed.\nAnd finally, one of the themes that Ive repeatedly revisited is that airtight attribution is really difficult. [Andy Gill] walks us through just one of the many reasons thats difficult. Git cryptographically signs the contents of a commit, but not the timestamps. This came up when looking through the timestamps from Jia Tan in the XZ compromise. Git timestamps can be trivially rewritten. Attestation is hard.", "title": "**DRM\u306e\u76ae\u8089\u306a\u5229\u7528\uff1aSignal\u306e\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u4fdd\u8b77\u7b56**", "body": "DRM\u304c\u30e6\u30fc\u30b6\u30fc\u3092\u5b88\u308b\u305f\u3081\u306b\u5229\u7528\u3055\u308c\u308b\u4e00\u65b9\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u306f\u5f93\u6765\u3068\u5909\u308f\u3089\u306a\u3044\u72b6\u6cc1\u306b\u3042\u308b\u3002", "titles": ["**DRM\u306e\u76ae\u8089\u306a\u5229\u7528\uff1aSignal\u306e\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u4fdd\u8b77\u7b56**", "**\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u5371\u967a\uff1a2\u5e74\u524d\u306e\u30de\u30eb\u30a6\u30a7\u30a2\u304c\u4eca\u9803\u767a\u898b**", "**\u96fb\u8a71\u306e\u30d5\u30ea\u30fc\u30ad\u30f3\u30b0\u518d\u8003\uff1a\u30c7\u30b8\u30bf\u30eb\u6642\u4ee3\u306e\u8106\u5f31\u6027**", "**ARP\u30b9\u30d7\u30fc\u30d5\u30a3\u30f3\u30b0\u30c4\u30fc\u30eb\u300cNetImposter\u300d\u306e\u767b\u5834**", "**OpenSSH\u306e\u8106\u5f31\u6027\uff1aAI\u6280\u8853\u306e\u9650\u754c\u3068\u53ef\u80fd\u6027**"]}