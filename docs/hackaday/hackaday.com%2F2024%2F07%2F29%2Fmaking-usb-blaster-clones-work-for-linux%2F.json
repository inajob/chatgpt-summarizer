{"pubDate": "2024-07-29T08:00:59", "original_title": "Making USB Blaster Clones Work For Linux", "link": "https://hackaday.com/2024/07/29/making-usb-blaster-clones-work-for-linux/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/blast.png", "original_content": "The last time we checked in with [Downtown Doug Brown], he had some cheap Altera USB Blaster clones that didnt want to work under Linux. The trick at that time was to change the devices 24 MHz clock to 12 MHz. This month, hes found some different ones that dont work, but now the clock change doesnt work. Whats the problem?\nHe also picked up a Terasic clone, which does work on Linux and is considered, according to [Doug], the best of the clones. The units were superficially similar. So what follows is a lot of USB tracing and dumping of the CPLD chips configuration.\n\nThe problem is that even though CPLDs are relatively simple, relative is a  well  relative word. It is still a lot of work to reverse engineer a CPLD bitstream. However, he did find some public VHDL source code that acted the same so he presumed it shared a common problem with the original configuration.\nInspecting the code, he realized that there was no delay between a critical part of the protocol. For some reason, Windows didnt seem to care, but it was enough to upset the Linux driver. At least, that was the theory.\nTheory, in this case, translated to practice. As a bonus, the new code even made the original units work at full speed. Although it isnt technically accurate, you can think of CPLDs as little FPGAs, and sometimes, they are more approachable for beginners. They are also great when you dont need a full-blown FPGA."}