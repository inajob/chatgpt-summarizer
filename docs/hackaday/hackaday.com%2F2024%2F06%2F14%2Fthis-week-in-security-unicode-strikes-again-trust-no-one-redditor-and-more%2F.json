{"pubDate": "2024-06-14T14:00:50", "original_title": "This Week in Security: Unicode Strikes Again, Trust No One (Redditor), and More", "link": "https://hackaday.com/2024/06/14/this-week-in-security-unicode-strikes-again-trust-no-one-redditor-and-more/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Theres a popular Sysadmin meme that system problems are always DNS. In the realm of security, it seems like its always Unicode. And its not hard to see why. Unicode is the attempt to represent all of Earths languages with a single character set, and that means theres a lot of very similar characters. The two broad issues are that human users cant always see the difference between similar characters, and that libraries and applications sometimes automatically convert exotic Unicode characters into more traditional text.\nThis week we see the resurrection of an ancient vulnerability in PHP-CGI, that allows injecting command line switches when a web server launches an instance of PHP-CGI. The solution was to block some characters in specific places in query strings, like a query string starting with a dash.\nThe bypass is due to a Windows feature, Best-Fit, an automatic down-convert from certain Unicode characters. This feature works on a per-locale basis, which means that not every system language behaves the same. The exact bypass that has been found is the conversion of a soft hyphen, which doesnt get blocked by PHP, into a regular hyphen, which can trigger the command injection. This quirk only happens when the Windows locale is set to Chinese or Japanese. Combined with the relative rarity of running PHP-CGI, and PHP on Windows, this is a pretty narrow problem. The XAMPP install does use this arrangement, so those installs are vulnerable, again if the locale is set to one of these specific languages. The other thing to keep in mind is that the Unicode character set is huge, and its very likely that there are other special characters in other locales that behave similarly.\nDownloader Beware\nThe ComfyUI project is a flowchart interface for doing AI image generation workflows. Its an easy way to build complicated generation pipelines, and the community has stepped up to build custom plugins and nodes for generation. The thing is, its not always the best idea to download and run code from strangers on the Internet, as a group of ComfyUI users found out the hard way this week. The ComfyUI_LLMVISION node from u/AppleBotzz was malicious.\nThe node references a malicious Python package that grabs browser data and sends it all to a Discord or Pastebin. It appears that some additional malware gets installed, for continuing access to infected systems. Its a rough way to learn.\nPyTorch Scores a Dubious 10.0\nCVE-2024-5480 is a PyTorch flaw that allows PyTorch worker nodes to trigger arbitrary eval() calls on the master node. No authentication is required to add a PyTorch worker, so this is technically an unauthorized RCE, earning the CVSS of 10.0. Practically speaking its not that dire of a problem, as your PyTorch cluster shouldnt be on the Internet to start with, and theres no authentication as a design choice. Its not clear the the PyTorch developers consider this a legitimate security vulnerability at all. It may or may not be fixed with version 2.3.\nNext Level Smishing\nMy least favorite term in infosec has to be smishing, a frankenword for SMS phishing. Cell phone carriers around the world are working hard to blocking spam messages, making smishing an impossible task. And thats why its particularly interesting to hear about a bypass that a pair of criminals were using in London. The technical details are light, but the police reported a homemade mobile antenna, illegitimate telephone mast, and text message blaster as part of the seized kit. The initial report sounds like it may be a sort of reverse stingray, where messages are skipping the regular cellular infrastructure and are getting sent directly to nearby cell phones. Hopefully more information will be forthcoming soon.\nZyxels NsaRescueAngel\nThe programmers at Zyxel apparently have a sense of humor, given the naming used for this mis-feature. Zyxel NAS units have a bit of magic code that writes a password for the new user, NsaRescueAngel, to the shadow password file. The SSH daemon is restarted, and upnp is fired off to request port forwarding from the outside world. One of the script names, possibly from a previous iteration, was open_back_door.sh, which seems to be sort of lampshading the whole thing.\nIts presumably intended to be a great troubleshooting tool, when a customer is stuck and needs help, to be able to visit a web url to enable remote access for a Zyxel tech. The problem is that the Zyxel NAS already has an authentication bypass flaw, and while its been patched, it wasnt patched very well, making this whole scheme accessible without authentication, just by slapping /favicon.ico onto the url. The additional problems have been fixed in a more recent update.\nRussian Secure Phablet?\nA Twitter thread tells the story of a Russian secure device, left behind on the back of a bus in England. Thats an interesting premise. But the thread continues, that conveniently the owner also left a briefcase with design notes, architecture, documentation, implementation, marketing material and internal Zoom demos about trusted devices too! OK, now this has to either be a fanfic, or a fell-off-the-back-of-a-truck story. Theres some convincing looking screenshots, and even rom dumps. Whats going on here?\n\nNobody knew how the devices worked, conveniently the owner also left a briefcase with design notes, architecture, documentation, implementation, marketing material and internal Zoom demos about trusted devices too! We'd all have been lost without those. https://t.co/LN7cTybxOV pic.twitter.com/j5OCHprSie\n hackerfantastic.x (@hackerfantastic) June 11, 2024\n\nThe most likely explanation is that somebody got their hands on a trove of data on these devices, and wanted to dump it online with a silly story. But fair warning, dont trust any of the shared files. Who knows whats actually in there. Taking a look at something untrusted like this is an art in itself, best done with isolated VMs and burner machines, maybe a Linux install you dont mind wiping?\nBits and Bytes\nBuskill just published their 8th warrant canary, a cryptographically signed statement attesting that they have not been served any secret warrants or national security letters that would undermine the trustworthiness of the Buskill project or code. In addition to a good cryptographic signature, this canary includes a handful of latest news headlines in the signed material, proving it is actually a recently generated document.\n[Aethlios] has published Reset Tolkien, an open source tool for finding and attacking a very specific sort of weakness in time based tokens. The targeted flaw is a token generated from improper randomness source, like the current time. If the pattern can be found, a sandwich attack can narrow down the possible reset codes by requesting a reset code for a controlled account, requesting one for the target account, and then once again for the controlled account. The target code must come between the two known codes.\nAnd finally, TPM security is hard. This time, the Trusted Platform Module can be reset by reclaiming the GPIO pins connected to it, and simulating a reboot by pulling the reset pin. This results in the TPM possibly talking to an application when it thinks it is talking to the CPU doing boot decryption. In short, it can result in compromised keys. Thanks to [char] from Discord for sending this one in!"}