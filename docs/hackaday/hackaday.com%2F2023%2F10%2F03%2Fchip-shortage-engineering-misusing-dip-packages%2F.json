{"pubDate": "2023-10-03T14:00:41", "original_title": "Chip Shortage Engineering: Misusing DIP Packages", "link": "https://hackaday.com/2023/10/03/chip-shortage-engineering-misusing-dip-packages/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/10/MisuingDIP.jpg", "original_content": "After years of seeing people showing off and trading their badge Simple Add-Ons (SAOs) at Supercon, this year I finally decided to make one myself. Now for a first attempt, it would have been enough to come up with some cool PCB art and stick a few LEDs on it. But naturally I started with a concept that was far more ambitious than necessary, and before long, had convinced myself that the only way to do the thing justice was to have an onboard microcontroller.\nMy first thought was to go with the venerable ATtiny85, and since I already had a considerable stock of the classic eight-pin DIP MCUs on hand, thats what I started prototyping with. After I had something working on the breadboard, the plan was to switch over to the SOIC-8 version of the chip which would be far more appropriate for something as small as an SAO.\nUnfortunately, thats where things got tricky. I quickly found that none of the major players actually had the SMD version of the chip in stock. Both DigiKey and Mouser said they didnt expect to get more in until early 2024, and while Arrow briefly showed around 3,000 on hand, they were all gone by the time I checked back. But that was only half the problem  even if they had them, $1.50 a piece seems a hell of a lot of money for an 8-bit MCU with 8K of flash in 2023.\n\nThe whole thing was made all the more frustrating by the pile of DIP8 ATtiny85s sitting on the bench, mocking me. Under normal circumstances, using them in an SAO wouldnt really be a problem, but eight hand-soldered leads popping through the front artwork would screw up the look I had in mind.\nWhile brooding over the situation my eyes happened to fall on one of the chips I had been fiddling with, its legs badly bent from repeated trips through the programmer. Suddenly it occurred to me that maybe there was a way to use the parts I already had\n\nIn Case of Shortage, Bend Pins\nThe idea was simple enough; Id program the ATtiny85, carefully bend its legs outward, and then push the chip down firmly onto an ESD mat to get it as flat as possible. From there, I could snip the legs off with a side cutter, but I thought limiting the interaction between the chip and metal tools was probably for the best. As such, the result is a chip thats flat to the PCB like an SMD component, but with leads that extend much farther out than any traditional package.\n\nObviously, the body of a DIP chip is still much larger than its SOIC counterpart. But its not like Im trying to build a smartphone here, a small bump on the back of the SAO is unlikely to bother anyone so long as it doesnt physically collide with the badge its getting plugged into.\nBut of course, a bent chip is only half of the equation. To put this into practice on more than a one-off basis, youd need a suitable footprint so compatible PCBs could be spun up.\nA Word on Footprints\nIf you only ever used jellybean components in your PCB designs, you could probably go for quite some time before having to design your own footprint. But eventually, its going to catch up with you. As the complexity of your projects increases, youll inevitably run into a part that doesnt have a digital representation in your electronic design automation (EDA) tool of choice.\nWith that in mind, creating custom footprints is a good thing to become familiar with ahead of time  nobody wants to have a project hung up as they struggle to get up to speed with a tool they never used before.\nWeve previously looked at automated tools that will pull footprints from online repositories and convert them into something KiCad will understand. This is a great capability to have, but its not infallible, and theres always a chance youll run across some oddball component out there that doesnt have a publicly available footprint; so theres still value in learning how to do it manually.\nAs this is a pretty simple footprint, its a great example to get started with. Even if you dont plan on smushing your old DIP8 chips into service as makeshift SMD components, Id invite you to follow along here if youve never used KiCads footprint editor. While not presented as a step-by-step guide, it should at least help you wrap your mind around the workflow.\nRunning the Numbers\nUnder normal circumstances, the first step in making a footprint would be to consult the datasheet for the part in question. There, youll almost certainly find a diagram that describes in precise detail the geometry of the component. Assuming the datasheet is accurate and you dont flub any of the figures, you should be able to make a footprint without ever having actually seen the physical part itself.\nIn this case though, our footprint doesnt correspond with any proper package. With no handy diagram to follow, well need to take some manual measurements before all is said and done. But it did start as a normal package, so the ATtiny85s datasheet still provides some valuable clues.\n\nThe main thing were looking for here is the size and spacing of the leads. This is labeled as e in the diagram, which corresponds to 0.100 inches, or 2.54 mm. BSC means Basic Spacing Between Centers, which indicates the measurement refers to the center point of each lead and not the outside edges.\nAs the leads have a stepped shape, theres two figures given for each one: b for the thin tip, and b2 for the wider base. Were after b in this case, which the chart says could be anywhere between 0.014 and 0.022 inches. Helpfully, it also gives us a nominal value of 0.018 inches (0.45 mm). We can also see that L shows the nominal length of each lead, not counting the base, to be 0.130 inches (3.3 mm).\nGiven the length of the leads and the width of the plastic package, we could come up with a good estimate of the wingspan for our flattened chip, but it was just as easy to grab the calipers and check the real-world dimensions:\n\nSo where does that leave us? First of all, we aint going to space with this thing, so we can round off some of those numbers. This can buy a little of wiggle room, since the parts will be hand soldered, and just makes it a bit easier to wrap your head around. Second, lets stop mixing units and just stick with metric since thats what the board house is going to want anyway.\nThe end result: a footprint that has eight pads of approximately 3 x 1.5 mm, spaced 2.54 mm from each other, with a span of around 16 mm.\nPutting Your Foot Down\nThe KiCad Foorprint Editor tool works more or less the same as the PCB Editor, and shares many of the same tools and icons. So if youve already got a couple custom PCBs under your belt, wrangling the interface shouldnt provide much of a challenge.\nOnce youve created a custom library (which can be per-project, or global for all of your projects) and named your new footprint, youre given a blank canvas on which to drop your pads using the appropriately named Add a Pad tool. After placing the first pad you can edit its parameters to give it the desired dimensions, and from then on, any new pads you place will have the same size and shape. The pad number will also automatically increment, though its up to you to make sure they match the parts actual numbering scheme.\n\nUsing the various measuring tools at your disposal, getting the pad spacing where you want it is pretty simple. The most important thing to remember here is probably to set a reasonable grid size so you dont have pads snapping to weird positions. For this example a grid size of 0.5 mm would be fine, but for finer pitched components youd want to drop that down.\nOnce the footprint looked about right, I used the Print command to run off a 1:1 duplicate on a piece of paper and checked that the ATtiny85 physically lined up with what would be copper pads on a real PCB.\n\nLessons Learned\nNow, Im not claiming to be the first person to come up with this idea. Indeed, our illustrious Editor in Chief Elliot Williams says this wasnt an uncommon practice back when hobbyists started dipping their toes irons into the world of SMD. So this is less breaking new ground, and more blowing the dust off a technique thats been lost to time.\nWas it worth the effort? As you can see from the image at the right, I did get PCBs made with this custom footprint, and I had no problem soldering these previously through-hole components as if they were supersized SMD chips. But ultimately, even the cost of the DIP8 version came out to be more than expected.\nAs of this writing, Digikey wants $1.66 each for the ATTINY85-20U. So while I did assemble several of the SAOs using this technique, in the end I switched over to the newer tinyAVR 2 family of chips. They dont come in eight-pin flavors anymore, but the extra flash, UPDI programming, and lower cost more than make up for a little extra soldering.\nSo while it wasnt quite the solution I was hoping for, it was certainly a successful hack and a good chance to brush up on some valuable skills. As any reader of Hackaday knows  the journey can sometimes end up being more interesting than the destination.", "title": "\u300c\u624b\u6301\u3061\u306e\u90e8\u54c1\u3092\u6d3b\u7528\uff01 SMD\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4ee3\u308f\u308a\u306bDIP\u30c1\u30c3\u30d7\u3092\u4f7f\u3063\u305fSAO\u306e\u4f5c\u6210\u65b9\u6cd5\u300d", "body": "Supercon\u3067\u591a\u304f\u306e\u4eba\u3005\u304c\u81ea\u5206\u306e\u30d0\u30c3\u30b8\u30a2\u30c9\u30aa\u30f3\u3092\u81ea\u6162\u3057\u305f\u308a\u4ea4\u63db\u3057\u305f\u308a\u3059\u308b\u306e\u3092\u898b\u3066\u304d\u305f\u304c\u3001\u4eca\u5e74\u306f\u81ea\u5206\u3067\u4f5c\u308d\u3046\u3068\u6c7a\u3081\u305f\u3002\u6700\u521d\u306f\u5358\u7d14\u306a\u3082\u306e\u3067\u3082\u826f\u304b\u3063\u305f\u304c\u3001\u81ea\u5206\u3060\u3051\u306e\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u3092\u4f5c\u308b\u305f\u3081\u306b\u306f\u3001\u3088\u308a\u5927\u80c6\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u304c\u5fc5\u8981\u3060\u3068\u601d\u3044\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3002", "titles": ["\u300c\u624b\u6301\u3061\u306e\u90e8\u54c1\u3092\u6d3b\u7528\uff01 SMD\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4ee3\u308f\u308a\u306bDIP\u30c1\u30c3\u30d7\u3092\u4f7f\u3063\u305fSAO\u306e\u4f5c\u6210\u65b9\u6cd5\u300d", "\u300cKiCad\u3092\u4f7f\u3063\u3066\u72ec\u81ea\u306e\u30d5\u30c3\u30c8\u30d7\u30ea\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u300d", "\u300c\u90e8\u54c1\u4e0d\u8db3\u6642\u306e\u5bfe\u51e6\u6cd5\uff1a\u8db3\u3092\u66f2\u3052\u3066\u4f7f\u3048\u308bATtiny85\u306e\u6d3b\u7528\u300d", "\u300c\u7c21\u6613\u7684\u306aSMD\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4f5c\u308a\u65b9\u300d", "\u300cSAO\u306b\u624b\u4f5c\u308a\u306e\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u642d\u8f09\u3059\u308b\u65b9\u6cd5\u300d"]}