{"pubDate": "2025-07-09T17:00:02", "original_title": "Dithering With Quantization to Smooth Things Over", "link": "https://hackaday.com/2025/07/09/dithering-with-quantization-to-smooth-things-over/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/05/Portal_Companion_Cube_JarvisJudiceNinke.png", "original_content": "It should probably come as no surprise to anyone that the images which we look at every day  whether printed or on a display  are simply illusions. That cat picture isnt actually a cat, but rather a collection of dots that when looked at from far enough away tricks our brain into thinking that we are indeed looking at a two-dimensional cat and happily fills in the blanks. These dots can use the full CMYK color model for prints, RGB(A) for digital images or a limited color space including greyscale.\nPerhaps more interesting is the use of dithering to further trick the mind into seeing things that arent truly there by adding noise. Simply put, dithering is the process of adding noise to reduce quantization error, which in images shows up as artefacts like color banding. Within the field of digital audio dithering is also used, for similar reasons. Part of the process of going from an analog signal to a digital one involves throwing away data that falls outside the sampling rate and quantization depth.\nBy adding dithering noise these quantization errors are smoothed out, with the final effect depending on the dithering algorithm used.\n\nThe Digital Era\nPlot of a quantized signal and its error. (Source: Wikimedia)\nFor most of history, humanitys methods of visual-auditory recording and reproduction were analog, starting with methods like drawing and painting. Until fairly recently reproducing music required you to assemble skilled artists, until the arrival of analog recording and playback technologies. Then suddenly, with the rise of computer technology in the second half of the 20th century we gained the ability to not only perform analog-to-digital conversion, but also store the resulting digital format in a way that promised near-perfect reproduction.\nDigital optical discs and tapes found themselves competing with analog formats like the compact cassette and vinyl records. While video and photos remained analog for a long time in the form of VHS tapes and film, eventually these all gave way to the fully digital world of digital cameras, JPEGs, PNGs, DVDs and MPEG. Despite the theoretical pixel- and note-perfect reproduction of digital formats, considerations like sampling speed (Nyquist frequency) and the aforementioned quantization errors mean a range of new headaches to address.\nThat said, the first use of dithering was actually in the 19th century, when newspapers and other printed media were looking to print phots without the hassle of having a woodcut or engraving made. This led to the invention of halftone printing.\nPolka Dots\nLeft: halftone dot pattern with increasing size downwards, Right: how the human eye would see this, when viewed from a sufficient distance. (Source: Wikimedia)\nWith early printing methods, illustrations were limited to an all-or-nothing approach with their ink coverage. This obviously meant serious limitations when it came to more detailed illustrations and photographs, until the\u00a0 arrival of the halftone printing method. First patented in 1852\u00a0 by William Fox Talbot, his approach used a special screen to break down an image into discrete points on a photographic plate. After developing this into a printing plate, these plates would then print this pattern of differently sized points.\nAlthough the exact halftone printing methods were refined over the following decades, the basic principle remains the same to this day: by varying the size of the dot and the surrounding empty (white) space, the perceived brightness changes. When this method got extended to color prints with the CMYK color model, the resulting printing of these three colors as adjoining dots allowed for full-color photographs to be printed in newspapers and magazines despite having only so few ink colors available.\nWhile its also possible to do CMYK printing with blending of the inks, as in e.g. inkjet printers, this comes with some disadvantages especially when printing on thin, low-quality paper, such as that used for newspapers, as the ink saturation can cause the paper to rip and distort. This makes CMYK and monochrome dithering still a popular technique for newspapers and similar low-fidelity applications.\nColor Palettes\nIn an ideal world, every image would have an unlimited color depth. Unfortunately we sometimes have to adapt to a narrower color space, such as when converting to the Graphics Interchange Format (GIF), which is limited to 8 bits per pixel. This 1987-era and still very popular format thus provides an astounding 256 possible colors\u00a0 -albeit from a full 24-bit color space  which poses a bit of a challenge when using a 24-bit PNG or similar format as the source. Simply reducing the bit depth causes horrible color banding, which means that we should use dithering to ease these sharp transitions, like the very common Floyd-Steinberg dithering algorithm:\nFrom left to right: original image. Converted to web safe color. Web safe with Floyd-Steinberg dithering. (Source: Wikipedia)\nThe Floyd-Steinberg dithering algorithm was created in 1976 by Robert W. Floyd and Louis Steinberg. Its approach to dithering is based on error diffusion, meaning that it takes the quantization error that causes the sharp banding and distributes it across neighboring pixels. This way transitions are less abrupt, even if it means that there is noticeable image degradation (i.e. noise) compared to the original.\nThis algorithm is quite straightforward, working its way down the image one pixel at a time without affecting previously processed pixels. After obtaining the current pixels quantization error, this is distributed across the subsequent pixels following and below the current one, as in the below pseudo code:\nfor each y from top to bottom do\n    for each x from left to right do\n        oldpixel\u00a0:= pixels[x][y]\n        newpixel\u00a0:= find_closest_palette_color(oldpixel)\n        pixels[x][y]\u00a0:= newpixel\n        quant_error\u00a0:= oldpixel - newpixel\n        pixels[x + 1][y    ]\u00a0:= pixels[x + 1][y    ] + quant_error \u00d7 7 / 16\n        pixels[x - 1][y + 1]\u00a0:= pixels[x - 1][y + 1] + quant_error \u00d7 3 / 16\n        pixels[x    ][y + 1]\u00a0:= pixels[x    ][y + 1] + quant_error \u00d7 5 / 16\n        pixels[x + 1][y + 1]\u00a0:= pixels[x + 1][y + 1] + quant_error \u00d7 1 / 16\n\n\nThe implementation of the\u00a0find_closest_palette_color() function is key here, with for a greyscale image a simple round(oldpixel / 255) sufficing, or trunc(oldpixel + 0.5) as suggested in this CS 559 course material from 2000 by the Universe of Wisconsin-Madison.\nAs basic as Floyd-Steinberg is, its still commonly used today due to the good results that it gives with fairly minimal effort. Which is not to say that there arent other dithering algorithms out there, with the Wikipedia entry on dithering helpfully pointing out a number of alternatives, both within the same error diffusion category as well as other categories like ordered dithering. In the case of ordered dithering there is a distinct crosshatch pattern that is both very recognizable and potentially off-putting.\nDithering is of course performed here to compensate for a lack of bit-depth, meaning that it will never look as good as the original image, but the less obnoxious the resulting artefacts are, the better.\nDithering With Audio\nAlthough at first glance dithering with digital audio seems far removed from dithering the quantization error with images, the same principles apply here. When for example the original recording has to be downsampled to CD-quality (i.e. 16-bit) audio, we can either round or truncate the original samples to get the desired sample size, but wed get distortion in either case. This distortion is highly noticeable by the human ear as the quantization errors create new frequencies and harmonics, this is quite noticeable in the 16- to 6-bit downsampling examples provided in the Wikipedia entry.\nIn the sample with dithering, there is clearly noise audible, but the original signal (a sine wave) now sounds pretty close to the original signal. This is done through the adding of random noise to each sample by randomly rounding up or down and counting on the average. Although random noise is clearly audible in the final result, its significantly better than the undithered version.\nRandom noise distribution is also possible with images, but more refined methods tend to give better results. For audio processing there are alternative noise distributions and noise shaping approaches.\nRegardless of which dither method is being applied, it remains fascinating how the humble printing press and quantization errors have led to so many different ways to trick the human eye and ear into accepting lower fidelity content. As many of the technical limitations that existed during the time of their conception  such as expensive storage and low bandwidth  have now mostly vanished, it will be interesting to see how dithering usage evolves over the coming years and decades.\nFeatured image: JJN Dithering from [Tanner Helland]s great dithering writeup.", "title": "\u73fe\u4ee3\u6280\u8853\u306b\u304a\u3051\u308b\u30c0\u30a4\u30bf\u30ea\u30f3\u30b0\u306e\u5f79\u5272", "body": "\u753b\u50cf\u3084\u97f3\u58f0\u306e\u30c7\u30a3\u30b6\u30ea\u30f3\u30b0\u6280\u8853\u306f\u3001\u4eba\u9593\u306e\u77e5\u899a\u3092\u5de7\u5999\u306b\u5229\u7528\u3057\u3001\u91cf\u5b50\u5316\u8aa4\u5dee\u3092\u6e1b\u5c11\u3055\u305b\u308b\u624b\u6cd5\u3067\u3042\u308b\u3002", "titles": ["\u73fe\u4ee3\u6280\u8853\u306b\u304a\u3051\u308b\u30c0\u30a4\u30bf\u30ea\u30f3\u30b0\u306e\u5f79\u5272", "\u30c7\u30b8\u30bf\u30eb\u753b\u50cf\u3068\u97f3\u58f0\u306b\u304a\u3051\u308b\u91cf\u5b50\u5316\u30a8\u30e9\u30fc\u306e\u7de9\u548c", "\u30cf\u30fc\u30d5\u30c8\u30fc\u30f3\u5370\u5237\u6cd5\u3068\u8996\u899a\u7684\u30c8\u30ea\u30c3\u30af\u306e\u6b74\u53f2", "\u30d5\u30ed\u30a4\u30c9-\u30b9\u30bf\u30a4\u30f3\u30d0\u30fc\u30b0\u6cd5\u306b\u3088\u308b\u30c0\u30a4\u30bf\u30ea\u30f3\u30b0\u306e\u6280\u8853\u89e3\u8aac", "\u30c7\u30b8\u30bf\u30eb\u6642\u4ee3\u306b\u304a\u3051\u308b\u5370\u5237\u3068\u97f3\u58f0\u51e6\u7406\u306e\u9769\u65b0"]}