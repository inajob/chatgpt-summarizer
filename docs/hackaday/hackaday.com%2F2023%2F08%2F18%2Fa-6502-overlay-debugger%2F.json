{"pubDate": "2023-08-18T23:00:08", "original_title": "A 6502 Overlay Debugger", "link": "https://hackaday.com/2023/08/18/a-6502-overlay-debugger/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/08/bug-feature.png", "original_content": "Retired hardware engineer [Plasmode] recently took on the challenge of building a debugger for the 6502 designed to sit atop the microprocessor while seated in a solder less breadboard. The result is the Diagnostic Overlay for W65C02 Breadboard, consisting of 128 kB SRAM and a 1250-gate CPLD. Except being 0.8 in wide, the overlay debugger is otherwise the same size as the 6502s 40-pin DIP package, so it doesnt overhang other portions of your circuit.\nBeing an initial concept prototype, [Plasmode] mounted the chips dead-bug style on perf board  a process he himself found tiring. If he builds additional debuggers, presumably he will consider making a PCB.\nThe prototype was constructed using point-to-point soldering with 30-ga wire wrap wire.\u00a0 It was all done under the inspection microscope.\u00a0 There are not many connections, but they are rather tedious so I can only do a dozen or so wires per session.\u00a0 It took me 2 days and several hours total to finish the prototype board.\nThis design is based on the\u00a0CRC65 Frugal 6502 Single Board Computer, of course omitting the 6502 itself. Instead of a physical ROM memory chip, he implemented a 64-byte boot loader inside the CPLD and a serial port. This lets him to bootstrap the system over the serial port. He plans on expanding this to include other DIP-packaged retro microprocessors in the future. Check out his Hackaday.io project page ( above ). If you want to dig deeper, he posted the schematics here.", "title": "\"6502\u7528\u30c7\u30d0\u30c3\u30ac\u30fc\u3092\u4f5c\u6210\u3001\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u5bfe\u5fdc\"", "body": "\u96fb\u5b50\u5de5\u5b66\u8005\u304c\u3001\u30de\u30a4\u30af\u30ed\u30d7\u30ed\u30bb\u30c3\u30b5\u4e0a\u306b\u4e57\u305b\u308b\u305f\u3081\u306e\u30c7\u30d0\u30c3\u30ac\u3092\u4f5c\u6210\u3002128kB\u306eSRAM\u30681250\u30b2\u30fc\u30c8\u306eCPLD\u3092\u4f7f\u7528\u3057\u3001DIP\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u540c\u3058\u30b5\u30a4\u30ba\u3067\u4ed6\u306e\u56de\u8def\u3092\u59a8\u3052\u306a\u3044\u3002\u521d\u671f\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3067\u3042\u308a\u3001\u4eca\u5f8c\u306fPCB\u3092\u691c\u8a0e\u3059\u308b\u3002\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u3084\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3001\u4ed6\u306e\u30ec\u30c8\u30ed\u30de\u30a4\u30af\u30ed\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u62e1\u5f35\u3082\u4e88\u5b9a\u3002", "titles": ["\"6502\u7528\u30c7\u30d0\u30c3\u30ac\u30fc\u3092\u4f5c\u6210\u3001\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u5bfe\u5fdc\"", "\"128kB SRAM\u30681250\u30b2\u30fc\u30c8CPLD\u3092\u4f7f\u7528\u3057\u305fW65C02\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u8a3a\u65ad\u30aa\u30fc\u30d0\u30fc\u30ec\u30a4\"", "\"\u30c7\u30c3\u30c9\u30d0\u30b0\u30b9\u30bf\u30a4\u30eb\u3067\u306e\u30c1\u30c3\u30d7\u306e\u53d6\u308a\u4ed8\u3051\u3001\u8ffd\u52a0\u306e\u30c7\u30d0\u30c3\u30ac\u30fc\u3067\u306fPCB\u3092\u691c\u8a0e\"", "\"CRC65 Frugal 6502\u30b7\u30f3\u30b0\u30eb\u30dc\u30fc\u30c9\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u57fa\u306b\u8a2d\u8a08\u3001\u65b0\u305f\u306a\u30de\u30a4\u30af\u30ed\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u62e1\u5f35\u3082\u4e88\u5b9a\"", "\"Hackaday.io\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30da\u30fc\u30b8\u3067\u8a73\u7d30\u3092\u78ba\u8a8d\u3001\u56de\u8def\u56f3\u3082\u516c\u958b\""]}