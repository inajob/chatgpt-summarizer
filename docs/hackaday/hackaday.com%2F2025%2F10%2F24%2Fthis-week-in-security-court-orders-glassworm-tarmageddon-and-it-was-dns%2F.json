{"pubDate": "2025-10-24T14:00:22", "original_title": "This Week in Security: Court Orders, GlassWorm, TARmageddon, and It was DNS", "link": "https://hackaday.com/2025/10/24/this-week-in-security-court-orders-glassworm-tarmageddon-and-it-was-dns/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "This week, a US federal court has ruled that NSO Group is no longer allowed to use Pegasus spyware against users of WhatsApp. And for their trouble, NSO was also fined $4 million. Its unclear how much this ruling will actually change NSOs behavior, as it intentionally stopped short of applying to foreign governments.\nThere may be an unexpected source of leverage the US courts can exert over NSO, with the news that American investors are acquiring the company. Among the requirements of the ruling is that NSO cannot reverse engineer WhatsApp code, cannot create new WhatsApp accounts, and must delete any existing WhatsApp code in their possession. Whether this actually happens remains to be seen.\n\nPoints On the Curve\nCryptography is hard. Your implementation can do everything right, and still have a weakness. This was demonstrated yet again in the Cloudflare CIRCL cryptography library. The issue here is a Diffie-Hellman scheme using the Curve4Q elliptic curve.\nQuick review: Diffie-Hellman is a technique where Bob and Alice can exchange public keys, and each combine the received public key with their own private key, and arrive at a shared secret. This can be accomplished on an elliptic curve by choosing a scalar value as a private key, and multiplying a standard generator point by that scalar to derive a new point on the curve, which serves as the public key. After the public key points are exchanged, Alice and Bob each multiply the received public point by their own secret scalar. Just like simple multiplication, this function is commutative, and results in the same answer for both.\nThere is a catch that can cause problems. Not every value is a valid point on the curve, and doing calculations on these invalid points can lead to unusual results. The danger here isnt remote code execution (RCE), but leaking information about the private key when doing an invalid calculation using these invalid points.\nThe CIRCL library had a couple instances where invalid points could be used. Theres a quirk of deserializing FourQ points, that the x value can be interpreted two ways, essentially a positive or negative x. The CIRCL logic attempts to deserialize an incoming point in one way, and if that point is not actually on the curve, the value is inverted (technically conjugated), and the new point is accepted without testing. There were a few other similar cases where points werent being validated. These flaws were reported to Cloudflare and fixed earlier this year.\nGlassWorm\nWe recently covered Shai Hulud, an npm worm that actively uploaded itself into other npm libraries when it found valid credentials on compromised computers. It was something of a sea change in the world of library security. Now a month later, we have GlassWorm, a vscode extension worm.\nGlassWorm combines several very sneaky techniques. When it injects code into an extension, that code is hidden with Unicode shenanigans, rendering in VSCode as blank lines. Once this malicious VSCode extension is loaded, it reaches out to some interesting Command and Control (C2) infrastructure: The Solana blockchain is used as a sort of bulletproof DNS, hosting a a C2 IP address. Theres a second, almost equally weird C2 mechanism: Hosting those IP addresses in entries on a public Google Calendar.\nOnce this malware is running, it harvests credentials, and if it gets a chance, injects itself in the code for other extensions and tries to publish. And it also turns the compromised machine into a Zombi, part of a botnet, but also working as a RAT (Remote Access Trojan). All told, its really nasty malware, and seems to indicate a shift towards these meta-worms that are intended to infiltrate Open Source software repositories.\nSpeaking of npm, GitHub has begun making security enhancements in response to the Shai Hulud worm. It looks like good changes, like the deprecation of classic access tokens, in favor of shorter lived, granular tokens. TOTP (Time based One Time Password) is going away as a second factor of authentication, in favor of passkeys and similar. And finally, npm is encouraging the use of doing away with long-lived access tokens altogether, and publishing strictly from CI/CD systems.\nTARmageddon\nWeve cheered on the progress of the Rust language and its security wins, particularly in the realm of memory safety. But memory management is not the only cause of security issues. The async-tar rust package had a parsing bug that allowed a .tar file to smuggle additional contents that were not seen by the initial validation step.\nThat has all sorts of potential security ramifications, like smuggling malicious files, bypassing filters, and more. But whats really interesting about this particular bug is that its been around since the first release of the package, and async-tar has been forked into many other published packeges, some of which are in use but no longer maintained. This has turned what should have been a simple fix into a mess, and the popular tokio-tar is still unfixed.\nIt Was DNS\nYou probably noticed that the Internet was sort of a dumpster fire on Monday  more than normal. Most of the world, it seems, runs on Amazons AWS, and when AWS goes down, its surprising what else fails. There were the normal sites and services down, like Reddit, Signal, Fortnight, and Prime Video. It was a bit of a surprise that some banks were down and flights delayed. And then there were IoT devices, like smart beds, litter boxes, and smart bulbs.\nAnd the problem, naturally, was DNS. Its always DNS. Specifically, Amazon has pinned the outage on a latent race condition in the DynamoDB DNS management system that resulted in an incorrect empty DNS record. This bad record brought down other services that relied on it, and it didnt take long for the problem to spin out of control.\nBits and Bytes\nTheres even more DNS, with [Dan Kaminsky]s infamous cache poisoning making an unwelcome comeback. DNS has historically run over UDP, and the Kaminsky attack was based on the lack of authorization in DNS responses. The solution was to randomize the port a request was sent from, requiring the matching response be delivered to the same port number. Whats new here is that the Pseudo Random Number Generator (PRNG) in BIND has a weakness, that could have allowed predicting those values.\nTP-Links Omada gateways had a pair of vulnerabilities that allowed for RCE. The more serious of the two didnt require any authentication. Noword on whether this flaw was accessible from the WAN interface by default. Patched firmware is now available.\nThe better-auth library patched an issue early this month, that allowed the createApiKey endpoint to run without authRequired set true, simply by providing a valid user ID. This bug has been in the library ever since API keys were added to the project. The fix landed in 1.3.26.\nAnd for bonus points, go check out the ZDI post on Pwn2Own Ireland, that just wrapped. There were lots of IoT hacks, including at least one instance of Doom running on a printer. Summoning Team took the Master of Pwn award, nearly doubling the points earned by second place. Congrats!", "title": "NSO\u30b0\u30eb\u30fc\u30d7\u3001WhatsApp\u306b\u5bfe\u3059\u308b\u30b9\u30d1\u30a4\u30a6\u30a7\u30a2\u4f7f\u7528\u7981\u6b62\u3068420\u4e07\u30c9\u30eb\u306e\u7f70\u91d1", "body": "NSO\u30b0\u30eb\u30fc\u30d7\u304cWhatsApp\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3059\u308b\u30b9\u30d1\u30a4\u884c\u70ba\u7981\u6b62\u306b\u30024\u767e\u4e07\u30c9\u30eb\u306e\u7f70\u91d1\u3082\u8ab2\u305b\u3089\u308c\u308b\u3002", "titles": ["NSO\u30b0\u30eb\u30fc\u30d7\u3001WhatsApp\u306b\u5bfe\u3059\u308b\u30b9\u30d1\u30a4\u30a6\u30a7\u30a2\u4f7f\u7528\u7981\u6b62\u3068420\u4e07\u30c9\u30eb\u306e\u7f70\u91d1", "Cloudflare\u306eCIRCL\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u304a\u3051\u308bDiffie-Hellman\u306e\u8106\u5f31\u6027\u3068\u7121\u52b9\u70b9\u306e\u30ea\u30b9\u30af", "GlassWorm\uff1aVSCode\u62e1\u5f35\u6a5f\u80fd\u3092\u6a19\u7684\u306b\u3059\u308b\u65b0\u305f\u306a\u30de\u30eb\u30a6\u30a7\u30a2", "Rust\u8a00\u8a9e\u306easync-tar\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5b58\u5728\u3059\u308b\u30d0\u30b0\u304c\u3082\u305f\u3089\u3059\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af", "Amazon\u306eDNS\u969c\u5bb3\u304c\u5f15\u304d\u8d77\u3053\u3057\u305f\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u6df7\u4e71\u3068\u305d\u306e\u5f71\u97ff"]}