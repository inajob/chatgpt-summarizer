{"pubDate": "2025-07-10T17:00:17", "original_title": "Personal Reflections on Immutable Linux", "link": "https://hackaday.com/2025/07/10/personal-reflections-on-immutable-linux/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/07/linux_immutable_feat.png", "original_content": "Immutable distributions are slowly spreading across the Linux world but should you care? Are they hacker friendly? What does immutable mean, anyway? \nImmutable means not subject or susceptible to change according to Merriam-Webster, which is not 100% accurate in this context, but its close enough and the name is there so were stuck with it. Immutable distributions are subject to change, its just that how you change them is quite a bit different than bog-standard Linux. Will this matter to you? Read on to find out! (Or, if you know the answers already, read on to find out how angry you should be in the comments section.)\nImmutability is cloud-based thinking: the system has a known-good state, and its always in it. Everything that is not part of the core system is containerized and controlled. I\u2019m writing this from a KDE-based distribution called Aurora, part of the Universal Blue project that builds on Fedora\u2019s Atomic Desktop work. It bills itself as being for \u201clazy developers\u201d. \nThe advantage to this hypothetical lazy dev is that the base system is already built, and you can\u2019t get distracted messing around with it. It works, and it isn\u2019t at all likely to break. Every installation is essentially identical to every other installation, which means reproducibility is all but guaranteed. No more faffing about arguing on forums to figure out which library is conflicting with which. In an immutable system, they\u2019ve all been selected to play well together, and anything else is safely containerized. (Again, a cloud ideal.) If the devs make a mistake during an update, well, just roll back!\u00a0\n50 Shades of Immunability\nThe different flavours of immutable linux differ in how they accomplish that, but all have rollbacks as a basic capability. Each change to the system becomes a new, indivisible image; that\u2019s why we talk about atomic updates. You create a new system image when you update, but you don\u2019t start using it until you reboot the system. (This has some advantages to stability, as you might imagine, although the rebooting can get old.) The old image is maintained on your system, just in case you happen to need it.\nMicroOS and its descendants (like Aeon) use a system based on BRTFS snapshots to provide rollbacks. Fedora\u2019s atomic desktops, like Silverblue, and the Universal Blue downstreams that are based on Fedora like Bazzite or Aurora use a system called OSTree, which is considerably more complex and more interesting. You can do something similar with Nix, of course, but that is a whole other kettle of fish.\nOSTree bills itself as \u201cGit for operating system binaries\u201d. Every update, or every package installed is layered onto the tree and can be rolled back if needed\u2013 en masse, or individually. You can package up that tree of commits, and deploy it onto a new system, making devising new \u201cdistros\u201d so trivial they don\u2019t really deserve the name. In theory, you can install everything via OSTree, but the further you take your system from the base image, the less you have that \u201cevery system is identical\u201d easy-problem-solving that the immutable guys like to talk about.\u00a0\nOf course you do want to install applications, and you do it the same way you might on a server: in containers. What sort of containers can vary by taste, but typically that means Flatpak for GUI applications. Fedora-based immutable distributions like Silverblue or Aurora use Flatpak, as does OpenSuse. (AppImage and snap are also options, technically speaking, but who likes snaps?) The Universal Blue team adds in Homebrew for those terminal applications that don\u2019t tend to get Flatpaks. I admit that I was surprised at first to see Homebrew when I started using Aurora, since I knew it as \u201cthe missing package manager for MacOS\u201d but its inclusion makes perfect sense when you think about it.\u00a0\nMacOS is the First Immutable UNIX\nMacOS, you see, is the first immutable UNIX. As much as we in the Linux community don\u2019t like to talk about it, Macs aren\u2019t just POSIX compatible\u2013 they run Certified UNIX(). And Curputino has been moving towards this \u201cimmutable\u201d thing for a long time, until Catalina finally sealed the system folders away completely on a read-only volume. Updates for MacOS also come as snapshots to replace that system volume\u2013 you could certainly call them \u201catomic\u201d. Since the system volume is locked down, traditional package managers won\u2019t be able operate. Homebrew was created to solve that problem. It works just as well on a Linux system that has the same lockdown applied to its system folders.\nIf Homebrew isnt your cup of tea \u2013 and it seems to not be everyones, since I think Universal Blue is the only distro set to ship with it \u2013 you can go more hard-core into containerization with docker or podman. Somewhere in between, you could use something like Distrobox. If you haven\u2019t heard of it, Distrobox is a framework for deploying traditional linux systems inside containers. For devs, it\u2019s great for testing, even if you aren\u2019t basing it on top of an immutable distribution. If you\u2019ve never worked in the cloud, this may all sound like rube-goldberg gobbbly-gook, (\u201clinux in a box on my linux!?\u201d) but once you adapt to it, it\u2019s not so bad.\nThe Year of Immutable on the Desktop?\nThe question is: do you want to adapt to it? Is cloud-based thinking necessary on the desktop? Well I\u2019d say it depends on who is using the desktop. I would absolutely steer Windows users who are thinking of switching to Linux in the wake of the Windows 10 EOL to a Universal Blue distribution, and probably Aurora since KDE is more windows-y than Gnome. Most of those ex-Windows users are people who just want to use a computer, not play with it. If that describes you, then maybe an immutable distribution could be to your liking.\nMacOS has shown that very few desktop users will ever notice if they can access the system folders or not; they are most interested in having a stable, reproducible environment to work in. Thus, immutable Linux may be the way to bring Linux mainstream \u2013 certainly Steam thinks so, with SteamOS. For their use case, it\u2019s hard to argue the benefits: you need a stable base system for the stack of cards that is gaming on Linux, and tech support is much simplified for a locked-down operating system that you cannot install packages on. The rising popularity of Bazzite, Universal Blue\u2019s gaming-centric distribution, also speaks to this. \nThere are downsides to this kind of system, of course, and it is important to recognize that. Some people really, really hate containerization because Flatpaks, and other similar options, use more memory, both on disk and in RAM. Of course not everything is available as a Flatpak, or on Homebrew if the system uses that. If you want to use Toolbox or Distrobox to get a distro-specific set of packages, well, of course running a whole extra Linux system in a container is going to have overhead.\u00a0\nFrom an aesthetic perspective, it\u2019s not as elegant as a traditional Linux environment, at least to some eyes, mine included. Those of us who switched to Linux because we wanted absolute control over our computers might not feel too great about the \u201cdo not touch\u201d label implicitly scrawled across the system folders, even if we do get something like rpm-ostree to make changes with. Even with a package manager, there are customizations and tweaks you simply cannot make on a read-only system.\u00a0 For those of us who treat Linux as a hobby, that\u2019s probably a no-go.\u00a0\nFor the \u201cLazy Developer\u201d Aurora sells itself to, well, that\u2019s perhaps a different story. Speaking of lazy, I\u2019ve been using Aurora for a few months now, almost in spite of myself. I initially loaded it as the last step on a distro-hopping jaunt to see if I could find a good Windows 10 replacement for my parents. (I think this is it, to be honest.) It\u2019s still on my main laptop simply because it\u2019s so unobtrusively out of the way that I can think of no reason to install anything else.\nAt some point that may change, and when it does I might just overcorrect and do a Linux From Scratch build or try out like NixOS like I\u2019ve been meaning to. Something like that would let me regain the sense of agency I have forfeited to the Universal Blue dev team while running Aurora. (There have been times where I can feel the ghostly hand of an imaginary sysadmin urging me not to mess with my own system.)\u00a0\nAfter seeing how well containerization can work on desktop, Nix looks extra appealing \u2013 it can do most of what this article talks about with the immutable distros, but without trusting configuration of any facet of the system to anyone else. What do you think? Are the touted benefits to stability, reproducibility, and security worth the hassle of an immutable distribution? Is the grass greener in the land of Nix? If you\u2019ve tried one of the immutable Linux distributions out there, we\u2019d love to hear what you think in the comments."}