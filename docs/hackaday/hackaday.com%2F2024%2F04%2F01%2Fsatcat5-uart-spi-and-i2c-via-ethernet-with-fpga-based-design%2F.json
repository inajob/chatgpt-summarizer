{"pubDate": "2024-04-01T18:00:31", "original_title": "SatCat5: UART, SPI and I2C via Ethernet With FPGA-Based Design", "link": "https://hackaday.com/2024/04/01/satcat5-uart-spi-and-i2c-via-ethernet-with-fpga-based-design/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/03/satcat5_fpga_layout.jpg", "original_content": "Arty A7-based prototype of SatCat5 with custom switch I/O board. (Credit: The Aerospace Corporation)\nTo the average microcontroller, Ethernet networks are quite a step up from the basic I2C, SPI and UART interfaces, requiring either a built-in Ethernet MAC or SPI-based MAC, with tedious translation between Ethernet and those other interfaces. Yet what if this translation could be done automatically and transparently?\u00a0 This is what the SatCat5 FPGA-based project by [The Aerospace Corporation] aims to provide: a gateway akin to an unmanaged Ethernet switch that also supports those non-Ethernet links. Recently they answered a range of questions about the project on Hacker News.\nThe project name comes from the primary target audience: smallsat and cubesat developers, which is an area where being able to route more traffic over a common Ethernet-based bus is a major boon. The provided Xilinx Artix-7-based reference design (pictured) gives a good idea of how it can be used: it combines an Arty A7 development board with a custom PCB containing an Ethernet switch IC (SJA1105), TJA1100 transceiver, two RJ45 jacks and four PMOD connectors, here connected to two UARTs for bidirectional communication between them. Ethernet frame encapsulation is provided using the standard Serial Line Internet Protocol (SLIP), with more details covered in the FAQ. At a minimum an FPGA like a Lattice iCE40 is required, with an MCU capable of using the provided C++ libraries, or a custom implementation.\nThanks to [STR-Alorman] for the tip.", "title": "\u81ea\u4f5c\u30b9\u30a4\u30c3\u30c1 I/O \u30dc\u30fc\u30c9\u3092\u6301\u3064SatCat5\u306eArty A7\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7", "body": "SatCat5\u306f\u3001\u81ea\u4f5c\u306e\u30b9\u30a4\u30c3\u30c1I/O\u30dc\u30fc\u30c9\u3092\u5099\u3048\u305fArty A7\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3002Ethernet\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u975eEthernet\u30ea\u30f3\u30af\u3092\u81ea\u52d5\u304b\u3064\u900f\u904e\u7684\u306b\u7ffb\u8a33\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3001\u5c0f\u578b\u885b\u661f\u306e\u958b\u767a\u8005\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u3002Xilinx Artix-7\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30c7\u30b6\u30a4\u30f3\u3092\u63d0\u4f9b\u3002", "titles": ["\u81ea\u4f5c\u30b9\u30a4\u30c3\u30c1 I/O \u30dc\u30fc\u30c9\u3092\u6301\u3064SatCat5\u306eArty A7\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7", "\u5c0f\u578b\u885b\u661f\u958b\u767a\u8005\u5411\u3051\u306eArty A7\u30d9\u30fc\u30b9\u306eSatCat5\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "Ethernet\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7528\u306e\u900f\u904e\u7684\u306a\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\uff1aSatCat5 FPGA\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "Arty A7\u958b\u767a\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u305fSatCat5\u306eXilinx Artix-7\u30d9\u30fc\u30b9\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30c7\u30b6\u30a4\u30f3", "FPGA\u3068\u30ab\u30b9\u30bf\u30e0PCB\u3092\u4f7f\u7528\u3057\u305fEthernet\u30b9\u30a4\u30c3\u30c1\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff1aSatCat5"]}