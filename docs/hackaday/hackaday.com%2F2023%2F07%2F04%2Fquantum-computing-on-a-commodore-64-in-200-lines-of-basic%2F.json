{"pubDate": "2023-07-04T23:00:12", "original_title": "Quantum Computing on a Commodore 64 in 200 Lines of BASIC", "link": "https://hackaday.com/2023/07/04/quantum-computing-on-a-commodore-64-in-200-lines-of-basic/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/quantum_computing_commodore_64.jpeg", "original_content": "The term quantum computer gets usually tossed around in the context of hyper-advanced, state-of-the-art computing devices, but much as how a 19th century mechanical computer, a discrete computer created from individual transistors, and a human being are all computers, the important quantifier is how fast and accurate the system is at the task, whether classical or quantum computing. This is demonstrated succinctly by [Davide dakk Gessa] with 200 lines of BASIC code on a Commodore 64 (GitHub), implementing a range of quantum gates.\nMuch like a transistor in classical computing, the qubit forms the core of quantum computing, and we have known for a long time that a qubit can be simulated, even on something as mundane as an 8-bit MPU. Ergo [Davide]s simulations of various quantum gates on a C64, ranging from Pauli-X, Pauli-Y, Pauli-Z, Hadamard, CNOT and SWAP, all using a two-qubit system running on a system that first saw the light of day in the early 1980s.\nNaturally, the practical use of simulating a two-qubit system on a general-purpose MPU running at a blistering ~1 MHz is quite limited, but as a teaching tool its incredibly accessible and a fun way to introduce people to the world of quantum computing."}