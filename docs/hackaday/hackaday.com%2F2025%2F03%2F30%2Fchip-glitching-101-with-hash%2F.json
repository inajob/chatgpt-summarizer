{"pubDate": "2025-03-30T08:00:45", "original_title": "Chip Glitching 101 with [Hash]", "link": "https://hackaday.com/2025/03/30/chip-glitching-101-with-hash/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/03/glitching.jpeg", "youtube": "https://www.youtube.com/watch?v=IOD5voFTAz8", "original_content": "Ever want to get into reverse engineering but dont know where to start? Youre in luck  [Hash] just dropped a case study in chip glitching that should get you off on the right foot.\nThe object of this reverse engineering effort in the video below is a Microchip SAM4C32C, removed from one of the many smart electrical meters [Hash] loves to tear into. This microcontroller was supposed to be locked to prevent anyone from sniffing around in the code, but after soldering the chip to a target board and plugging it into a Chip Whisperer, [Hash] was able to find some odd-looking traces on the oscilloscope. Of particular interest was an unusual pattern on the scope while resetting the chip, which led him to an AI-assisted search for potential vulnerabilities. This allowed him to narrow down the target time for a power glitch, and in only a few seconds, the chip was forced to bypass its security bit and drop into its boot loader. With the keys to the kingdom, [Hash] was able to read the firmware and find all sorts of interesting tidbits.\nObviously, chip glitching isnt always as easy as this, and even when a manufacturer leaves a vector like this in the chip, exploiting it does take some experience and finesse. But, if youre going to get started glitching, it makes sense to start with the low-hanging fruit, and having [Hash] along for the ride doesnt hurt either.\n\n", "title": "- \u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u5165\u9580\uff1a\u30c1\u30c3\u30d7\u30b0\u30ea\u30c3\u30c1\u30f3\u30b0\u306e\u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3", "body": "\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306e\u624b\u6cd5\u3068\u3057\u3066\u3001\u30c1\u30c3\u30d7\u30b0\u30ea\u30c3\u30c1\u30f3\u30b0\u306e\u4e8b\u4f8b\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002", "titles": ["- \u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u5165\u9580\uff1a\u30c1\u30c3\u30d7\u30b0\u30ea\u30c3\u30c1\u30f3\u30b0\u306e\u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3", "- Microchip SAM4C32C\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u7834\u308b\u65b9\u6cd5", "- \u30b9\u30de\u30fc\u30c8\u30e1\u30fc\u30bf\u30fc\u304b\u3089\u5b66\u3076\u30c1\u30c3\u30d7\u306e\u8106\u5f31\u6027", "- AI\u3092\u6d3b\u7528\u3057\u305f\u30c1\u30c3\u30d7\u30b0\u30ea\u30c3\u30c1\u30f3\u30b0\u306e\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1", "- \u521d\u5fc3\u8005\u306b\u304a\u3059\u3059\u3081\u306e\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u6280\u8853"]}