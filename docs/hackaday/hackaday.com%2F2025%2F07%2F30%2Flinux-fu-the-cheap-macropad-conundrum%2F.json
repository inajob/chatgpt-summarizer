{"pubDate": "2025-07-30T14:00:33", "original_title": "Linux Fu: The Cheap Macropad Conundrum", "link": "https://hackaday.com/2025/07/30/linux-fu-the-cheap-macropad-conundrum/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "You can get cheap no-brand macropads for almost nothing now. Some of them have just a couple of keys. Others have lots of keys, knobs, and LEDs. You can spring for a name brand, and itll be a good bet that it runs QMK. But the cheap ones? Get ready to download Windows-only software from suspicious Google Drive accounts. Will they work with Linux? Maybe.\nOf course, if you dont mind the keypad doing whatever it normally does, thats fine. These are little more than HID devices with USB or Bluetooth. But what do those keys send by default? You will really want a way to remap them, especially since they may just send normal characters. So now you want to reverse engineer it. Thats a lot of work. Luckily, someone already has, at least for many of the common pads based around the CH57x chips.\n\nOpen Source Configuration\nThanks to [Mikhail Trishchenkov], you can use a nice Linux tool to easily configure your macropad. You can build it from source, or get built versions for Linux, Windows, and Mac. The whole thing is written in Rust if you want to take it apart or modify it.\nThe configuration might not make GUI users happy, but most Linux users are just fine with editing a yaml file. The software works with lots of different pads, so you do have to explain what you have first. Then you can explain what you want.\nThe yaml file has several keys of interest (documented in the sample file):\n\norientation  You can ask the software to treat the pad in its normal orientation or rotated 90, 180, or 270 degrees. This only matters because it is nice to lay out the keys in the right order and you want the knobs clockwise and counterclockwise directions to make sense. Of course, you can do the mental gymnastics to set it up however you like, but this makes it easier.\nrow, columns  Different pads have different number of rows and columns. Note that this doesnt respect your Orientation setting. So if you put any knobs to the left, the horizontal keys are the columns and the vertical keys are the rows.\nknobs  Your pad may have knobs. Count them here.\nlayers  You define multiple layers here (but at least one). The cheaper pads only support one layer, but the nicer ones have a pushbutton and LEDs that let you cycle through a few layers of different key definitions.\nbuttons  Inside a layer, you can have a bunch of key names in brackets. Depending on the orientation, there will be one set of brackets for each column or one set for each row.\nknobs  Also inside a layer, you can define what happens on ccw, cw, and press events for each button.\n\nThe Key\nThe key names are generally characters (2 or d) but can also be names of keys like play or ctrl-x.\u00a0 You can set up multiple keys (a+b) and there are mouse events like click and wheeldown.\nYou can probably guess most keys, but if in doubt, call the configuration with the show-keys argument to get a list.\nI renamed the program to macropad-tool. (ch57x-keyboard-tool was too much to type.)\u00a0 I didnt realize at the time that there was another program that should work with the same pad that already uses that name.\nWhen you have a yaml file ready, you can verify it and then, if it went well, upload it:\nmacropad-tool validate myconfig.yaml\nmacropad-tool upload myconfig.yaml\nThats It?\nThats mostly it. There were only a few problems. First, you need to reinitialize the macropad each time. Second, you probably need to be root to write to the device, which is less than handy. You probably want to do more than just keystrokes. For example, you want to have the top left button bring up, for example, Gimp. As a stretch goal, my macropad didnt support layers, and even if it did, it isnt handy to have to push a little button to change them. I set out to fix that  sort of.\nLast Problem First\nThe KDE keyboard shortcut dialog can read the keys and make them do actions.\nAt first, I thought it would be easy to map things since I use KDE. I set the keypad up to generate F13-F25, keys you dont normally have on most keyboards. It worked, but apparently my setup sees these keycodes as other special characters that are already mapped to things. I could have fixed it, but I decided to go a different direction.\nThe likelihood that you would bind something to Control+Alt+Shift+ is small. Generally, only a few odd and dangerous keystrokes use this because it takes a lot of dexterity to press all those keys.\nBut the macropad doesnt care. So I set up the first key to be Control+Alt+Shift+A, followed by Control+Alt+Shift+B, and so on. Now, I can easily use the KDE keyboard shortcuts from the control panel to catch those keys and do things like launch a shell, change desktops, or whatever.\nAll the Rest\nAll the other problems hinge on one thing: it is hard to run the command to initialize the macropad unless you are root. If you had a simple command to set it up, you could easily run it on startup or at any time you wanted to reinitalize the macropad.\nIn addition, you could bind a key to run the configuration tool to change configurations to make a poor version of layers. Sure, there would be no indication of what layer you were in, but you could fix that a different way (for example, status text on the taskbar). While not ideal, it would be workable.\nSo how do we get a simple command that can easily load the macropad? There are a few choices. You could have a script owned by root that is sticky. That way, users could run it, but it could become root to configure the keyboard.\nI decided to go a slightly different way. I put the tool in /usr/local/bin and the yaml files in /usr/local/share/macropad, which I created. Then I created a script. Youll probably want to modify it.\nThe script calls the keypad loader with sudo. But the sudo will just prompt you, right? Well, yes. So you could make an entry in /etc/sudoers.d/99-macropad:\n\u00a0alw ALL=(ALL) NOPASSWD: /usr/local/bin/macropad-tool\nNow you, or the script on your behalf, can run the tool with sudo and not provide a password. Since a normal user cant change /usr/local/bin/macropad or /usr/local/bin/macropad-tool, this is reasonable.\nIf you prefer, you could write a udev rule to match the USB IDs of your macropad and set the permissions. Something like this:\nATTRS{idProduct}==\"8840\", ATTRS{idVendor}==\"1189\", MODE=\"666\", GROUP=\"users\"\nIf you change the permissions, change the script to not use sudo. And, of course, change the product and vendor IDs to suit your macropad, along with your group, if you need something different. However, thats probably the best option.\nFake Layers\nSince the script allows you to define different layers, you can make a switch change the layer configuration by simply running the script with a given argument on a key press. A hack, but it works. Obviously, each layer will need its own fake keys unless they provide the same function. The file /tmp/macropad-current-layer tracks the current layer, which you can show with something like a command output plasmoid.\nArrange for the script to load on startup using your choice of /etc/rc.local, systemd, or even a udev rule. Whatever you like, and that takes care of all your problems.\nDid we mention how cheap these are? Good thing, because you can easily roll your own and put some good software on it like QMK.", "title": "- \u5b89\u4fa1\u306a\u30de\u30af\u30ed\u30d1\u30c3\u30c9\u306e\u9078\u3073\u65b9\u3068\u8a2d\u5b9a\u6cd5", "body": "\u5b89\u4fa1\u306a\u30de\u30af\u30ed\u30d1\u30c3\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306eLinux\u30c4\u30fc\u30eb\u306e\u89e3\u8aac\u3002HID\u30c7\u30d0\u30a4\u30b9\u3067\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084\u30ec\u30a4\u30e4\u30fc\u8a2d\u5b9a\u3082\u53ef\u80fd\u3002", "titles": ["- \u5b89\u4fa1\u306a\u30de\u30af\u30ed\u30d1\u30c3\u30c9\u306e\u9078\u3073\u65b9\u3068\u8a2d\u5b9a\u6cd5", "- Linux\u3067\u4f7f\u3048\u308b\u30de\u30af\u30ed\u30d1\u30c3\u30c9\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u8a2d\u5b9a\u30c4\u30fc\u30eb", "- \u304a\u624b\u9803\u4fa1\u683c\u306e\u30de\u30af\u30ed\u30d1\u30c3\u30c9\u3092\u81ea\u5206\u597d\u307f\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5", "- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u99c6\u4f7f\u3057\u3066\u30de\u30af\u30ed\u30d1\u30c3\u30c9\u3092\u6700\u9069\u5316\u3059\u308b", "- \u30de\u30af\u30ed\u30d1\u30c3\u30c9\u521d\u5fc3\u8005\u5411\u3051: \u69d8\u3005\u306a\u6a5f\u80fd\u3092\u5f15\u304d\u51fa\u3059\u8a2d\u5b9a\u30ac\u30a4\u30c9"]}