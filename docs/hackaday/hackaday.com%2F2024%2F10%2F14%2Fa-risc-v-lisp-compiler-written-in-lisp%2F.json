{"pubDate": "2024-10-15T02:00:47", "original_title": "A RISC-V LISP Compiler\u2026Written In Lisp", "link": "https://hackaday.com/2024/10/14/a-risc-v-lisp-compiler-written-in-lisp/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/04/risc5-esp32-c3-thumbnail.jpg", "original_content": "Ah, Lisp, the archaic language that just keeps on giving. You either love or hate it, but youll never stop it. [David Johnson-Davies] is clearly in the love it camp and, to that end, has produced a fair number of tools wedging this language into all kinds of nooks and crannies. The particular nook in question is the RISC-V ISA, with their Lisp-to-RISC-V compiler. This project leads on from their RISC-V assembler by allowing a Lisp function to be compiled directly to assembly and then deployed as callable, provided you stick to the supported language subset, that is!\nThe fun thing is\u2014you guessed it\u2014its written in Lisp. In fact, both projects are pure Lisp and can be run on the uLisp core and deployed onto your microcontroller of choice. Because who wouldnt want to compile Lisp on a Lisp machine? To add to the fun, [David] created a previous project targeting ARM, so youve got even fewer excuses for not being able to access this. If youve managed to get your paws on the new Raspberry Pi Pico-2, then you can take your pick and run Lisp on either core type and still compile to native.\nThe Lisp-Risc-V project can be found in this GitHub repo, with the other tools easy enough to locate.\nWe see a fair few Lisp projects on these pages. Heres another bare metal Lisp implementation using AVR. And how many lines of code does it take to implement Lisp anyway? The answer is 42 200 lines of C, to be exact.", "title": "RISC-V ISA\u5411\u3051Lisp\u30b3\u30f3\u30d1\u30a4\u30e9\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "body": "Lisp\u8a00\u8a9e\u306e\u611b\u597d\u8005\u3067\u3042\u308bDavid Johnson-Davies\u6c0f\u304cRISC-V ISA\u5411\u3051\u306eLisp-to-RISC-V\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u958b\u767a\u3002Raspberry Pi Pico-2\u3067\u3082\u52d5\u4f5c\u53ef\u80fd\u3002AVR\u30d9\u30a2\u30e1\u30bf\u30ebLisp\u5b9f\u88c5\u3082\u7d39\u4ecb\u3002Lisp\u306e\u5b9f\u88c5\u306b\u306f\u7d0442,200\u884c\u306eC\u30b3\u30fc\u30c9\u304c\u5fc5\u8981\u3002GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u516c\u958b\u4e2d\u3002", "titles": ["RISC-V ISA\u5411\u3051Lisp\u30b3\u30f3\u30d1\u30a4\u30e9\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "uLisp\u30b3\u30a2\u3067\u52d5\u4f5c\u3059\u308bLisp\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "ARM\u3068RISC-V\u5411\u3051Lisp\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "\u30e9\u30ba\u30d9\u30ea\u30fc\u30d1\u30a4Pico-2\u3067\u5b9f\u884c\u53ef\u80fd\u306aLisp\u30b3\u30f3\u30d1\u30a4\u30e9", "AVR\u5411\u3051\u306eBare metal\u306aLisp\u5b9f\u88c5"]}