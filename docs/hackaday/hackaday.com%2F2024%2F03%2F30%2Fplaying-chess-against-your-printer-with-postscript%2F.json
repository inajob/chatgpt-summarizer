{"pubDate": "2024-03-31T05:00:41", "original_title": "Playing Chess Against Your Printer, with PostScript", "link": "https://hackaday.com/2024/03/30/playing-chess-against-your-printer-with-postscript/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/03/pschess-header.png", "original_content": "Can you play chess against your printer? The answer will soon be yes, and its thanks to [Nicolas Seriot]s PSChess. Its a chess engine implemented in PostScript, of all things. Its entirely working except for one last hurdle, but more on that in a moment.\nWhats it like to play PSChess? Currently, one uses a PostScript interpreter (such as GhostScript) to run it, much like one would use the Python interpreter to run Python code. The user inputs moves by typing in commands like d2d4 (representing a pieces source coordinate and a destination coordinate on the 2D board). Then the program makes a move, and outputs an updated board state to both the console and a PDF document. Then its the users turn again, and so on until somebody loses.\nThe chess parts are all working, but theres one last feature in progress. The final step of the project is to enable PSChess to be run directly on a printer instead of using GhostScript as the interpreter. Intrigued? You can find the code at the projects GitHub repository.\nSo why PostScript? While it is a Turing-complete stack-based interpreted language, it was never intended to be used directly by humans. There are no meaningful development tools to speak of. Nevertheless, [Nicolas] finds PostScript an appealing tool for programming projects and provides tips and techniques for like-minded folks. One of the appeals is working within constraints to solve a problem, just like implementing a chess engine in only 4k, or draw poker in 10 lines of BASIC.", "title": "\u30d7\u30ea\u30f3\u30bf\u30fc\u3068\u30c1\u30a7\u30b9\u3092\u5bfe\u6226\u3055\u305b\u308b\u305f\u3081\u306ePostScript\u30a8\u30f3\u30b8\u30f3", "body": "\u30c1\u30a7\u30b9\u306e\u30a8\u30f3\u30b8\u30f3\u304cPostScript\u3067\u5b9f\u88c5\u3055\u308c\u3001\u30b2\u30fc\u30e0\u3092\u30d7\u30ea\u30f3\u30bf\u30fc\u3067\u30d7\u30ec\u30a4\u53ef\u80fd\u306b\u306a\u308b\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u516c\u958b\u4e2d\u3002PostScript\u306e\u9b45\u529b\u306f\u3001\u4eba\u9593\u304c\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u610f\u56f3\u3055\u308c\u3066\u3044\u306a\u3044\u8a00\u8a9e\u3067\u5236\u7d04\u306e\u4e2d\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3042\u308b\u3002", "titles": ["\u30d7\u30ea\u30f3\u30bf\u30fc\u3068\u30c1\u30a7\u30b9\u3092\u5bfe\u6226\u3055\u305b\u308b\u305f\u3081\u306ePostScript\u30a8\u30f3\u30b8\u30f3", "PostScript\u3092\u4f7f\u7528\u3057\u305f\u30c1\u30a7\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u767a", "PostScript\u3092\u6d3b\u7528\u3057\u305f\u30c1\u30a7\u30b9\u30a8\u30f3\u30b8\u30f3\u306e\u4f5c\u6210", "PostScript\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30fc\u3092\u4f7f\u3063\u305fPSChess\u306e\u30d7\u30ec\u30a4\u65b9\u6cd5", "\u5236\u7d04\u306e\u4e2d\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u767a\u3092\u697d\u3057\u3080\uff1aPostScript\u3092\u4f7f\u3063\u305f\u30c1\u30a7\u30b9\u30a8\u30f3\u30b8\u30f3"]}