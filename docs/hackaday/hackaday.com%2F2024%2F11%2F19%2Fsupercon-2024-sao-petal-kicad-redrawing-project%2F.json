{"pubDate": "2024-11-19T18:00:43", "original_title": "Supercon 2024 SAO Petal KiCad Redrawing Project", "link": "https://hackaday.com/2024/11/19/supercon-2024-sao-petal-kicad-redrawing-project/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/11/petal-feature.png", "original_content": "Last week I completed the SAO flower badge redrawing task, making a complete KiCad project. Most of the SAO petals are already released as KiCad projects, except for the Petal Matrix. The design features 56 LEDs arranged in eight spiral arms radiating from the center. What it does not feature are straight lines, right angles, nor parts placed on a regular grid.\nImporting into KiCad\nCircuit Notes for LEDs, Thanks to [spereinabox]I followed the same procedures as the main flower badge with no major hiccups. This design didnt have any released schematics, but backing out the circuits was straightforward. It also helped that user [sphereinabox] over on the Hackaday Discord server had rung out the LED matrix connections and gave me his notes.\nGrep Those Positons\nI first wanted to only read the data from the LEDs for analysis, and I didnt need the full Kicad + Python scripting for that. Using grep on the PCB file, you get a text file that can be easily parsed to get the numbers. I confirmed that the LED placements were truly as irregular as they looked.\nMy biggest worry was how obtain and re-apply the positions and angles of the LEDs, given the irregular layout of the spiral arms. Just like the random angles of six SAO connector on the badge board, [Voja] doesnt disappoint on this board, either. I fired up Python and used Matplotlib to get a visual perspective of the randomness of the placements, as one does. Due to the overall shape of the arms, there is a general trend to the numbers. But no obvious equation is discernable.\n\n\n\n\n\nIt was obvious that I needed a script of some sort to locate 56 new KiCad LED footprints onto the board. (Spoiler: I was wrong.) Theoretically I could have processed the PCB text file with bash or Python, creating a modified file. Since I only needed to change a few numbers, this wasnt completely out of the question. But that is inelegant. It was time to get familiar with the KiCad + Python scripting capabilities. I dug in with gusto, but came away baffled.\nKiCads Python Console to the Rescue  NOT\nThis being a one-time task for one specific PCB, writing a KiCad plugin didnt seem appropriate. Instead, hacking around in the KiCad Python console looked like the way to go. But I didnt work well for quick experimenting. You open the KiCad PCB console within the PCB editor. But when the console boots up, it doesnt know anything about the currently loaded PCB. You need to import the Kicad Python interface library, and then open the PCB file. Also, the current state of the Python REPL and the command history are not maintained between restarts of KiCad. I dont see any advantages of using the built-in Python console over just running a script in your usual Python environment.\nClearly there is a use case for this console. By all appearances, a lot of effort has gone into building up this capability. It appears to be full of features that must be valuable to some users and/or developers. Perhaps I should have stuck with it longer and figured it out.\nKiCad Python Script Outside KiCad\nThis seemed like the perfect solution. The buzz in the community is that modern KiCad versions interface very well with Python. Ive also been impressed with the improved KiCad project documentation on recent years. This is going to be easy, I thought.\nFirst thing to note, the KiCad v8 interface library works only with Python 3.9. I run pyenv on my computers and already have 3.9 installed  check. However, you cannot just do a pip install kicad-something-or-other... to get the KiCad python interface library. These libraries come bundled within the KiCad distribution. Furthermore, they only work with a custom built version of Python 3.9 that is also included in the bundle. While I havent encountered this situation before, I figured out you can make pyenv point to a Python that has been installed outside of pyenv. But before I got that working, I made another discovery.\nThe Python API is not officially supported. KiCad has announced that the current Simplified Wrapper and Interface Generator-based Python interface bindings are slated to be deprecated. They are to be replaced by Inter-Process Communication-based bindings in Feb 2026. This tidbit of news coincided with learning of a similar 3rd party library.\nIntroducing KiUtils\nMany people were asking questions about including external pip-installed modules from within the KiCad Python console. This confounded my search results, until I hit upon someone using the KiUtils package\u00a0to solve the same problem I was having. Armed with this tool, I was up and running in no time. To be fair, I susepct KiUtils may also break when KiCad switched from SWIG to IPC interface, but KiUtils was so much easier to get up and running, I stuck with it.\nI wrote a Python script to extract all the information I needed for the LEDs. The next step was to apply those values to the 56 new KiCad LED footprints to place each one in the correct position and orientation. As I searched for an example of writing a PCB file from KiUtils, I saw issue #113, Broken as of KiCAD 8?, on the KiUtils GitHub repository. Looks like KiUtils is already broken for v8 files. While I was able to read data from my v8 PCB file, it is reported that KiCad v8 cannot read files written by KiUtils.\nScripting Not Needed  DOH\nAt a dead end, I was about to hand place all the LEDs manually when I realized I could do it from inside KiCad. My excursions into KiCad and Python scripting were all for naught. The LED footprints had been imported from Altium Circuit Maker as one single footprint per LED (as opposed to some parts which convert as one footprint per pad). This single realization made the problem trivial. I just needed to update footprints from the library. While this did require a few attempts to get the cathode and anodes sorted out, it was basically solved with a single mouse click.\nThose Freehand Traces\nThe imported traces on this PCB were harder to cleanup than those on the badge board. There were a lot of disconinuities in track segments. These artifacts would work fine if you made a real PCB, but because some segment endpoints dont precisely line up, KiCad doesnt know they belong to the same net. Here is how these were fixed:\n\nCurved segments endpoints cant be dragged like a straight line segment can. Solutions:\n\nIf the next track is a straight line, drag the line to connect to the curved segment.\nIf the next track is also a curve, manually route a very short track between the two endpoints.\n\n\nIf you route a track broadside into a curved track, it will usually not connect as far as KiCad is concerned. The solution is to break the curved track at the desired intersection, and those endpoints will accept a connection.\nSome end segments were not connected to a pad. These were fixed by either dragging or routing a short trace.\n\nApplying these rules over and over again, I finaly cleared all the discontinuities. Frustratingly, the algorithm to do this task already exists in a KiCad function: Tools - Cleanup Graphics... - Fix Discontinuities in Board Outline, and an accompanying tolerance field specified as a length in millimeters. But this operation, as noted in the its name, is restricted to lines on the Edge.Cuts layer.\nPCB vs Picture\nDetail of Test Pad Differences\nWhen I was all done, I noticed a detail in the photo of the Petal Matrix PCB assembly from the Hackaday reveal article. That board (sitting on a rock) has six debugging / expansion test points connected to the six pins of the SAO connector. But in the Altium Circuit Maker PCB design, there are only two pads, A and B. These connect to the two auxiliary input pins of the AS1115 chip. I dont know which is correct. (Editors note: they were just there for debugging.) If you use this project to build one of these boards, edit it according to your needs.\nConclusion\nThe SAO Petal Matrix redrawn KiCad project can be found over at this GitHub repository. It isnt easy to work backwards using KiCad from the PCB to the schematic. I certainly wouldnt want to reverse engineer a 9U VME board this way. But for many smaller projects, it isnt an unreasonable task, either. You can also use much simpler tools to get the job done. Earlier this year over on Hackaday.io, user [Skyhawkson] did a gread job backing out schematics from an Apollo-era PCB with Microsoft Paint 3D  a tool released in 2017 and just discontinued last week.\n"}