{"pubDate": "2023-11-03T16:00:57", "original_title": "This Week in Security: CVSS 4, OAuth, and ActiveMQ", "link": "https://hackaday.com/2023/11/03/this-week-in-security-cvss-4-oauth-and-activemq/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Weve talked a few times here about the issues with the CVSS system. Weve seen CVE farming, where a moderate issue, or even a non-issue, gets assigned a ridiculously high CVSS score. There are times a minor problem in a library is a major problem in certain use cases, and not an issue at all in others. And with some of those issues in mind, lets take a look at the fourth version of the Common Vulnerability Scoring System.\nOne of the first tweaks to cover is the de-emphasis of the base score. Version 3.1 did have optional metrics that were intended to temper the base score, but this revision has beefed that idea up with Threat Metrics, Environmental Metrics, and Supplemental Metrics. These are an attempt to measure how likely it is that an exploit will actually be used. The various combinations have been given names. Where CVSS-B is just the base metric, CVSS-BT is the base and threat scores together. CVSS-BE is the mix of base and environmental metrics, and CVSS-BTE is the combination of all three.\nAnother new feature is multiple scores for a given vulnerability. A problem in a library is first considered in a worst-case scenario, and the initial base score is published with those caveats made clear. And then for each downstream program that uses that library, a new base score should be calculated to reflect the reality of that case.\nThe last thing to mention is the extra granularity now baked into the scoring. We have the addition of Attack Requirements, which reflects whether the given vulnerability depends on other factors for exploitability. And similarly, the User Interaction metric is now a tri-state, set to none, passive, or active. Though I might have chosen reasonable and bonehead instead.\nSo far, industry response seems to be cautiously optimistic. This wont solve every problem, but it should help. Hopefully well see fewer vulnerabilities with dubious 10.0 scores, and a bit more nuance in hos CVSS is reported.\nOAuth is Hard\nLast week we mentioned an OAuth problem when a particular site had an open redirect. This week well talk about another potential problem  OAuth without access token validation. And for the record, this Salt Security write-up is also an excellent explainer on OAuth.\nSo first off, OAuth is a authorization scheme. A user clicks a button on a given site to link with the users Facebook account. That site will open a Facebook link in a new window, with a redirect value and client ID specified as URL parameters. If its a new connection, Facebook spells out what information is being shared with the requesting site. If the user agrees, Facebook redirects that window to the value specified in the first URL, and appends an OAuth token to the new URL. The remote site then makes a new request to Facebook, asking for the user information, specifying the token. Facebook recognizes the token, and returns the requested information.\nThis scheme was designed for authorization, not authentication. The important difference is that authentication is proving who the user is, but authorization is securely allowing a site access to something. This isnt to say that OAuth cant be used for authentication  OpenID is based on OAuth after all. The point is that extra care has to be taken to make this authorization scheme secure for authentication.\nOne of the extra steps that must be taken for proper authentication is token validation. In the case of Facebook, thats a separate API call to verify that this token was generated for the App ID where it is being used. Without that step, theres nothing to prevent an OAuth token from one service from being reused on another service. The attack here is that if someone uses a Log in with Facebook button on a malicious site, the access token can be re-used on other sites where the user has accounts.\nThats not just theoretical, as the Salt researchers found this very problem in the wild at Vidio.com, Bukalapak.com, and Grammarly. The Grammarly flaw was particularly clever, as that site uses OAuth codes instead of tokens. But it turns out an attacker could simply include a token instead, and it worked. These issues have been privately reported and fixed on all three sites.\nActiveMQ Actively Targeted\nApaches ActiveMQ has a really nasty issue, CVE-2023-46604, and its being used in active ransomware attacks already. This CVSS 10 is probably going to rate a score of 10 even on the kinder, more nuanced CVSS 4 scale. This is a Remote Code Exploit (RCE) thats trivial to attack, vulnerable with default settinge, requires no authentication or privileges, and targets OpenWire, which is the default transport protocol in ActiveMQ.\nIts another deserialization flaw, in Java this time. An OpenWire packet with the EXCEPTION_RESPONSE type can override the createThrowable method with another class, and set the string parameter to that class. That opens a wide range of possibilities, but the public Proof of Concept calls a Spring configuration class, and passes an HTTP URL pointing to an attacker-controlled XML config file.\nThere are still over three thousand of these services accessible over the internet. Thats down from just over seven thousand on October 30th. So thats progress. If your unpatched machine is among them, just consider it compromised and act accordingly.\nBits and Bytes\nFor some much-needed good news, the Mozi botnet is dead. An update to this bit of stubborn IoT malware was pushed out methodically, starting in August, deploying to India first, then China. That update was a go dormant command, and it looks like an intentional shuttering of the botnet. Its unclear if the botnets masterminds just decided they were done, or if the $5 wrench decryption method was deployed.\nThe phpFox web application had a PHP deserialization flaw, where user input wasnt properly sanitized before being fed into the unserialize() function. This flaw could lead to arbitrary PHP execution, and was fixed in release 4.8.14, after some waffling by the phpFox developers. Were inclined to give developers a bit of grace on stories like these, so long as the flaw does get fixed in reasonable time. After all, a security report might be a legitamate RCE, and it might just be someone who found the Chrome DevTools for the first time.\nYou may use link shorteners to share documents and pictures, or to track how well an advertisement campaign is going. Scammers and other malicious actors have other ideas, like using link shorteners to make phishing links look more legitimate. But thats against the Bit.ly terms of service. And so, theres a shadowy enterprise that apparently makes money selling bulletproof link shortening services to cyber criminals. Because of course there is.", "title": "CVSS 4.0: \u65b0\u305f\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306e\u5909\u66f4\u70b9\u3068\u8a55\u4fa1\u65b9\u6cd5\u306e\u6539\u5584", "body": "CVSS\u30b7\u30b9\u30c6\u30e0\u306e\u6539\u5584\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u3002\u8106\u5f31\u6027\u306e\u591a\u304f\u306f10.0\u3068\u3044\u3046\u7591\u308f\u3057\u3044\u8a55\u4fa1\u304c\u306a\u304f\u306a\u308a\u3001\u3088\u308a\u8a73\u7d30\u306a\u5831\u544a\u304c\u671f\u5f85\u3055\u308c\u308b\u3002\u307e\u305f\u3001OAuth\u306b\u304a\u3051\u308b\u554f\u984c\u306b\u3064\u3044\u3066\u3082\u8a00\u53ca\u3055\u308c\u3066\u3044\u308b\u3002ActiveMQ\u3082\u653b\u6483\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u3002", "titles": ["CVSS 4.0: \u65b0\u305f\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306e\u5909\u66f4\u70b9\u3068\u8a55\u4fa1\u65b9\u6cd5\u306e\u6539\u5584", "OAuth\u306e\u8a8d\u8a3c\u306e\u8106\u5f31\u6027\u3068\u305d\u306e\u5bfe\u7b56", "ActiveMQ\u306e\u6df1\u523b\u306a\u8106\u5f31\u6027\u3068\u653b\u6483\u3078\u306e\u5bfe\u5fdc", "Mozi\u30dc\u30c3\u30c8\u30cd\u30c3\u30c8\u306e\u64b2\u6ec5\u3068\u305d\u306e\u80cc\u5f8c\u306b\u3042\u308b\u8b0e", "\u30ea\u30f3\u30af\u77ed\u7e2e\u30b5\u30fc\u30d3\u30b9\u306e\u95c7\u7d44\u7e54\u306b\u3088\u308b\u30b5\u30a4\u30d0\u30fc\u72af\u7f6a\u3078\u306e\u5229\u7528"]}