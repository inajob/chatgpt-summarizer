{"pubDate": "2023-06-18T17:00:16", "original_title": "Better Antennas via Annealing (Simulated)", "link": "https://hackaday.com/2023/06/18/better-antennas-via-annealing-simulated/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/06/ant.png", "original_content": "If you want to simulate a tic-tac-toe game, thats easy. You can evaluate every possible move in a reasonable amount of time. Simulating antennas, however, is much harder. [Rosrislav] has been experimenting with using simulated annealing to iterate antenna designs, and he shares his progress in a recent blog post.\nFor many problems, it simply isnt possible to try all possible inputs to determine what provides the best result. Instead of trying every single input or set of inputs, you can try random ones and discard all but the best guesses. Then you make small changes and try again. The only problem is that the algorithm may lock in on a local maximum  that is, a relatively high value that isnt the highest because it forms a peak that isnt the highest peak. Or, if you are looking for a minimum, you may lock on to a local minimum  same thing.\nTo combat that, simulated annealing works like annealing a metal. The simulation employs a temperature that cools over time. The higher the temperature, the more likely large changes to the input are to occur.\nThe Python program uses the PyNEC package to provide simulation. The program sets up random antenna lengths and finds the projected gain, attempting to optimize for maximum gain.\nThe post is long on code and short on details, so you will probably want to read the Python source to see exactly what it is doing. But it could probably serve as a template to do other simulated annealing simulations for other antennas or anything you had a simulation engine to evaluate.\nSeveral techniques allow you to optimize things that are too hard to search exhaustively, and weve talked about simulated annealing and genetic algorithms before. However, lately, weve been more interested in annealing 3D prints.", "title": "\u300c\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u713c\u920d\u6cd5\u300d\u3067\u30a2\u30f3\u30c6\u30ca\u8a2d\u8a08\u3092\u6700\u9069\u5316 ", "body": "\u30a2\u30f3\u30c6\u30ca\u30c7\u30b6\u30a4\u30f3\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306bSimulated Annealing\u3092\u4f7f\u7528\u3057\u305f\u9032\u6357\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u8a18\u4e8b\u3002\u300cSimulated Annealing\u300d\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u8a66\u884c\u3092\u8a66\u307f\u3001\u6700\u5584\u306e\u3082\u306e\u3060\u3051\u3092\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5\u3002\u3057\u304b\u3057\u3001\u30ed\u30fc\u30ab\u30eb\u6700\u5927\u5024\u306b\u30ed\u30c3\u30af\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u306b\u3088\u308b\u554f\u984c\u304c\u3042\u308b\u3002Simulated Annealing\u306f\u3001\u6e29\u5ea6\u3092\u7d4c\u6642\u7684\u306b\u51b7\u5374\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u3002Python\u30d7\u30ed\u30b0\u30e9\u30e0\u304cPyNEC\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\u3059\u308b\u3002", "titles": ["\u300c\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u713c\u920d\u6cd5\u300d\u3067\u30a2\u30f3\u30c6\u30ca\u8a2d\u8a08\u3092\u6700\u9069\u5316 ", "\u9ad8\u307f\u3092\u76ee\u6307\u3059\u306a\u3089\u300c\u713c\u920d\u6cd5\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u300d\u3092", "\u30a2\u30f3\u30c6\u30ca\u306e\u8a2d\u8a08\u6700\u9069\u5316\u306b\u6700\u9069\u306a\u300c\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u713c\u920d\u6cd5\u300d\u3068\u306f", "\u300c\u713c\u920d\u6cd5\u300d\u306b\u3088\u308b\u30a2\u30f3\u30c6\u30ca\u8a2d\u8a08\u306e\u8a66\u307f", "\u300c\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3055\u308c\u305f\u713c\u920d\u6cd5\u300d\u3068\u306f\u3001\u30a2\u30f3\u30c6\u30ca\u8a2d\u8a08\u306e\u305f\u3081\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"]}