{"pubDate": "2025-01-17T03:00:37", "original_title": "Building a Raycaster Within Bash", "link": "https://hackaday.com/2025/01/16/building-a-raycaster-within-bash/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/01/Screenshot-2025-01-16-202738-e1737019765814.png", "original_content": "Wolfenstein 3D\u00a0was a paradigm-shifting piece of software, using raycasting techniques to create a game with pseudo-3D graphics. Now, [izabera] has done something very similar, creating a raycasting display engine that runs entirely within bash.\nThe work was developed with an eye cast over an existing raycasting tutorial online. As you might imagine, implementing these graphical techniques in a text console proved difficult. The biggest problem [izabera] encountered was that bash is slow. Its not supposed to display full frames of moving content at 25+ fps. Its supposed to display text. Making it display graphics by using tons of colorful characters is really pushing the limits. Bash also doesnt have any ability to work with floating points, so all the calculations are done with massive integers. Other problems involved the limited ways to read the keyboard in bash, and keeping track of the display as a whole.\nIts neat reading about how this was pulled off\u2014specifically because it was hard. It might not be the kind of project youd ever implement for serious work, but there are learnings to be had here that you wont get anywhere else. Code is on Github, while theres a visual storytelling of how it came together on imgur.\nWeve seen similar work before\u2014with magical 3D graphics generated in Microsoft Excel. Will wonders never cease? We hope not, because we always like to see new ones on the tipsline. Keep us busy!", "title": "- Bash\u3067\u5b9f\u73fe\u3057\u305f\u30ec\u30a4\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30a8\u30f3\u30b8\u30f3", "body": "Bash\u5185\u3067\u52d5\u4f5c\u3059\u308b\u30ec\u30a4\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u30a8\u30f3\u30b8\u30f3\u3092\u958b\u767a\u3002\u56f0\u96e3\u306a\u5b9f\u88c5\u306e\u904e\u7a0b\u3092\u7d39\u4ecb\u3002", "titles": ["- Bash\u3067\u5b9f\u73fe\u3057\u305f\u30ec\u30a4\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30a8\u30f3\u30b8\u30f3", "- \u30c6\u30ad\u30b9\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u306e\u64ec\u4f3c3D\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u4f5c\u6210\u306e\u6311\u6226", "- Wolferstein 3D\u304b\u3089\u5b66\u3076\uff1abash\u3067\u306e\u96e3\u89e3\u306a\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u6280\u8853", "- \u9650\u754c\u3092\u8d85\u3048\u305fbash\u306b\u3088\u308b\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u8868\u793a\u306e\u5b9f\u9a13", "- GitHub\u3067\u516c\u958b\u3055\u308c\u305f\u72ec\u5275\u7684\u306abash\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a73\u7d30"]}