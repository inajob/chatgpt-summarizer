{"pubDate": "2023-07-16T11:00:00", "original_title": "Brute Forcing a Mobile\u2019s PIN Over USB With a $3 Board", "link": "https://hackaday.com/2023/07/16/brute-forcing-a-mobiles-pin-over-usb-with-a-3-board/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/PIN-Android-Brute-Force.png", "original_content": "Mobile PINs are a lot like passwords in that there are a number of very common ones, and [Mobile Hacker] has a clever proof of concept that uses a tiny microcontroller development board to emulate a keyboard to test the 20 most common unlock PINs on an Android device.\nTrying the twenty most common PINs doesnt take long.\nThe project is based on research analyzing the security of 4- and 6-digit smartphone PINs which found some striking similarities between user-chosen unlock codes. While the research is a few years old, user behavior in terms of PIN choice has probably not changed much.\nThe hardware is not much more than a Digispark board, a small ATtiny85-based board with built-in USB connector, and an adapter. In fact, it has a lot in common with the DIY Rubber Ducky except for being focused on doing a single job.\nOnce connected to a mobile device, it performs a form of keystroke injection attack, automatically sending keyboard events to input the most common PINs with a delay between each attempt. Assuming the device accepts, trying all twenty codes takes about six minutes.\nDisabling OTG connections for a device is one way to prevent this kind of attack, and not configuring a common PIN like 1111 or 1234 is even better. You can see the brute forcing in action in the video, embedded below.\n\n\nBruteforcing PIN protection of popular app using $3 ATTINY85 #Arduino\nTesting all possible PIN combinations (10,000) would take less than 1,5 hours without getting account locked. It is possible coz, PIN is limited only to 4 digits, without biometrics authentication#rubberducky pic.twitter.com/rbu9Tk3S9d\n Mobile Hacker (@androidmalware2) July 12, 2023\n", "title": "\u300c$3 ATTINY85 Arduino\u3092\u4f7f\u7528\u3057\u3066\u4eba\u6c17\u306e\u30a2\u30d7\u30ea\u306ePIN\u4fdd\u8b77\u3092\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u300d", "body": "Microcontroller\u3067\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u3001Android\u30c7\u30d0\u30a4\u30b9\u306e\u4eba\u6c17\u306e\u3042\u308b20\u306ePIN\u3092\u81ea\u52d5\u3067\u30c6\u30b9\u30c8\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30d0\u30a4\u30b9\u306e\u4fdd\u8b77\u3092\u5f37\u5316\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002", "titles": ["\u300c$3 ATTINY85 Arduino\u3092\u4f7f\u7528\u3057\u3066\u4eba\u6c17\u306e\u30a2\u30d7\u30ea\u306ePIN\u4fdd\u8b77\u3092\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u300d", "\u300c20\u500b\u306e\u4e00\u822c\u7684\u306aPIN\u3067Android\u30c7\u30d0\u30a4\u30b9\u306e\u30a2\u30f3\u30ed\u30c3\u30af\u3092\u30c6\u30b9\u30c8\u3059\u308b\u5c0f\u578b\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u30dc\u30fc\u30c9\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300d", "\u300c4\u6841\u30686\u6841\u306e\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3PIN\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5206\u6790\u3057\u3001\u985e\u4f3c\u70b9\u3092\u767a\u898b\u300d", "\u300cDIY Rubber Ducky\u3068\u4f3c\u305f\u3088\u3046\u306aDigispark\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u305f\u30e2\u30d0\u30a4\u30eb\u30c7\u30d0\u30a4\u30b9\u306e\u30ad\u30fc\u30b9\u30c8\u30ed\u30fc\u30af\u6ce8\u5165\u653b\u6483\u300d", "\u300c\u30c7\u30d0\u30a4\u30b9\u306e\u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u653b\u6483\u3092\u9632\u3050\u65b9\u6cd5\u3068\u3057\u3066OTG\u63a5\u7d9a\u306e\u7121\u52b9\u5316\u3068\u4e00\u822c\u7684\u306aPIN\u306e\u56de\u907f\u300d"]}