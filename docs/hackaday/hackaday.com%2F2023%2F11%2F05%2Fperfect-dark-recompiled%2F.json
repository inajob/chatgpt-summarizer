{"pubDate": "2023-11-05T12:00:36", "original_title": "Perfect Dark: Recompiled", "link": "https://hackaday.com/2023/11/05/perfect-dark-recompiled/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/11/pd_cropped.png", "original_content": "Theres an interesting renaissance of Nintendo 64 gaming, powered by the ability to decompile n64 roms back into C code using Ghidra. There are projects around multiple classic games, taking the Ghidra output and renaming the generic function and variable names. There are two approaches to these projects, sometimes happening in parallel. The first is to perfectly recreate the original work, and get a bit-perfect binary that matches the original ROM. The other approach is to fix bugs, optimize the code, and add new features, often porting to new platforms in the process. And one such game is Perfect Dark.\nThere is a project by [Ryan Dwyer] to produce a matching C codebase, and that project is functionally complete with an over 99% bit-perfect output. But as impressive as that is, were interested in making code even better, and thats what [fgsfdsfgs] has accomplished with the Perfect Dark Port.\nThe game now runs on Windows or Linux, has mouselook support, and runs at a solid 60 fps at multiple screen resolutions. Want an ultra-widescreen Perfect Dark experience? The upgraded rendering engine handles it wonderfully. Its a wonderful trip down memory lane. And the project is still adding features. It has modding support, and the developer is looking into support for high-definition textures.\nTo play, you do have to provide your own legally sourced copy of the original Perfect Dark game. That is the only way this project is remotely legal, and we suspect that its in a somewhat grey zone, as a derivative work of a copyrighted game. Big N hasnt shut the project down, but the Mario 64 port was killed for attempting the same thing. Well hope for the best, and enjoy the nostalgia trip in the meanwhile!", "title": "Nintendo 64\u30b2\u30fc\u30e0\u3092\u5fa9\u6d3b\u3055\u305b\u308b\u305f\u3081\u306ePerfect Dark\u30dd\u30fc\u30c8", "body": "Nintendo 64\u306e\u30b2\u30fc\u30df\u30f3\u30b0\u304c\u5fa9\u6d3b\u3057\u3066\u3044\u308b\u3002Ghidra\u3092\u4f7f\u3063\u3066n64 roms\u3092C\u30b3\u30fc\u30c9\u306b\u5206\u89e3\u3067\u304d\u308b\u3002Perfect Dark\u3082\u305d\u306e\u4e00\u3064\u3002[Ryan Dwyer]\u306b\u3088\u308bC\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u9032\u884c\u4e2d\u3002[fgsfdsfgs]\u306b\u3088\u308b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3082\u3042\u308a\u3001Windows\u3084Linux\u3067\u30d7\u30ec\u30a4\u3067\u304d\u3001\u65b0\u3057\u3044\u6a5f\u80fd\u3082\u8ffd\u52a0\u4e2d\u3002\u305f\u3060\u3057\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30b2\u30fc\u30e0\u306e\u5408\u6cd5\u7684\u306a\u30b3\u30d4\u30fc\u304c\u5fc5\u8981\u3002\u30de\u30ea\u30aa64\u306e\u30dd\u30fc\u30c8\u306f\u4e2d\u6b62\u3055\u308c\u305f\u304c\u3001\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u307e\u3060\u7d9a\u3044\u3066\u3044\u308b\u3002", "titles": ["Nintendo 64\u30b2\u30fc\u30e0\u3092\u5fa9\u6d3b\u3055\u305b\u308b\u305f\u3081\u306ePerfect Dark\u30dd\u30fc\u30c8", "Ghidra\u3092\u4f7f\u7528\u3057\u305fNintendo 64\u30b2\u30fc\u30e0\u306e\u518d\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "Windows\u3084Linux\u3067\u52d5\u4f5c\u3059\u308bPerfect Dark\u306e\u6700\u65b0\u7248", "\u9ad8\u753b\u8cea\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u8ffd\u52a0\u3057\u305fPerfect Dark\u30ea\u30e1\u30a4\u30af", "\u30c7\u30ea\u30d0\u30c6\u30a3\u30d6\u4f5c\u54c1\u3068\u3057\u3066\u306ePerfect Dark\u30dd\u30fc\u30c8\u306e\u5408\u6cd5\u6027\u3068\u53ef\u80fd\u6027"]}