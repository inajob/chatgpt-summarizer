{"pubDate": "2025-04-11T11:00:06", "original_title": "The Jupiter Ace Remembered", "link": "https://hackaday.com/2025/04/11/the-jupiter-ace-remembered/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/ace.png", "original_content": "It is hard to imagine that it has been more than four decades since two of the original designers of the Sinclair ZX Spectrum broke off to market the Jupiter Ace. [Nemanja Trifunovic] remembers the tiny computer in a recent post, and we always love to recall the old computers that used TVs for screens and audio tape recorders for mass storage.\nOne thing we always loved about the Jupiter Ace is that while most computers of the era had Basic as their native tongue, the Ace used Forth. As the post points out, while this may have given it great geek cred, it didnt do much for sales, and the little machine was history within a year. However, the post also proposes that Forth wasnt the real reason for the machines lack of commercial success.\nWhy did they pick Forth? Why not? It is efficient and interactive. The only real disadvantage was that Basic was more familiar to more people. Books and magazines of the day showed Basic, not Forth. But, according to the post, the real reason for its early demise was that it was already using outdated hardware from day one.\nThe Ace provided only 3K of RAM and did not offer color graphics. While this may sound laughable today, it wasnt totally out of the question in 1978. Unfortunately, the Ace debuted in 1982. There were options that offered much more for just a little less. There is also the argument that as users became less technical, they just wanted to load pre-programmed tapes or cartridges and didnt really care what language was running the computer.\nMaybe, but we did and we cant help but imagine a future where Forth was the language of choice for personal computers. Given how few of these were made, we see a lot of projects around them or, at least, replicas. Of course, these days that can be as simple as a single chip."}