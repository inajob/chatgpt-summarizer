{"pubDate": "2024-12-23T06:00:50", "original_title": "Faster Integer Division with Floating Point", "link": "https://hackaday.com/2024/12/22/faster-integer-division-with-floating-point/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/12/simd.png", "original_content": "Multiplication on a common microcontroller is easy. But division is much more difficult. Even with hardware assistance, a 32-bit division on a modern 64-bit x86 CPU can run between 9 and 15 cycles. Doing array processing with SIMD (single instruction multiple data)\u00a0 instructions like AVX or NEON often dont offer division at all (although the RISC-V vector extensions do). However, many processors support floating point division. Does it make sense to use floating point division to replace simpler division? According to [Wojciech Mula] in a recent post, the answer is yes.\nThe plan is simple: cast the 8-bit numbers into 32-bit integers and then to floating point numbers. These can be divided in bulk via the SIMD instructions and then converted in reverse to the 8-bit result. You can find several code examples on GitHub.\n\nSince modern processors have several SIMD instructions, the post takes the time to benchmark many different variations of a program dividing in a loop. The basic program is the reference and, thus, has a speed factor of 1. Unrolling the loop, a common loop optimization technique, doesnt help much and, on some CPUs, can make the loop slower.\nConverting to floating point and using AVX2 sped the program up by a factor of 8X to 11X, depending on the CPU.\u00a0 Some of the processors supported AVX512, which also offered considerable speed-ups.\nThis is one of those examples of why profiling is so important. If youd had asked us if converting integer division to floating point might make a program run faster, wed have bet the answer was no, but wed have been wrong.\nAs CPUs get more complex, optimizing gets a lot less intuitive. If you are interested in things like AVX-512, weve got you covered.", "title": "- \u6d6e\u52d5\u5c0f\u6570\u70b9\u9664\u7b97\u306e\u6d3b\u7528\u6cd5\u3068\u305d\u306e\u5229\u70b9", "body": "\u6574\u6570\u306e\u9664\u7b97\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3001\u51e6\u7406\u901f\u5ea6\u304c\u5411\u4e0a\u3059\u308b\u3002", "titles": ["- \u6d6e\u52d5\u5c0f\u6570\u70b9\u9664\u7b97\u306e\u6d3b\u7528\u6cd5\u3068\u305d\u306e\u5229\u70b9", "- SIMD\u6307\u4ee4\u3092\u4f7f\u7528\u3057\u305f\u52b9\u7387\u7684\u306a\u9664\u7b97\u624b\u6cd5", "- \u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u304a\u3051\u308b\u91cd\u3044\u9664\u7b97\u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af", "- \u30eb\u30fc\u30d7\u6700\u9069\u5316\u3068\u9664\u7b97\u6027\u80fd\u306e\u95a2\u4fc2", "- AVX2\u306b\u3088\u308b\u6574\u6570\u9664\u7b97\u306e\u30b9\u30d4\u30fc\u30c9\u5411\u4e0a\u306e\u691c\u8a3c"]}