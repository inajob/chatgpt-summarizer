{"pubDate": "2025-02-24T03:00:58", "original_title": "Learn Assembly the FFmpeg Way", "link": "https://hackaday.com/2025/02/23/learn-assembly-the-ffmpeg-way/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/02/asm.png", "original_content": "You want to learn assembly language. After all, understanding assembly unlocks the ability to understand what compilers are doing and it is especially important for time-critical code. But most tutorials are  well  boring. So you can print Hello World super fast. Who cares?\nBut decoding video data is something where assembly can really pay off, so why not study a real project like FFmpeg to see how they do things? Sounds like a pain, but thanks to the FFmpeg asm-lessons repository, its actually quite accessible.\nAccording to the repo, you should already understand C  especially C pointers. They also expect you to understand some basic mathematics. Most of the FFmpeg code that uses assembly uses the single instruction multiple data (SIMD) opcodes. This allows you to do something like add 5 to these 200 data items very quickly compared to looping 200 times.\n\nThere are three lessons so far. Of course, some of the material is a little introductory, but they do jump in quickly to SIMD including upcoming instruction sets like AVX10 and older instructions like MMX and AVX512. It is no surprise that FFmpeg needs to understand all these variations since it runs on behalf of (their words) billions of users.\nWe enjoyed their link to a simplified instruction list. Not to mention the visual organizer for SIMD instructions.\nThe courses goal is to prepare developers to contribute to FFmpeg. If you are more interested in using FFmpeg, you might enjoy this browser-based GUI. Then again, not all video playback needs high performance.", "title": "FFmpeg\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u5b66\u3073\u65b9", "body": "FFmpeg\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3092\u5b66\u3076\u305f\u3081\u306e\u6559\u6750\u304c\u3042\u308a\u3001\u7279\u306bSIMD\u547d\u4ee4\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u308b\u3002", "titles": ["FFmpeg\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u5b66\u3073\u65b9", "SIMD\u3092\u6d3b\u304b\u3057\u305f\u9ad8\u901f\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u5b9f\u8df5", "\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u5165\u9580\uff1aFFmpeg\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u5b66\u3076", "\u52b9\u7387\u7684\u306a\u30d3\u30c7\u30aa\u30c7\u30fc\u30bf\u30c7\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u6280\u8853", "FFmpeg\u3067\u6311\u6226\u3059\u308b\uff01\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u5b9f\u8df5\u5b66\u7fd2"]}