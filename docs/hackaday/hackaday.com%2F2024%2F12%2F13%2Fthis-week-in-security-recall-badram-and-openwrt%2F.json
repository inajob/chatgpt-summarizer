{"pubDate": "2024-12-13T15:00:35", "original_title": "This Week in Security: Recall, BadRAM, and OpenWRT", "link": "https://hackaday.com/2024/12/13/this-week-in-security-recall-badram-and-openwrt/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Microsofts Recall feature is back. You may remember our coverage of the new AI feature back in June, but for the uninitiated, it was a creepy security trainwreck. The idea is that Windows will take screenshots of whatever is on the screen every few seconds, and use AI to index the screenshots for easier searching. The only real security win at the time was that Microsoft managed to do all the processing on the local machine, instead of uploading them to the cloud. All the images and index data was available unencrypted on the hard drive, and there werent any protections for sensitive data.\nThings are admittedly better now, but not perfect. The recall screenshots and database is no longer trivially opened by any user on the machine, and Windows prompts the user to set up and authenticate with Windows Hello before using Recall. [Avram] from Toms Hardware did some interesting testing on the sensitive information filter, and found that it worked sometimes.\nSo, with the public preview of Recall, is it still creepy? Yes. Is it still a security trainwreck? It appears that the security issues are much improved. Time will tell if a researcher discovers a way to decrypt the Recall data outside of the Recall app.\nPatch Tuesday\nSince were talking about Microsoft, this week was Patch Tuesday, and we had seventy-one separate vulnerabilities fixed, with one of those being a zero-day that was used in real-world attacks. CVE-2024-49138 doesnt seem to have a lot of information published yet. We know its a Heap-based Buffer Overflow in the Common Log File driver, and allows an escalation of privilege to SYSTEM on Windows machines.\nBadRAM\nOne of the most interesting frontiers in computing right now is trying to give cloud computing actual security. AMD has approached this problem with SEV-SNP, Secure Encrypted Virtualization/Secure Nested Paging, among other approaches. But today we have a very clever hardware attack that can defeat SEV-SNP: BadRAM.\nThe key here is the DIMM memory specifications SPD, Serial Presence Detect. Thats a simple protocol that uses SMBus, an I2C protocol, to pull information from a memory module. How does your desktop know that those are 4 GB modules? And how does it know the right timings to actually boot successfully? SPD provides that data. BadRAM asks the rather simple question, what happens if you overwrite a modules SPD chip?\nWhen you convince SPD to lie, and report a memory module thats larger than it really is, you get a sort of shadow memory. Put simply, multiple memory addresses refer to the same physical bits. That should set your security alarm bells to sounding. This defeats most memory protection schemes, and allows overriding SEV-SNP, by just over-writing the security hashes after theyve been calculated. AMD has released updated firmware that actively checks for aliasing addresses, defeating the attack.\nWhen rnd is Hard\nGetting good random bits is hard. There is the obvious problem, that computers are deterministic, and cant actually generate randomness without dedicated hardware for the purpose. Beyond that, different languages and platforms have different quirks. Many of those languages have a pseudorandom function, that can produce a good approximation of random numbers. The catch is that those numbers are entirely deterministic, and to be anything close to usable as a safe source of randomness, the pseudorandom function must be seeded with a truly non-deterministic number.\nWhich is why its particularly bad to accidentally hard-code the seed into a platform. And yes, thats exactly what the Web assembly platform for Dart did until surprisingly recently. This did result in an easy-to-guess websocket port/key/password combination that could result in the takeover of a Dart application from another visited website. And thats not all, follow the link above to find two other similar stories in the Dart/Flutter world.\nOpenWRT and sha256 collisions\nThe OpenWRT project had a bit of a security scare late last week. It turns out that the attended sysupgrade service actually triggers custom firmware builds on the OpenWRT servers. And its possible to run arbitrary code insode that build process. Thats not as bad as it sounds, as the project works very hard to isolate each of those builds inside podman containers. There was another problem, where build artifacts were tracked using a partial SHA256 hash. The full 64 characters of a SHA256 hash is enough to be secure, particularly in this case  but reducing that to twelve characters is not.\n[RyotaK] actually did the work, using hashcat to find a hash collision, resulting in the server serving a tampered firmware image in place of the correct one. The find was reported, and the sysupgrade build server was temporarily taken offline, and a fix rolled out. The OpenWRT project put out a statement, acknowledging the issue, and pointing out that there are insufficient logs to determine whether this vulnerability chain has ever actually been used. And so out of an abundance of caution, users of the sysupgrade server should trigger an in place upgrade to completely rule out the possibility of running a compromised image.\nBits and Bytes\nFacebook Messenger on iOS had an issue, where a member of group calls could crash the app for all members of the call, simply by sending an invalid emote to the group. Sure puts the angry face in context. Its fixed now, appears to be strictly limited to the denial of service crash, and theres a decent walkthrough of the problem at the link.\nMaxwell Dulin, AKA [Stri\ua4d8eout], has now worked on both sides of the security coin. Hes both been the security researcher, and now is on the security team at a company. This puts him in a particularly good position to comment on why it takes so long to fix a given bug. And not to give it away, but some of the reasons are better than others.\nAnd finally, how not to fall for a crypto scam. In this case, it was a Telegram group, that was hawking a fake new token. The scam was rather impressive, with faked reviews from Certik and TechRate, and legitimate looking smart contracts. But like most deals that seem to good to be true, this was a rugpull, where criminal con artists convinced a few investors to put money into the scheme, only to take the money and run. Stay frosty out there!", "title": "\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u306e\u30ea\u30b3\u30fc\u30eb\u6a5f\u80fd\u304c\u5fa9\u6d3b\uff01\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6539\u5584\u306e\u73fe\u72b6", "body": "Microsoft\u306eRecall\u6a5f\u80fd\u304c\u6539\u5584\u3055\u308c\u305f\u304c\u3001\u76f8\u5909\u308f\u3089\u305a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u304c\u6b8b\u308b\u3002", "titles": ["\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u306e\u30ea\u30b3\u30fc\u30eb\u6a5f\u80fd\u304c\u5fa9\u6d3b\uff01\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6539\u5584\u306e\u73fe\u72b6", "\u30d1\u30c3\u30c1\u706b\u66dc\u65e5\uff1a71\u4ef6\u306e\u8106\u5f31\u6027\u4fee\u6b63\u3068\u65b0\u305f\u306a\u30bc\u30ed\u30c7\u30a4\u653b\u6483", "BadRAM\u653b\u6483\u304cSEV-SNP\u3092\u7a81\u7834\uff01\u30e1\u30e2\u30ea\u4fdd\u8b77\u306e\u65b0\u305f\u306a\u8105\u5a01", "\u30e9\u30f3\u30c0\u30e0\u751f\u6210\u306e\u96e3\u3057\u3055\uff1aDart\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u554f\u984c", "OpenWRT\u306eSHA256\u885d\u7a81\u554f\u984c\uff1a\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u6539\u3056\u3093\u306e\u5371\u967a\u6027"]}