{"pubDate": "2023-08-26T05:00:37", "original_title": "Bypassing Bitlocker with a Logic Analzyer", "link": "https://hackaday.com/2023/08/25/bypassing-bitlocker-with-a-logic-analzyer/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/08/Snap-2023-08-25-21-33-22-featured.png", "original_content": "Security Engineer [Guillaume Qu\u00e9r\u00e9] spends the day penetration testing systems for their employer and has pointed out and successfully exploited a rather obvious weakness in the BitLocker full volume encryption system, which as the linked article says, allows one to simply sniff the traffic between the discrete TPM chip and CPU via an SPI bus. The way Bitlocker works is to use a private key stored in the TPM chip to encrypt the full volume key that in turn was used to encrypt the volume data. This is all done by low-level device drivers in the Windows kernel and is transparent to the user.\nTPM chip pins too small? Just find something else on the bus!\nThe whole point of BitLocker was to prevent access to data on the secured volume in the event of a physical device theft or loss. Simply pulling the drive and dropping it into a non-secured machine or some other adaptor would not provide any data without the key stored by the TPM. However, since that key must pass as plaintext from the TPM to the CPU during the boot sequence, [Guillaume] shows that it is quite straightforward \u2014 with very low-cost tools and free software \u2014 to simply locate and sniff out this TPM-to-CPU transaction and decode the datastream and locate the key. Using little more than a cheapo logic analyser hooked up to some conveniently large pins on a nearby flash chip (because the SCK, MISO, and MOSI pins are shared with the TPM) the simple TIS was decoded enough to lock onto the bytes of the TPM frame. This could then be decoded with a TPM stream decoder web app, courtesy of the TPM2-software community group. The command to look for is the TPM_CC.Unseal which is the request from the CPU to the TPM to send over that key were interested in. After that just grabbing and decoding the TPM response frame will immediately reveal the goods.\n\nWhat you do next is a matter of convenience, but most security and forensics types would already be sitting tight on a low-level disk image file of the target volume. By using the Linux xxd command to turn that 32-byte hex dump key into a binary key file, the dislocker-fuse FUSE module can create a dynamically decrypted virtual filesystem that you can just mount. If you wanted, you could then write the decrypted volume data to a fresh disk, drop it into a machine, and boot the operating system. You likely couldnt log in, but as [Guillaume] points out, by overwriting the sticky keys app (sethc.exe) with cmd.exe, you can get to a command prompt just by banging the shift key five times. Good times!\nIf you actually need TPM support for an older system, in order to install Windows 11 (if you really must) then you could always just make your own. Also, since the LPC interface is on many a motherboard, why not leverage it and use it to hang an ISA bus adaptor to plug in that old classic Soundblaster card you couldnt bear to junk?\n", "title": "BitLocker\u306e\u5f31\u70b9\u3092\u5229\u7528\u3057\u3066\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u6697\u53f7\u5316\u3092\u89e3\u8aad\u3059\u308b\u65b9\u6cd5", "body": "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a8\u30f3\u30b8\u30cb\u30a2\u306eGuillaume Qu\u00e9r\u00e9\u6c0f\u306f\u3001BitLocker\u30d5\u30eb\u30dc\u30ea\u30e5\u30fc\u30e0\u6697\u53f7\u5316\u30b7\u30b9\u30c6\u30e0\u306e\u660e\u3089\u304b\u306a\u8106\u5f31\u6027\u3092\u6307\u6458\u3057\u3001\u305d\u306e weakness \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002TPM\u30c1\u30c3\u30d7\u3068CPU\u9593\u306e\u30c8\u30e9\u30d5\u30a3\u30c3\u30af\u3092\u30b9\u30cb\u30d5\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u6697\u53f7\u5316\u30ad\u30fc\u3092\u5165\u624b\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306b\u3088\u308a\u3001BitLocker\u306e\u76ee\u7684\u3067\u3042\u308b\u30c7\u30fc\u30bf\u306e\u4fdd\u8b77\u304c\u56de\u907f\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u653b\u6483\u306b\u306f\u4f4e\u30b3\u30b9\u30c8\u306e\u30c4\u30fc\u30eb\u3068\u30d5\u30ea\u30fc\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304c\u5fc5\u8981\u3067\u3059\u3002", "titles": ["BitLocker\u306e\u5f31\u70b9\u3092\u5229\u7528\u3057\u3066\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u6697\u53f7\u5316\u3092\u89e3\u8aad\u3059\u308b\u65b9\u6cd5", "\u4f4e\u30b3\u30b9\u30c8\u30c4\u30fc\u30eb\u3068\u30d5\u30ea\u30fc\u30bd\u30d5\u30c8\u3067TPM\u30c1\u30c3\u30d7\u306e\u30c7\u30fc\u30bf\u3092\u76d7\u307f\u51fa\u3059", "TPM\u30c1\u30c3\u30d7\u3068CPU\u9593\u306e\u901a\u4fe1\u3092\u30b9\u30cb\u30d5\u30a3\u30f3\u30b0\u3059\u308b\u65b9\u6cd5", "TPM\u30d5\u30ec\u30fc\u30e0\u306e\u5fa9\u53f7\u5316\u306b\u3088\u308b\u6697\u53f7\u5316\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u30a2\u30af\u30bb\u30b9", "\u53e4\u3044\u30b7\u30b9\u30c6\u30e0\u3067\u3082Windows 11\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u305f\u3081\u306eTPM\u30b5\u30dd\u30fc\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5"]}