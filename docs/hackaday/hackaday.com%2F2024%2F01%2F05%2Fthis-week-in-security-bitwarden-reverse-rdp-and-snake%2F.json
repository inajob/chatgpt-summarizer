{"pubDate": "2024-01-05T15:00:44", "original_title": "This Week in Security: Bitwarden, Reverse RDP, and Snake", "link": "https://hackaday.com/2024/01/05/this-week-in-security-bitwarden-reverse-rdp-and-snake/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "This week, we finally get the inside scoops on some old stories, starting with the Bitwarden Windows Hello problem from last year. You may remember, Bitwarden has an option to use Windows Hello as a vault unlock option. Unfortunately, the Windows credential API doesnt actually encrypt credentials in a way that requires an additional Windows Hello verification to unlock. So a derived key gets stored to the credential manager, and can be retrieved through a simple API call. No additional biometrics needed. Even with the Bitwarden vault locked and application closed.\nTheres another danger, that doesnt even require access to the the logged-in machine. On a machine that is joined to a domain, Windows backs up those encryption keys to the Domain Controller. The encrypted vault itself is available on a domain machine over SMB by default. A compromised domain controller could snag a bitwarden vault without ever even running code on the target machine. The good news is that this particular problem with Bitwarden and Windows Hello is now fixed, and has been since version 2023.10.1.\nReverse RDP Exploitation\nWe normally think about the Remote Desktop Protocol as dangerous to expose to the internet. And it is. Dont put your RDP service online. But reverse RDP is the idea that it might also be dangerous to connect an RDP client to a malicious server. And of course, multiple RDP implementations have this problem. Theres rdesktop, FreeRDP, and Microsofts own mstsc that all have vulnerabilities relating to reverse RDP.\nThe technical details here arent terribly interesting. Its all variations on the theme of not properly checking remote data from the server, and hence either reading or writing past internal buffers. This results in various forms of information leaks and code executions problems. Whats interesting is the different responses to the findings, and then [Eyal Itkin]s takeaway about how security researchers should approach vulnerability disclosure.\nSo first up, Microsoft dismissed a vulnerability as unworthy of servicing. And then proceeded to research it internally, and present it as a novel attack without properly attributing [Eyal] for the original find. rdesktop contained quite a few of these issues, but were able to fix the problem in a handful of months. FreeRDP fixed some issues right away, in what could be described as a whack-a-mole style process, but a patch was cooked up that would actually address the problem at a deeper level: changing an API value from the unsigned size_t to a signed ssize_t. That change took a whopping 2 years to actually make it out to the world in a release. Why so long?\nTwo reasons for that long time lag. First off, it was a hardening change, not a response to a single vulnerability. It would have prevented a bunch of them all at once, but wasnt a required change to fix any of them individually. But even more importantly, this was an API change. It would break things. So, throw it into the major version branch and wait. And heres where theres a bit of a dilemma. Should a researcher blast the problem online, or wait patiently? Theres no single solid answer here, as every situation has its own complexities, but [Eyal] makes the case that security researchers ought to be more concerned with projects getting fixes applied, and not just content to score another CVE.\nCrawl Networks with SSH-Snake\nWe just discovered this clever tool this week: SSH-Snake. The concept is simple. The script looks for any SSH private keys, then tries them on the list of known ssh hosts. For each host that accepts a key, the script runs again. It doesnt drop any files on the filesystem, and runs automatically without intervention, compiling a nifty graph of accessible systems at the end. Definitely a worthwhile tool to keep in your digital toolbox.\nBits and Bytes\nIn an amusing turn of online play, Mandiant lost control of their X account for a while this week. It was a fun cat-and-mouse game as posts pushing crypto scams would appear, disappear, and appear again. One can only imagine the frantic work done behind the scenes as this played out. Hopefully we can share a Mandiant blogpost about this in a few weeks. And yes, theres an XKCD about that.\n\nAs you likely noticed, yesterday, Mandiant lost control of this X account which had 2FA enabled. Currently, there are no indications of malicious activity beyond the impacted X account, which is back under our control. We'll share our investigation findings once concluded.\n Mandiant (@Mandiant) January 4, 2024\n\nIf you still have a Lastpass account, you may have gotten emails this week about a master password requirement change in the works. The TL:DR is that Lastpass has previously required a 12 character password. Starting soon, all password will actually have to be 12 characters long, including those from older accounts. Itd probably be best to get out ahead of that change anyway, if you have a shorter password.\nIt does seem a bit tone-deaf, that 23andMe blames the victims for the recent account breaches there. users used the same usernames and passwords used on 23andMe.com as on other websites that had been subject to prior security breaches, and users negligently recycled and failed to update their passwords following these past security incidents. Except, thats technically correct. Users really were re-using passwords. And users really did opt in to sharing details with their genetic matches. The only real failure was that nobody at 23andMe spotted the credential stuffing attack as it was happening, but thats admittedly difficult to discern vs normal traffic. So probably an A- for the technical point. And a D for the delivery.", "title": "Bitwarden\u306eWindows Hello\u554f\u984c\u304c\u89e3\u6c7a\u6e08\u307f", "body": "Bitwarden\u306eWindows Hello\u554f\u984c\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u30ea\u30d0\u30fc\u30b9RDP\u306e\u8106\u5f31\u6027\u306b\u3064\u3044\u3066\u3082\u5831\u544a\u304c\u3042\u308a\u307e\u3057\u305f\u3002SSH-Snake\u3068\u3044\u3046\u4fbf\u5229\u306a\u30c4\u30fc\u30eb\u3082\u7d39\u4ecb\u3055\u308c\u307e\u3057\u305f\u3002", "titles": ["Bitwarden\u306eWindows Hello\u554f\u984c\u304c\u89e3\u6c7a\u6e08\u307f", "\u30ea\u30d0\u30fc\u30b9RDP\u306e\u8106\u5f31\u6027\u306b\u6ce8\u610f", "SSH-Snake\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u30af\u30ed\u30fc\u30eb", "Mandiant\u304cX\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u5236\u5fa1\u3092\u4e00\u6642\u5931\u3046", "Lastpass\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u8981\u4ef6\u306b\u5909\u66f4\u3042\u308a"]}