{"pubDate": "2024-02-22T15:00:00", "original_title": "Filters are in Bloom", "link": "https://hackaday.com/2024/02/22/filters-are-in-bloom/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/bloom.png", "original_content": "If you are a fan of set theory, you might agree there are two sets of people who write computer programs: those who know what a Bloom filter is and those who dont. How could you efficiently test to see if someone is one set or another? Well, you could use a Bloom filter.\u00a0 [SamWho] takes us through the whole thing in general terms that you could apply in any situation.\nThe Bloom filter does perform a trade-off for its speed. It is subject to false positives but not false negatives. That is, if a Bloom filter algorithm tells you that X is not part of a set, it is correct. But if it tells you it is, you may have to investigate more to see if thats true.\nIf it cant tell you that something is definitely in a set, why bother? Usually, when you use a Bloom filter, you want to reduce searching through a huge amount of data. The example in the post talks about having a 20-megabyte database of bad URLs. You want to warn users if they enter one, but downloading that database is prohibitive. But a Bloom filter could be as small as 1.8 megabytes. However, there would be a 1 in 1000 chance of a false positive.\nIncrease the database size to 3.59 megabytes, and you can reduce false positives to one in a million. Presumably, if you got a positive, you could accept the risk it is false, or you could do more work to search further.\nImagine, for example, a web cache device or program. Many web pages are loaded one time and never again. If you cache all of them, youll waste a lot of time and push other things out of the cache. But if you test a page URL with a Bloom filter, you can improve things quite a bit. If the URL may exist in the Bloom filter, then youve probably seen it before, so you might want to cache it.\nIf it says you havent, you can add it to the filter so if it is ever accessed again, it will cache. Sure, sometimes a page will show a false positive. So what? Youll just cache the page on the first time, which is what you did before, anyway. If that happens only 0.1% of the time, you still win.\nIn simple terms, the Bloom filter hashes each item using three different algorithms and sets bits in an array based on the result. To test an item, you compute the same hashes and see if any of the corresponding bits are set to zero. If so, the item cant be in the set. Of course, theres no assurance that all three bits being set means the set contains the item. Those three bits might be set for totally different items.\nWhy does increasing the number of bits help? The post answers that and looks at other optimizations like a different number of hash functions and counting.\nThe post does a great job of explaining the filter but if you want a more concrete example in C, you might want to read this post next. Or search for code in your favorite language. Weve talked about Python string handling with Bloom filters before. Weve even seen a proposal to add them to the transit bus.", "title": "\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\u4f55\u304b\uff1f", "body": "Bloom\u30d5\u30a3\u30eb\u30bf\u30fc\u306f\u3001\u9ad8\u901f\u3067\u30c7\u30fc\u30bf\u91cf\u3092\u524a\u6e1b\u3067\u304d\u308b\u304c\u3001\u8aa4\u691c\u77e5\u306e\u53ef\u80fd\u6027\u3082\u3042\u308b\u3002URL\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u5316\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u5229\u70b9\u3082\u3042\u308b\u3002\u30cf\u30c3\u30b7\u30e5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3044\u3001\u30d3\u30c3\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u4ed5\u7d44\u307f\u3002\u5897\u3084\u3057\u305f\u30d3\u30c3\u30c8\u6570\u306f\u6700\u9069\u5316\u306e\u4fc3\u9032\u306b\u6709\u7528\u3002", "titles": ["\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u306f\u4f55\u304b\uff1f", "\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u691c\u7d22\u306e\u6700\u9069\u5316", "\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5229\u7528\u3057\u305f\u30a6\u30a7\u30d6\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u52b9\u7387\u5316", "\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u4ed5\u7d44\u307f\u3068\u6700\u9069\u5316\u65b9\u6cd5", "\u30d6\u30eb\u30fc\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}