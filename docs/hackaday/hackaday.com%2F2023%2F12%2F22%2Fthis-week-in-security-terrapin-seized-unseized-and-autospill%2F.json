{"pubDate": "2023-12-22T15:00:54", "original_title": "This Week in Security: Terrapin, Seized Unseized, and Autospill", "link": "https://hackaday.com/2023/12/22/this-week-in-security-terrapin-seized-unseized-and-autospill/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Theres a new SSH vulnerability, Terrapin (pdf paper), and its got the potential to be nasty  but only in an extremely limited circumstance. To understand the problem, we have to understand what SSH is designed to do. It replaces telnet as a tool to get a command line shell on a remote computer. Telnet send all that text in the clear, but SSH wraps it all inside a public-key encrypted tunnel. It was designed to safely negotiate an unfriendly network, which is why SSH clients are so explicit about accepting new keys, and alerting when a key has changed.\nSSH uses a sequence counter to detect Man-in-the-Middle (MitM) shenanigans like packet deletion, replay, or reordering. That sequence isnt actually included in the packet, but is used as part of the Message Authentication Check (MAC) of several encryption modes. This means that if a packet is removed from the encrypted tunnel, the MAC fails on the rest of the packets, triggering a complete connection reset. This sequence actually starts at zero, with the first unencrypted packet sent after the version banners are exchanged. In theory, this means that an attacker fiddling with packets in the pre-encryption phase will invalidate the entire connection as well. Theres just one problem.\nThe innovation from the Terrapin researchers is that an attacker with MitM access to the connection can insert a number of benign messages in the pre-encryption phase, and then silently drop the first number of messages in the encrypted phase. Just a little TCP sequence rewriting for any messages between, and neither the server nor client can detect the deception. Its a really interesting trick  but what can we do with it?\nFor most SSH implementations, not much. The 9.6 release of OpenSSH addresses the bug, calling it cryptographically novel, but noting that the actual impact is limited to disabling some of the timing obfuscation features added to release 9.5.\n\nThere is no other discernable impact to session secrecy or session integrity.\nHowever, for at least one other SSH server, AsyncSSH, theres quite a bit more at stake. This Python library is both an SSH server and client, and theres a Terrapin vulnerability in each. For an AsyncSSH client, the vulnerability allows injection of extension info messages prior to the transition to encrypted. The example given is that the client authentication algorithm can be downgraded, which doesnt seem particularly useful.\nThe more notable vulnerability is when any SSH client is used to connect to an AsynchSSH server. If the attacker also has an account on that server, the victims connection can be routed into an attacker-controlled shell. While this does not break SSH encryption directly, it has essentially the same effect. This is not a sky-is-falling sort of vulnerability, as the prerequisite set of circumstances are very narrow for exploitation. It is definitely a unique and novel approach, and we anticipate more findings from other researchers building on the technique.\nAlphV Has been Seized  and Unseized\nIn a hilarious saga, the FBI has played tag with AlphV over a .onion ransomware site. A TOR onion service uses a public-private key, where the public key is the .onion address, and the private key controls all the routing magic that connects a user to the service. The FBI apparently nabbed the physical server, and used that captured private key to redirect the .onion address to the takedown page.\nApparently the AlphV admins have retained control of that private key, too, as a rather cheeky message kept replacing the FBIs notice. In the unseized version, a black cat presents a new .onion address. Oh, and in retribution for the slight, AlphV has rescinded their restriction against targeting hospitals and other critical infrastructure. The one cutout that remains is their reluctance to target the Commonwealth of Independent States, AKA the old Soviet Union.\nAutospill\nThis one initially sounds pretty bad. Android apps get access to password manager credentials. But a bit deeper look might temper our distress. So first, remember that Android apps have a native view for normal operations, and also have a webview for showing web content. The problem here is that when a password manager autofills into a website in that webview, the contents are leaked back into the native apps interface.\nThe threat model then, is that an untrusted app launches a website for an Log in with authentication flow. Your password manager detects the Facebook/Google/Microsoft site, and offers to autofill credentials. And upon autofilling, the app itself now has captured them. Its taking a bit for Google and password manager companies to agree on exactly whos problem this is, and if fixes are necessary. For more details, there is a PDF available.\nBits and Bytes\nHash collisions are generally a bad thing. If a hashing algorithm has any feasible chance of collision, its time to retire it for any serious work. But what if we only needed to collide the first 7 bytes? In use with git, for instance, SHA-256 often gets truncated to the first 7 bytes for usability sake. How hard is it to collide those? And what about adding the last 7 bytes? [David Buchanan] ran the numbers for us, and lets just say that you really need to check all the bytes of a 256-bit hash for cryptographic robustness. With some tricks for efficiency, 128 bits of a SHA256 hash only costs $93,000 and would take about a month.\nHeres a new/old idea: Send an email, include a  . , and second email with full headers. What will the receiving mail server do? In some cases, this odd email is seen as a single message, and in some cases, its two. In other words, you get SMTP smuggling. This is really a problem, as it tricks one email host into sending your arbitrary emails as trusted messages. Want to send a message as bill.gates(at)microsoft.com, and have the DKIM check out? Smuggle a message through the office365 servers! On the other hand, this one has already been disclosed to a bunch of vulnerable services, so youve probably lost your chance.\nAnd for a bit of fun, Microsofts Phishing Simulator catches real Phish! That is, Microsoft now has an Attack Simulator tool that can help you send fake phishing emails, to help train users not to click on that link. [Vaisha Bernard] was giving the tool a test run, and realized that one of the bogus links was off to a non-existent confluence page, and being sent from an unregistered domain. Register both, and that phishing simulator has real teeth. Apparently [Vaisha] earned multiple bug bounties on finally get the whole problem fixed, which goes to show it pays to be curious.", "title": "\u65b0\u305f\u306aSSH\u8106\u5f31\u6027 \"Terrapin\" \u306e\u5f71\u97ff\u7bc4\u56f2\u306f\u9650\u5b9a\u7684", "body": "\u65b0\u3057\u3044SSH\u306e\u8106\u5f31\u6027\u300cTerrapin\u300d\u306f\u9650\u5b9a\u7684\u306a\u72b6\u6cc1\u4e0b\u3067\u3057\u304b\u554f\u984c\u306b\u306a\u3089\u306a\u3044\u3002OpenSSH 9.6\u3067\u4fee\u6b63\u3055\u308c\u308b\u3002\u307e\u305f\u3001AsyncSSH\u306b\u3082\u5f71\u97ff\u3042\u308a\u3002AlphV\u306e.onion\u30e9\u30f3\u30b5\u30e0\u30a6\u30a7\u30a2\u30b5\u30a4\u30c8\u3092FBI\u304c\u53d6\u308a\u7de0\u307e\u308a\u3001Autospill\u3067\u306eAndroid\u30a2\u30d7\u30ea\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u6f0f\u6d29\u3001Git\u306e\u30cf\u30c3\u30b7\u30e5\u885d\u7a81\u3082\u61f8\u5ff5\u3055\u308c\u308b\u3002", "titles": ["\u65b0\u305f\u306aSSH\u8106\u5f31\u6027 \"Terrapin\" \u306e\u5f71\u97ff\u7bc4\u56f2\u306f\u9650\u5b9a\u7684", "AsyncSSH\u306e\u8106\u5f31\u6027\u306b\u3088\u308a\u3001\u653b\u6483\u8005\u304c\u5236\u5fa1\u3059\u308b\u30b7\u30a7\u30eb\u306b\u63a5\u7d9a\u53ef\u80fd\u306b", "AlphV\u304c\u6355\u7372\u30fb\u89e3\u653e\u3055\u308c\u308b\u4e00\u65b9\u3067\u3001\u75c5\u9662\u3084\u91cd\u8981\u30a4\u30f3\u30d5\u30e9\u3078\u306e\u653b\u6483\u304c\u518d\u958b", "Android\u30a2\u30d7\u30ea\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u304c\u6f0f\u3048\u3044\u3001\u4fee\u6b63\u304c\u6c42\u3081\u3089\u308c\u308b", "Git\u3067\u306eSHA-256\u30cf\u30c3\u30b7\u30e5\u306e\u885d\u7a81\u53ef\u80fd\u6027\u304c\u660e\u3089\u304b\u306b"]}