{"pubDate": "2023-08-23T11:00:48", "original_title": "Guitar Distortion with Diodes in Code, Not Hardware", "link": "https://hackaday.com/2023/08/23/guitar-distortion-with-diodes-in-code-not-hardware/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/08/diodes_in_code.png", "original_content": "Guitarists will do just about anything to get just the right sound out of their setup, including purposely introducing all manner of distortion into the signal. It seems counter-intuitive, but it works, at least when its done right. But what exactly is going on with the signal? And is there a way to simulate it? Of course there is, and all it takes is a little math and some Arduino code.\nNow, there are a lot of different techniques for modifying the signal from an electric guitar, but perhaps the simplest is the humble diode clipping circuit. It just uses an op-amp with antiparallel diodes either in series in the feedback loop or shunting the output to ground. The diodes clip the tops and bottoms off of the sine waves, turning them into something closer to a square wave, adding those extra harmonics that really fatten the sound. Its a simple hack thats easy to implement in hardware, enough so that distortion pedals galore are commercially available.\nIn the video below, [Sebastian] explains that this distortion is also pretty easy to reproduce algorithmically. He breaks down the math behind this, which is actually pretty approachable  a step function with a linear part, a quadratic section, and a hard-clipping function. He also derives a second, natural exponent step function from the Schockley diode equation that is less computationally demanding. To implement these models, [Sebastian] chose an Arduino GIGA R1 WiFi, using an ADC to digitize the guitar signal and devoting a DAC to each of the two algorithms. Each distortion effect has its own charms; we prefer the harsher step function over the exponential algorithm, but different strokes.\nKudos to [Sebastian] for this easy-to-understand treatment of what could otherwise be a difficult subject to digest. We didnt really expect that a guitar distortion pedal would lead down the rabbit hole to diode theory and digital signal processing, but were glad it did.\n\n", "title": "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30ae\u30bf\u30fc\u306e\u6b6a\u307f\u52b9\u679c\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5", "body": "\u30ae\u30bf\u30fc\u306e\u4fe1\u53f7\u3092\u6b6a\u307e\u305b\u308b\u65b9\u6cd5\u3084\u30c7\u30b8\u30bf\u30eb\u51e6\u7406\u306b\u3064\u3044\u3066\u89e3\u8aac\u3002\u30c0\u30a4\u30aa\u30fc\u30c9\u3092\u4f7f\u3044\u3001\u7c21\u5358\u306b\u97f3\u3092\u592a\u304f\u3059\u308b\u65b9\u6cd5\u3082\u7d39\u4ecb\u3002Arduino\u3092\u4f7f\u3044\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7684\u306b\u518d\u73fe\u3067\u304d\u308b\u3053\u3068\u3082\u793a\u3057\u305f\u3002\u30ae\u30bf\u30fc\u611b\u597d\u5bb6\u306b\u306f\u8208\u5473\u6df1\u3044\u5185\u5bb9\u3002", "titles": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30ae\u30bf\u30fc\u306e\u6b6a\u307f\u52b9\u679c\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5", "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3067\u306f\u306a\u304f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u30ae\u30bf\u30fc\u306e\u6b6a\u307f\u52b9\u679c\u3092\u518d\u73fe\u3059\u308b", "\u30c0\u30a4\u30aa\u30fc\u30c9\u56de\u8def\u3092\u4f7f\u7528\u3057\u305f\u7c21\u5358\u306a\u30ae\u30bf\u30fc\u306e\u6b6a\u307f\u52b9\u679c\u306e\u5b9f\u88c5\u65b9\u6cd5", "Arduino\u3092\u4f7f\u7528\u3057\u3066\u30ae\u30bf\u30fc\u306e\u6b6a\u307f\u52b9\u679c\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5", "\u30ae\u30bf\u30fc\u306e\u6b6a\u307f\u52b9\u679c\u306b\u95a2\u3059\u308b\u6570\u5b66\u3068\u30c7\u30b8\u30bf\u30eb\u4fe1\u53f7\u51e6\u7406\u306e\u89e3\u8aac"]}