{"pubDate": "2023-07-01T05:00:54", "original_title": "Creating a Commodore 64 Cartridge on Single-Sided Stripboard", "link": "https://hackaday.com/2023/06/30/creating-a-commodore-64-cartridge-on-single-sided-stripboard/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/06/c64-rom-cart-featured.jpg", "original_content": "The DIY Commodore 64 cartridge. (Credit: Linus \u00c5kesson)\nWhen you want to write software for a system like the Commodore 64, the obvious and safe choice is to create an image that can be used with a tape or floppy drive emulator. Yet these come with the obvious disadvantage of loading time and manual steps, much like with the original hardware. Unfortunately, if you crave that instant-on experience that cartridges offer  courtesy of them being plugged directly into the systems CPU bus  you better get an EE diploma to figure it all out. Or maybe not, as [Linus \u00c5kesson] found out when he created a custom cartridge to boot his Commodordian project from.\nFor the core of the cartridge a bit of stripboard was sufficient to interface with the C64s cartridge slot. Despite being single-sided, all the required signals were on one side of the slot. These include the EXROM line that informs the system that a cartridge is present, the ROML line that informs the cartridge when the system is trying to read from it, and of course the data bus. After this the interaction gets somewhat interesting, due to the use of the single-sided stripboard, as the address bus and other signals are on the non-connected side.\nWorking around this was the biggest challenge, but by creatively using the ROML and DotClk lines and by disabling the display output, the ATmega88 and 74HC541-based cartridge a working solution was created. There is still room for improvement here, naturally, but it would appear that if the goal is simply to autoload software on boot, this is definitely a workable solution. One could also splurge on double-sided stripboard, but that would strip away most of the fun of this solution.", "title": "\u81ea\u4f5c\u306e\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u3067Commodore 64\u3092\u8d77\u52d5\u3059\u308b\u65b9\u6cd5", "body": "DIY\u306eCommodore 64\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u5236\u4f5c\u3002\u30b7\u30f3\u30b0\u30eb\u30b5\u30a4\u30c9\u306e\u30b9\u30c8\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u3067\u4f5c\u6210\u3002ROML\u3068DotClk\u30e9\u30a4\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u81ea\u52d5\u7684\u306b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\u6539\u5584\u306e\u4f59\u5730\u3042\u308a\u3002", "titles": ["\u81ea\u4f5c\u306e\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u3067Commodore 64\u3092\u8d77\u52d5\u3059\u308b\u65b9\u6cd5", "Commodore 64\u306b\u7279\u88fd\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u3092\u63a5\u7d9a\u3057\u3066\u81ea\u52d5\u8d77\u52d5\u3059\u308b", "DIY\u306e\u30b9\u30c8\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u305fCommodore 64\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u306e\u4f5c\u6210", "Commodore 64\u306e\u8d77\u52d5\u6642\u9593\u3092\u30c9\u30e9\u30b9\u30c6\u30a3\u30c3\u30af\u306b\u77ed\u7e2e\u3059\u308b\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u4f5c\u6210", "ATmega88\u306874HC541\u3092\u4f7f\u7528\u3057\u305f\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u3067Commodore 64\u3092\u8d77\u52d5\u3059\u308b\u65b9\u6cd5"]}