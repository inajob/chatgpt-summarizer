{"pubDate": "2024-10-12T17:00:16", "original_title": "Approximating an ADC with Successive Approximation", "link": "https://hackaday.com/2024/10/12/approximating-an-adc-with-successive-approximation/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/10/sar.png", "youtube": "https://www.youtube.com/watch?v=fSeNl2bQi5Y", "original_content": "[Igor] made a VU meter with LEDs using 8 LEDs and 8 comparators. This is a fast way to get one of 8 bits to indicate an input voltage, but thats only the equivalent of a 3-bit analog to digital converter (ADC). To get more bits, you have to use a smarter technique, such as successive approximation. He shows a chip that uses that technique internally and then shows how you can make one without using the chip.\nThe idea is simple. You essentially build a specialized counter and use it to generate a voltage that will perform a binary search on an unknown input signal. For example, assuming a 5 V reference, you will guess 2.5 V first. If the voltage is lower, your next guess will be 1.25 V. If 2.5 was the low voltage, your next guess will be 3.75 V.\nThe process repeats until you get all the bits. You can do this with a microcontroller or, as [Igor] shows, with a shift register quite simply. Of course, you can also buy the whole function on a chip like the one he shows at the start of the video. The downside, of course, is the converter is relatively slow, requiring some amount of time for each bit. The input voltage also needs to stay stable over the conversion period. Thats not always a problem, of course.\nIf that explanation didnt make sense, watch the video. An oscilloscope trace is often worth at least 1,000 words.\nThere are, of course, many ways to do such a conversion. Of course, when you start trying to really figure out how many bits of resolution you have or need, it gets tricky pretty fast.\n\n", "title": "LED\u3092\u4f7f\u7528\u3057\u305fVU\u30e1\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u65b9\u6cd5", "body": "Igor\u306f8\u3064\u306eLED\u30688\u3064\u306e\u6bd4\u8f03\u5668\u3092\u4f7f\u3063\u3066VU\u30e1\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u5f7c\u306f\u5b9f\u969b\u306b\u306f3\u30d3\u30c3\u30c8\u306e\u30a2\u30ca\u30ed\u30b0\u30c7\u30b8\u30bf\u30eb\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\uff08ADC\uff09\u3067\u3042\u308b\u3053\u3068\u3092\u8aac\u660e\u3057\u3001\u3088\u308a\u591a\u304f\u306e\u30d3\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3057\u305f\u3002", "titles": ["LED\u3092\u4f7f\u7528\u3057\u305fVU\u30e1\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u65b9\u6cd5", "8\u30d3\u30c3\u30c8\u304b\u30893\u30d3\u30c3\u30c8ADC\u3078\u306e\u5909\u63db", "\u3088\u308a\u9ad8\u7cbe\u5ea6\u306eADC\u3078\u306e\u30b9\u30c6\u30c3\u30d7\u30a2\u30d7\u30ed\u30fc\u30c1", "\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u4f7f\u7528\u3057\u305fADC\u306e\u4f5c\u6210\u65b9\u6cd5", "\u9ad8\u7cbe\u5ea6ADC\u306e\u8a08\u6e2c\u3068\u5468\u8fba\u306e\u6ce8\u610f\u4e8b\u9805"]}