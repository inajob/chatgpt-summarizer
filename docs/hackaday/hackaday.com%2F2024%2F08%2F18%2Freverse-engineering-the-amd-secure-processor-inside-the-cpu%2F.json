{"pubDate": "2024-08-18T11:00:44", "original_title": "Reverse-Engineering the AMD Secure Processor Inside the CPU", "link": "https://hackaday.com/2024/08/18/reverse-engineering-the-amd-secure-processor-inside-the-cpu/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/08/DqioI3d.png", "original_content": "On an x86 system the BIOS is the first part of the system to become active along with the basic CPU core(s) functionality, or so things used to be until Intel introduced its Management Engine (IME) and AMD its AMD Secure Processor (AMD-SP). These are low-level, trusted execution environments, which in the case of AMD-SP involves a Cortex-A5 ARM processor that together with the Cryptographic Co-Processor (CCP) block in the CPU perform basic initialization functions that would previously have been associated with the (UEFI) BIOS like DRAM initialization, but also loading of encrypted (AGESA) firmware from external SPI Flash ROM. Only once the AMD-SP environment has run through all the initialization steps will the x86 cores be allowed to start up.\nIn a detailed teardown by [Specter] over at the Dayzerosec blog the AMD-SPs elements, the used memory map\u00a0 and integration into the rest of the CPU die are detailed, with a follow-up article covering the workings of the CCP. The latter is used both by the AMD-SP as well as being part of the cryptography hardware acceleration ISA offered to the OS. Where security researchers are interested in the AMD-SP (and IME) is due to the fascinating attack vectors, with the IME having been the most\u00a0targeted, but AMD-SP having its own vulnerabilities, including in related modules, such as an injection attack against AMDs Secure Encrypted Virtualization (SEV).\nAlthough both AMD and Intel are rather proud of how these bootstrapping systems enable TPM, secure virtualization and so on, their added complexity and presence invisible to the operating system clearly come with some serious trade-offs. With neither company willing to allow a security audit, it seems its up to security researchers to do so forcefully."}