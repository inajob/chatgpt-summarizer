{"pubDate": "2024-05-22T18:30:12", "original_title": "Amber Compiles to Bash", "link": "https://hackaday.com/2024/05/22/amber-compiles-to-bash/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/05/amber.png", "original_content": "It certainly isnt a new idea to compile a language into an intermediate language. The original C++ compiler outputs C code, for example. Enhanced versions of Fortran were often just conversions of new syntax to old syntax. Of course, it makes sense to output to some language that can run on lots of different platforms. So, using that logic, Amber makes perfect sense. It targets  no kidding  bash. You write with nice modern syntax and compile-time checks. The output is a bash script. Admittedly, sometimes a hard-to-read bash script, but still.\nIf you want to see the source code, it is available on GitHub. Since Windows doesnt really support bash  if you dont count things like Cygwin and WSL  Amber only officially supports Linux and MacOS. In addition to compiling files, Amber can also execute scripts directly which can be useful for a quick one-liner. If you use Visual Studio Code, you can find a syntax highlighter extension for Amber.\n\nTo get a flavor of how it works, heres a simple Amber file to rename some files:\n\nlet files = [config.json, file.txt, audio.mp3]\n\nloop index, file in files {\n   $mv {file} {index}{file}$ failed {\n      echo Failed to rename {file}\n   }\n}\n\nHeres the output shell script:\n\n__AMBER_ARRAY_0=(config.json file.txt audio.mp3);\n__0_files=(${__AMBER_ARRAY_0[@]});\nindex=0;\nfor file in ${__0_files[@]}\ndo\n   mv ${file} ${index}${file}\n__AMBER_STATUS=$?;\nif [ $__AMBER_STATUS != 0 ]; then\n   echo Failed to rename ${file}\nfi\n   let index=${index}+1\ndone\n\nLooks much easier. Still, bash isnt that hard. If you must have bash scripts for some reason, this might be worth a look. As a general-purpose programming language, you should probably stick with something more traditional.\nCatching errors early is a good thing, but there are other ways to do that. While you could probably use a debugger on the output bash code, it looks a bit hard to follow, so an Amber debugger would be welcome.", "title": "Amber: Bash\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u8a00\u8a9e", "body": "Amber\u306fbash\u306b\u51fa\u529b\u3055\u308c\u308b\u8a00\u8a9e\u3067\u3001\u73fe\u4ee3\u7684\u306a\u69cb\u6587\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002Windows\u306f\u975e\u516c\u5f0f\u5bfe\u5fdc\u3067\u3001GitHub\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002Visual Studio Code\u3067\u306f\u69cb\u6587\u5f37\u8abf\u8868\u793a\u62e1\u5f35\u6a5f\u80fd\u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002", "titles": ["Amber: Bash\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u8a00\u8a9e", "Amber: \u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3057\u3066\u306e\u4f7f\u3044\u65b9", "Amber: \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u30b5\u30dd\u30fc\u30c8\u3068\u6a5f\u80fd", "Amber: \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u516c\u958b\u3068GitHub", "Amber: \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u306e\u305f\u3081\u306eVS Code\u62e1\u5f35\u6a5f\u80fd"]}