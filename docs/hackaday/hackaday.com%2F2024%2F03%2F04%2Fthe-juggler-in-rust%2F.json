{"pubDate": "2024-03-04T09:00:25", "original_title": "The Juggler: In Rust", "link": "https://hackaday.com/2024/03/04/the-juggler-in-rust/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/juggler_720p-ezgif.com-cut.gif", "original_content": "Back on the theme of learning to program by taking on a meaningful project \u2014 we have another raytracing demo \u2014 this time using Rust on the Raspberry Pi. [Unfastener] saw our previous article about writing a simple raytracer in spectrum BASIC and got inspired to try something similar. The plan was to recreate the famous juggler 3D demo, from the early days of 3D rendering on the Amiga.\nThe juggler story starts with an Amiga programmer called [Eric Graham] who created ssg, the first ray tracer application on a personal computer. A demo was shown to Commodore, who didnt believe it was done on their platform, but a quick follow-up with the actual software used soon quelled their doubts. Once convinced, they purchased the rights to the demo for a couple of thousand dollars (in 1986 money, mind you) to use in promotional materials. [Eric] developed ssg into the popular Sculpt 3D, which became available also on Mac and Windows platforms, and kick-started a whole industry of personal 3D modelling and ray tracing.\nAnyway, back to the point. [Unfastener] needed to get up the considerable Rust learning curve, and the best way to do that is to let someone else take care of some of the awkward details of dealing with GUI, and just concentrate on the application. To that end, they use the softbuffer and winit Rust crates that deal with the (important, yet frankly uninteresting) details of building frame buffers and pushing the pixels out to the window manager in a cross-platform way. Vecmath takes care of \u2014 you guessed it \u2014 the vector math. Theres no point reinventing that wheel either. Whilst [Unfastener] mentions the original Amiga demo took about an hour per frame to render, this implementation runs in real-time. To that end, the code performs a timed pre-render to determine the most acceptable resolution to get an acceptable frame rate, achieving a respectable 30 or so frames per second on a Pi 5, with the older Pis needing to drop the resolution a little. This goes to show how efficient Rust code can be and, how capable the new Pi is. How far we have come.\nWe saw another interesting rust-based raytracer a while back, which is kinda fun. Weve also covered rust in other applications a few times, like inside the Linux kernel. Finally heres our guide to getting started with rust, in case you need any more motivation to have a crack at this upcoming language.", "title": "Raspberry Pi\u3067Rust\u3092\u4f7f\u7528\u3057\u305f3D\u30c7\u30e2\u4f5c\u6210", "body": "Raspberry Pi\u4e0a\u3067Rust\u3092\u4f7f\u7528\u3057\u3066\u30b8\u30e3\u30b0\u30e9\u30fc3D\u30c7\u30e2\u3092\u518d\u73fe\u3002Amiga\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u5143\u7956\u3001ssg\u304b\u3089\u6d3e\u751f\u3057\u305fSculpt 3D\u306a\u3069\u3001\u6b74\u53f2\u7684\u306a\u30a8\u30d4\u30bd\u30fc\u30c9\u3084Rust\u306e\u52b9\u7387\u6027\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3002Rust\u306e\u5b66\u7fd2\u3068\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306b\u6210\u529f\u3002 Rust\u306b\u95a2\u3059\u308b\u30ac\u30a4\u30c9\u3082\u63d0\u4f9b\u3002", "titles": ["Raspberry Pi\u3067Rust\u3092\u4f7f\u7528\u3057\u305f3D\u30c7\u30e2\u4f5c\u6210", "\u30d4\u30af\u30bb\u30eb\u51e6\u7406\u306e\u8a73\u7d30\u3092Rust\u30af\u30ec\u30fc\u30c8\u304c\u62c5\u5f53", "Amiga\u6642\u4ee3\u306e3D\u30c7\u30e2\u3092\u518d\u73fe", "Rust\u3067\u52b9\u7387\u7684\u306a\u5b9f\u884c", "Rust\u3092\u5b66\u3073\u3001GUI\u306e\u8a73\u7d30\u3092\u4ed6\u8005\u306b\u59d4\u8a17"]}