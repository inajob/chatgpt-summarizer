{"pubDate": "2023-06-26T08:00:59", "original_title": "How Hardware Testing Got Plugged Into a Continuous Integration Framework", "link": "https://hackaday.com/2023/06/26/how-hardware-testing-got-plugged-into-a-continuous-integration-framework/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/06/Hardware-CI-Arena.png", "original_content": "The concept of Continuous Integration (CI) is a powerful tool in software development, and its not every day we get a look at how someone integrated automated hardware testing into their system. [Michael Orenstein] brought to our attention the\u00a0Hardware CI Arena, a framework for doing exactly that across a variety of host OSes and microcontroller architectures.\nThe Hardware CI Arena allows testing software across a variety of hardware boards such as Arduino, RP2040, ESP32, and more.\nHeres the reason it exists: while in theory every OS and piece of hardware implements things like USB communications and device discovery in the same way, in practice that is not always the case. For individual projects, the edge cases (or even occasional bugs) are not much of a problem. But when one is developing a software product that aims to work seamlessly across different hardware options, such things get in the way. To provide a reliable experience, one must find and address edge cases.\nThe Hardware CI Arena (GitHub repository) was created to allow automated testing to be done across a variety of common OS and hardware configurations. It does this by allowing software-controlled interactions to a bank of actual, physical hardware options. Its purpose-built for a specific need, but the level of detail and frank discussion of the issues involved is an interesting look at what it took to get this kind of thing up and running.\nThe value of automatic hardware testing with custom rigs is familiar ground to anyone who develops hardware, but tying that idea into a testing and CI framework for a software product expands the idea in a useful way. When it comes to identifying problems, earlier is always better."}