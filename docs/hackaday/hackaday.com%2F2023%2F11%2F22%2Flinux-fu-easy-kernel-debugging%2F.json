{"pubDate": "2023-11-22T18:00:37", "original_title": "Linux Fu: Easy Kernel Debugging", "link": "https://hackaday.com/2023/11/22/linux-fu-easy-kernel-debugging/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "It used to be that building the Linux kernel was not easy. Testing and debugging were even worse. Nowadays, it is reasonably easy to build a custom kernel and test or debug it using virtualization. But if you still find it daunting, try [deepseagirls] script to download, configure, build, and debug the kernel.\nThe Python program takes command line arguments so you can select a kernel version and different operations. The script can download the source, patch the configuration, build the kernel, and then package it into a Debian package you can boot under qemu. From there, you can test and even debug with gdb. No risk of hosing your everyday system and no need to understand how to configure everything to run.\n\nIf you are impatient, the -a option will do everything. For example, to build the 6.2 kernel, you could execute:\npython3 easylkb.py -k 6.2 -a\nThis will take a few minutes and tax your CPU as it builds lots of files using as many CPUs as it can find. Usually, though, youll want to change the configuration a bit. You can use the -d flag to simply download the kernel source.\nYoull find the source in the kernel subdirectory of the directory where easylkb lives. There will be a subdirectory for each kernel version youve downloaded. Theres also a create-image.sh file that needs the execute bit set on it. If you fail to do this, part of the packaging process will probably fail. If you get an error message, youll have to find the copy of the script and set the flag there (for example, linux-6.2/img/create-image.sh).\nSource Control\nUsing xconfig is handy and explains options, too.\nIf you already have a kernel source tree, the -p option will let you point to that instead of specifying a kernel version with -k. If you specify a version, you can specify the -d option to download it.\nOnce downloaded, you might want to go to the directory and change the configuration using one of the config options in make. While make config is classic, youll probably prefer make menuconfig or make xconfig to make life easier. You can also run make help to see all the options available.\nYou can specify a configuration file to append to the kernels configuration using kconfig. By default, the example.KConfig file sets some options useful for debugging under qemu.\nBuilding and Running\nThe next step is to use the -m option to compile the kernel. That will take a bit of time and probably make your machine sluggish. Once it is done, you can use the -i option to build a bootable package for qemu.\nThe virtual system booting up\nThe only thing left to do is boot the system up with -r. Youll see the familiar boot console running in your terminal. The project documentation has some tips on how to ssh into the virtual system and how to use gdb to debug the kernel.\nIf you just want to do everything, use -a. It will either download the kernel (if you use -k) or pick up the one you specify with -p. You can also do several steps in one run. For example, if you want to configure and make but nothing else, you could use something like:\npython3 easylkb -p /tmp/ksource -cm\nWrap Up\nDo you have to use this script? Of course not. People have been building kernels for a long time. But it does let you focus on the actual problem at hand and less on having to worry about how to package and boot the kernel for testing.\nWe arent shocked that the script wont work for kernel 0.01. Need to know what that strange Linux kernel function does? Map it."}