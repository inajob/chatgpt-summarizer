{"pubDate": "2025-06-13T14:00:55", "original_title": "This Week in Security: The Localhost Bypass, Reflections, and X", "link": "https://hackaday.com/2025/06/13/this-week-in-security-the-localhost-bypass-reflections-and-x/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Facebook and Yandex have been caught performing user-hostile tracking. This sort of makes today just another Friday, but this is a bit special. This time, its Local Mess. OK, its an attack with a dorky name, but very clever. The short explanation is that web sites can open connections to localhost. And on Android, apps can be listening to those ports, allowing web pages to talk to apps.\nThat may not sound too terrible, but theres a couple things to be aware of. First, Android (and iOS) apps are sandboxed  intentionally making it difficult for one app to talk to another, except in ways approved by the OS maker. The browser is similarly sandboxed away from the apps. This is a security boundary, but it is especially an important security boundary when the user is in incognito mode.\nThe tracking Pixel is important to explain here. This is a snippet of code, that puts an invisible image on a website, and as a result allows the tracker to run JavaScript in your browser in the context of that site. Facebook is famous for this, but is not the only advertising service that tracks users in this way. If youve searched for an item on one site, and then suddenly been bombarded with ads for that item on other sites, youve been tracked by the pixel.\nThis is most useful when a user is logged in, but on a mobile device, the user is much more likely to be logged in on an app and not the browser. The constant pressure for more and better data led to a novel and completely unethical solution. On Android, applications with permission to access the Internet can listen on localhost (127.0.0.1) on unprivileged ports, those above 1024.\nFacebook abused this quirk by opening a WebRTC connection to localhost, to one of the ports the Facebook app was listening on. This triggers an SDP connection to localhost, which starts by sending a STUN packet, a UDP tool for NAT traversal. Packed into that STUN packet is the contents of a Facebook Cookie, which the Facebook app happily forwards up to Facebook. The browser also sends that cookie to Facebook when loading the pixel, and boom Facebook knows what website youre on. Even if youre not logged in, or incognito mode is turned on.\nYandex has been doing something similar since 2017, though with a different, simpler mechanism. Rather than call localhost directly, Yandex just sets aside yandexmetrica.com for this purpose, with the domain pointing to 127.0.0.1. This was just used to open an HTTP connection to the native Yandex apps, which passed the data up to Yandex over HTTPS. Meta apps were first seen using this trick in September 2024, though its very possible it was in use earlier.\nBoth companies have ceased since this report was released. Whats interesting is that this is a flagrant violation of GDPR and CCPA, and will likely lead to record-setting fines, at least for Facebook.\n\nWhats your Number?\nAn experiment in which Google sites still worked with JavaScript disabled led to a fun discovery about how to sidestep rate limiting and find any Google users phone number. Google has deployed defensive solutions to prevent attackers from abusing endpoints like accounts.google.com/signing/usernamerecovery. That particular endpoint still works without JS, but also still detects more than a few attempts, and throws the captcha at anyone trying to brute-force it.\nThis is intended to work by JS in your browser performing a minor proof-of-work calculation, and then sends in a bgRequest token. On the no-JavaScript version of the site, that field instead was set to js_disabled. What happens if you simply take the valid token, and stuff it into your request? Profit! This unintended combination bypassed rate-limiting, and means a phone number was trivially discoverable from just a users first and last names. It was mitigated in just over a month, and [brutecat] earned a nice $5000 for the effort.\nCatching Reflections\nTheres a classic Active Directory attack, the reflection attack, where you can trick a server into sending you an authentication, and then deliver that authentication data directly back to the origin server. Back before 2008, this actually worked on AD servers. The crew at RedTeam Pentesting brought this attack back in the form of doing it with Kerberos.\nIts not a trivial attack, and just forcing a remote server to open an SMB connection to a location the attack controls is an impressive vulnerability. The trick is a hostname that includes the target name and a base64 encoded CREDENTIAL_TARGET_INFORMATIONW all inside the attackers valid hostname. This confuses the remote, triggering it to act as if its authenticating to itself. Forcing a Kerberos authentication instead of NTLM completes the attacker magic, though theres one more mystery at play.\nWhen the attack starts, the attacker has a low-privileged computer account. When it finishes, the access is at SYSTEM level on the target. Its unclear exactly why, though the researchers theorize that a mitigation intended to prevent almost exactly this privilege escalation is the cause.\nX And the Juicebox\nX has rolled out a new end to end encrypted chat solution, XChat. Its intended to be a significant upgrade from the previous iteration, but not everyone is impressed. Truly end to end encryption is extremely hard to roll out at scale, among other reasons, because users are terrible at managing cryptography keys. The solution generally is for the service provider to store the keys instead. But what is the point of end-to-end encryption when the company holds the keys? While there isnt a complete solution for this problem, There is a very clever mitigation: Juicebox.\nJuicebox lets users set a short PIN, uses that in the generation of the actual encryption key, breaks the key into parts to be held at different servers, and then promise to erase the key if the PIN is guessed incorrectly too many times. This is the solution X is using. Sounds great, right? There are two gotchas in that description. The first is the different servers: Thats only useful if those servers arent all run by the same company. And second, the promise to delete the key. Thats not cryptographically guaranteed.\nThere is some indication that X is running a pair of Hardware Security Modules (HSMs) as part of their Juicebox system, which significantly helps with both of those issues, but there just isnt enough transparency into the system yet. For the time being, the consensus is that Signal is still the safest platform to use.\nBits and Bytes\nWere a bit light on Bits this week, so youll have to get by with the report that Secure Boot attacks are publicly available. Its a firmware update tool from DT Research, and is signed by Microsofts UEFI keys. This tool contains a vulnerability that allows breaking out of its intended use, and running arbitrary code. This one has been patched, but theres a second, similar problem in a Microsoft-signed IGEL kernel image, that allows running an arbitrary rootfs. This isnt particularly a problem for us regular users, but the constant stream of compromised, signed UEFI boot images doesnt bode well for the long term success of Secure Boot as a security measure.", "title": "Facebook\u3068Yandex\u306e\u30e6\u30fc\u30b6\u30fc\u8ffd\u8de1\u306e\u4e0d\u6b63\u624b\u6cd5", "body": "Facebook\u3068Yandex\u304c\u3001\u30e6\u30fc\u30b6\u30fc\u8ffd\u8de1\u306e\u305f\u3081\u306b\u30ed\u30fc\u30ab\u30eb\u30db\u30b9\u30c8\u3092\u5229\u7528\u3057\u305f\u624b\u6cd5\u304c\u767a\u899a\u3002\u3053\u308c\u306f\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u6cd5\u306b\u9055\u53cd\u3057\u3066\u304a\u308a\u3001\u9ad8\u984d\u306a\u7f70\u91d1\u306e\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002", "titles": ["Facebook\u3068Yandex\u306e\u30e6\u30fc\u30b6\u30fc\u8ffd\u8de1\u306e\u4e0d\u6b63\u624b\u6cd5", "JavaScript\u7121\u52b9\u6642\u306b\u96fb\u8a71\u756a\u53f7\u3092\u898b\u3064\u3051\u308b\u5b9f\u9a13", "Kerberos\u3092\u5229\u7528\u3057\u305f\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u653b\u6483\u306e\u5fa9\u6d3b", "X\u306e\u65b0\u6697\u53f7\u30c1\u30e3\u30c3\u30c8\u300cJuicebox\u300d\u306e\u4ed5\u7d44\u307f\u3068\u554f\u984c\u70b9", "Secure Boot\u653b\u6483\u306e\u8106\u5f31\u6027\u3068\u305d\u306e\u5f71\u97ff"]}