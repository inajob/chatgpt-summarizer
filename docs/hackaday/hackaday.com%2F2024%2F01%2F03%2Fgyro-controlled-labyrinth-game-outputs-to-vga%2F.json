{"pubDate": "2024-01-03T09:00:04", "original_title": "Gyro-Controlled Labyrinth Game Outputs to VGA", "link": "https://hackaday.com/2024/01/03/gyro-controlled-labyrinth-game-outputs-to-vga/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/12/Gesture-controlled-maze-game-implemented-on-RP2040-2-10-screenshot.png", "original_content": "This gesture-controlled labyrinth game using two Raspberry Pi Pico units does a great job of demonstrating how it can sometimes take a lot of work to make something look simple.\nTo play, one tilts an MPU6050 inertial measurement unit (IMU) attached to one Pico to guide a square through a 2D maze, with the player working through multiple levels of difficulty. A second Pico takes care of displaying the game state on a VGA monitor, and together they work wirelessly to deliver a coherent experience with the right feel. This includes low latency, simulating friction appropriately, and more.\nTaking a stream of raw sensor readings and turning them into control instructions over UDP in a way that feels intuitive while at the same time generating a VGA display signal has a lot of moving parts, software-wise. The project write-up has a considerable amount of detail on the architecture of the system, and the source code is available on GitHub for those who want a closer look.\nWeve seen gesture controls interfaced to physical marble mazes before, but two Raspberry Pi Picos doing it wirelessly with a VGA monitor for feedback is pretty neat. Watch it in action in the video, embedded just under the page break.\n\n", "title": "Raspberry Pi Pico\u3092\u4f7f\u3063\u305f\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u5236\u5fa1\u306e\u8ff7\u8def\u30b2\u30fc\u30e0", "body": "Raspberry Pi Pico2\u53f0\u3092\u4f7f\u7528\u3057\u305f\u3001\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u8ff7\u8def\u30b2\u30fc\u30e0\u30022D\u8ff7\u8def\u3092\u901a\u308a\u629c\u3051\u308b\u56db\u89d2\u5f62\u3092MPU6050 IMU\u3067\u50be\u3051\u3066\u64cd\u4f5c\u3057\u3001\u96e3\u6613\u5ea6\u30ec\u30d9\u30eb\u304c\u3042\u308a\u307e\u3059\u3002VGA\u30e2\u30cb\u30bf\u30fc\u3067\u30b2\u30fc\u30e0\u72b6\u6cc1\u3092\u8868\u793a\u3057\u3001\u30ef\u30a4\u30e4\u30ec\u30b9\u3067\u904a\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002UDP\u3092\u4f7f\u7528\u3057\u3066\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u3092\u5236\u5fa1\u547d\u4ee4\u306b\u5909\u63db\u3057\u3001\u76f4\u611f\u7684\u306b\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30b7\u30b9\u30c6\u30e0\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u95a2\u3059\u308b\u8a73\u7d30\u3084\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u52d5\u753b\u3067\u8a73\u7d30\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002", "titles": ["Raspberry Pi Pico\u3092\u4f7f\u3063\u305f\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u5236\u5fa1\u306e\u8ff7\u8def\u30b2\u30fc\u30e0", "\u30ef\u30a4\u30e4\u30ec\u30b9\u3067\u52d5\u4f5c\u3059\u308bRaspberry Pi Pico\u30e6\u30cb\u30c3\u30c8\u306b\u3088\u308b\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u5236\u5fa1\u8ff7\u8def\u30b2\u30fc\u30e0", "\u30cf\u30f3\u30c9\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u3067\u64cd\u4f5c\u3059\u308b\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u8ff7\u8def\u30b2\u30fc\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5", "Raspberry Pi Pico\u3092\u4f7f\u7528\u3057\u305f\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u5236\u5fa1\u8ff7\u8def\u30b2\u30fc\u30e0\u306e\u4f5c\u6210", "VGA\u30e2\u30cb\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u305fRaspberry Pi Pico\u30e6\u30cb\u30c3\u30c8\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u5236\u5fa1\u8ff7\u8def\u30b2\u30fc\u30e0"]}