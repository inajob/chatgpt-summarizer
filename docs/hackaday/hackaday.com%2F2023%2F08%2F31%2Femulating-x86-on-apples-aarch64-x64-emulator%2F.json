{"pubDate": "2023-09-01T02:00:33", "original_title": "Emulating x86 on Apple\u2019s AARCH64 x64 Emulator", "link": "https://hackaday.com/2023/08/31/emulating-x86-on-apples-aarch64-x64-emulator/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/08/AppleARM.webp", "original_content": "You might know [Evan Martin] as the developer of retrowin32. Its a Windows and x86 emulator designed to run on a Mac or on the web. Hes recently been exploring how to run 32-bit x86 binaries on the AArch64 (aka ARM64) architecture.\n[Evan] realized that Apples ARM-based Macs feature a high-quality x86 emulator, used via the Rosetta binary translation system. It only supports 64-bit x86-64 binaries, also known as x64, and thus he had initially discounted it for running older 32-bit x86 software. However, as it turns out, x64 features a special compatibility mode for running 32-bit code. [Evan] was able to leverage this to run 32-bit Windows executables rather neatly via the high-performance Rosetta emulator.\nTo run a 32-bit executable on a 64-bit processor in this way, one creates a 64-bit program that is tasked with loading the 32-bit executable. Its a little fussy, involving some tricks to handle memory management between the 32-bit code and the 64-bit wrapper, and how to interface with the OS, but [Evan] explains deftly how its all done.\n[Evan] notes that this hack may not work forever, especially if Apple changes or deprecates Rosettas remaining x86-64 emulation in the future. Regardless, Apples Game Porting Toolkit relies on similar techniques used by Wine. If you find yourself dancing across platforms, you might learn some nifty tricks from [Evan]s example!"}