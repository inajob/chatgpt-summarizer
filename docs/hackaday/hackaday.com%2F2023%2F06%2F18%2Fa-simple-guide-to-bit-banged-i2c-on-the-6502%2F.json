{"pubDate": "2023-06-18T14:00:00", "original_title": "A Simple Guide To Bit Banged I2C On The 6502", "link": "https://hackaday.com/2023/06/18/a-simple-guide-to-bit-banged-i2c-on-the-6502/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/06/65unino_perhiperals.png", "youtube": "https://www.youtube.com/watch?v=i7q0P9", "original_content": "We covered [Anders Nielsen]s 65duino project a short while ago, and now hes back with an update video showing some more details of bit-banging I2C using plain old 6502 assembly language.\nObviously, with such a simple system, there is no dedicated I2C interface hardware, so the programmer must take care of all the details of the I2C protocol in software, bit-banging it out to the peripheral and reading back the response one bit at a time.\nThe first detail to concern us will be the I2C addresses of the devices being connected to the bus and how low-level bit manipulation is used to turn the 7-bit I2C address into the byte being bit-banged. As [Anders] shows, setting a bit is simply a logical-OR operation, and resetting a bit is a simple logical-AND operation using the inversion (or ones complement) bit to reset to form a bitmask. As many will already know, this process is necessary to code for a read or a write I2C operation. A further detail is that I2C uses an open-collector connection scheme, which means that no device on the bus may drive the bus to logical high; instead, they must release the drive by going to the high impedance state, and an external pull-up resistor will pull the bus high. The 6532 RIOT chip (used for I/O on the 65unio) does not have tristate control but instead uses a data direction register (DDR) to allow a pin to be an input. This will do the job just fine, albeit with slightly odd-looking code, until you know whats going on.\nFrom there, its a straightforward matter to write subroutines that generate the I2C start, stop, and NACK conditions that are required to write to the SSD1306-based OLED to get it to do something we can observe. From these basic roots, through higher-level subroutines, a complete OLED library in assembly can be constructed. We shall sit tight and await where [Anders] goes next with this!\nWe see I2C-connected things all the time, like this neat ATtiny85-based I2C peripheral, and whilst were talking about the SSD1306 OLED display controller, heres a hack that shows just how much you can push your luck with the I2C spec and get some crazy frame rates.\n\n"}