{"pubDate": "2023-06-18T14:00:00", "original_title": "A Simple Guide To Bit Banged I2C On The 6502", "link": "https://hackaday.com/2023/06/18/a-simple-guide-to-bit-banged-i2c-on-the-6502/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/06/65unino_perhiperals.png", "youtube": "https://www.youtube.com/watch?v=i7q0P9", "original_content": "We covered [Anders Nielsen]s 65duino project a short while ago, and now hes back with an update video showing some more details of bit-banging I2C using plain old 6502 assembly language.\nObviously, with such a simple system, there is no dedicated I2C interface hardware, so the programmer must take care of all the details of the I2C protocol in software, bit-banging it out to the peripheral and reading back the response one bit at a time.\nThe first detail to concern us will be the I2C addresses of the devices being connected to the bus and how low-level bit manipulation is used to turn the 7-bit I2C address into the byte being bit-banged. As [Anders] shows, setting a bit is simply a logical-OR operation, and resetting a bit is a simple logical-AND operation using the inversion (or ones complement) bit to reset to form a bitmask. As many will already know, this process is necessary to code for a read or a write I2C operation. A further detail is that I2C uses an open-collector connection scheme, which means that no device on the bus may drive the bus to logical high; instead, they must release the drive by going to the high impedance state, and an external pull-up resistor will pull the bus high. The 6532 RIOT chip (used for I/O on the 65unio) does not have tristate control but instead uses a data direction register (DDR) to allow a pin to be an input. This will do the job just fine, albeit with slightly odd-looking code, until you know whats going on.\nFrom there, its a straightforward matter to write subroutines that generate the I2C start, stop, and NACK conditions that are required to write to the SSD1306-based OLED to get it to do something we can observe. From these basic roots, through higher-level subroutines, a complete OLED library in assembly can be constructed. We shall sit tight and await where [Anders] goes next with this!\nWe see I2C-connected things all the time, like this neat ATtiny85-based I2C peripheral, and whilst were talking about the SSD1306 OLED display controller, heres a hack that shows just how much you can push your luck with the I2C spec and get some crazy frame rates.\n\n", "title": "6502\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067I2C\u306ebit-banging\u3092\u4f7f\u3063\u305f\u96fb\u5b50\u5de5\u4f5c", "body": "Anders Nielsen demonstrates bit-banging I2C using 6502 assembly language in his 65duino project, without dedicated interface hardware. He explains how to turn a 7-bit I2C address into a byte being bit-banged. The open-collector connection scheme of I2C, along with the use of subroutines that generate I2C start, stop, and NACK conditions to write to an OLED, is explained in detail. A complete OLED library can be constructed.", "titles": ["6502\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067I2C\u306ebit-banging\u3092\u4f7f\u3063\u305f\u96fb\u5b50\u5de5\u4f5c", "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u77e5\u8b58\u3092\u6d3b\u304b\u3057\u305f65duino\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7d39\u4ecb", "I2C\u63a5\u7d9a\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u3042\u308bSSD1306 OLED\u3092\u4f7f\u3063\u305f\u7c21\u5358\u306a\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u4f5c\u6210\u65b9\u6cd5", "\u958b\u653e\u30b3\u30ec\u30af\u30bf\u63a5\u7d9a\u65b9\u5f0f\u304c\u5fc5\u8981\u306a\u7406\u7531\u3068\u3001\u5916\u90e8\u30d7\u30eb\u30a2\u30c3\u30d7\u62b5\u6297\u3092\u7528\u3044\u305f\u65b9\u6cd5", "\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3092\u6d3b\u7528\u3057\u3066\u3001I2C\u901a\u4fe1\u3092\u6271\u3046OLED\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69cb\u7bc9\u65b9\u6cd5"]}