{"pubDate": "2024-03-29T02:00:46", "original_title": "Is Your Mental Model of Bash Pipelines Wrong?", "link": "https://hackaday.com/2024/03/28/is-your-mental-model-of-bash-pipelines-wrong/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "[Michael Lynch] encountered a strange situation. Why was compiling then running his program nearly 10x faster than just running the program by itself? [Michael] ran into this issue while benchmarking a programming project, pared it down to its essentials for repeatability and analysis, and discovered it highlighted an incorrect mental model of how bash pipelines worked.\nHeres the situation. The first thing [Michael]s pared-down program does is start a timer. Then it simply reads and counts some bytes from stdin, then prints out how long it took for that to happen. When running the test program in the following way, it takes about 13 microseconds.\n$ echo 00010203040506070809 | xxd -r -p | zig build run -Doptimize=ReleaseFast\nbytes: 10\nexecution time: 13.549\u00b5s\nWhen running the (already-compiled) program directly, execution time swells to 162 microseconds.\n$ echo 00010203040506070809 | xxd -r -p | ./zig-out/bin/count-bytes\nbytes: 10\nexecution time: 162.195\u00b5s\nAgain, the only difference between zig build run and ./zig-out/bin/count-bytes is that the first compiles the code, then immediately runs it. The second simply runs the compiled program.\nHow can adding an extra compile step decrease the execution time? Turns out that [Michael]s mental model of how bash pipelines work was incorrect, and he does a great job of explaining how they actually work, and why that caused the strange behavior he was seeing.\nIn short, commands in a bash pipeline are not launched sequentially. They are all launched at the same time and execute in parallel. That meant that when run directly, [Michael]s byte-counter program launched immediately. Then it waited around doing nothing much for about 150 microseconds while the echo '00010203040506070809' | xxd -r -p part of the pipeline got around to delivering its data for the program to read. This is where the extra execution time comes from when running the already-compiled version.\nSo why is compiling it first running faster? Same basic reason: when the zig build run command kicks off, it spends a little time compiling the program first. Then when the compiled program is actually launched (and begins its execution timer), the input data from the bash pipeline is already ready. So, the freshly-compiled program executes in less time because it doesnt sit around waiting for data from earlier in the pipeline to become available.\nIts an interesting look at how bash pipelines actually function under the hood, and were delighted with the detail [Micheal] puts into the whole journey and explanation. Sooner or later, details like this crop up and cause some eyebrows to raise, like the user who discovered troublesome edge cases regarding spaces in ssh commands.", "title": "\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u6642\u9593\u304c10\u500d\u901f\u304f\u306a\u308b\u7406\u7531", "body": "\u30de\u30a4\u30b1\u30eb\u30fb\u30ea\u30f3\u30c1\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u5b9f\u884c\u304c10\u500d\u901f\u304b\u3063\u305f\u3002\u76f4\u63a5\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u305f\u5834\u5408\u3088\u308a\u3082\u901f\u304f\u52d5\u4f5c\u3059\u308b\u7406\u7531\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac\u3057\u3066\u3044\u308b\u3002", "titles": ["\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u6642\u9593\u304c10\u500d\u901f\u304f\u306a\u308b\u7406\u7531", "\u30d0\u30c3\u30b7\u30e5\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u52d5\u4f5c\u306b\u95a2\u3059\u308b\u8aa4\u3063\u305f\u7406\u89e3\u304c\u660e\u3089\u304b\u306b\u306a\u308b", "\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u76f4\u63a5\u5b9f\u884c\u3059\u308b\u3068\u5b9f\u884c\u6642\u9593\u304c\u9045\u304f\u306a\u308b\u7406\u7531", "\u30d0\u30c3\u30b7\u30e5\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u30b3\u30de\u30f3\u30c9\u306f\u4e26\u884c\u3057\u3066\u8d77\u52d5\u3055\u308c\u308b", "\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u5b9f\u884c\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u7406\u7531"]}