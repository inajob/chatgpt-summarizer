{"pubDate": "2024-07-11T11:00:39", "original_title": "Ticketmaster SafeTix Reverse-Engineered", "link": "https://hackaday.com/2024/07/11/ticketmaster-safetix-reverse-engineered/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/ticketmaster_feat.jpg", "original_content": "Ticketmaster is having a rough time lately. Recently, a hacker named [Conduition] managed to reverse-engineer their new safe electronic ticket system. Of course, they also had the recent breach where more than half a billion accounts had personal and financial data leaked without any indication of whether or not the data was fully encrypted. But were going to focus on the former, as its more technically interesting.\nTicketmasters stated goals for the new SafeTix system  which requires the use of a smartphone app  was to reduce fraud and ticket scalping. Essentially, you purchase a ticket using their app, and some data is downloaded to your phone which generates a rotating barcode every 15 seconds. When [Conduition] arrived at the venue, cell and WiFi service was totally swamped by everyone trying to load their barcode tickets. After many worried minutes (and presumably a few choice words) [Conduition] managed to get a cell signal long enough to update the barcode, and was able to enter, albeit with a large contingent of similarly annoyed fans trying to enter with their legally purchased tickets.\n\nThe real kicker here is that since the barcode rotates every 15 seconds, printing it out simply isnt an option. This alienates anyone who doesnt have a smartphone, which includes individuals who may not be able to physically operate one. So the problem isnt simply that users were being forced to install yet another application on their device, but that the system reduces accessibility to entertainment. [Conduition] was dismayed and frustrated with this, and so the reverse-engineering effort began.\nDecoding the barcode was actually quite simple. It is a standard PDF417 barcode, which contains a long Base64 string, two six-digit numbers, and a Unix timestamp all concatenated together with colons. The only parts of the string that seemed to change over time were the two six-digit numbers. Hmm, can we think of a common technology which generates six-digit numbers that update seemingly randomly on a fixed cycle? Of course  its just a Time-based one-time password (TOTP), the technology behind 2FA authenticator apps!\nSo where were the secret keys coming from? TOTP only requires two things: a static secret string, and the current time. [Conduition] checked the communication with the Ticketmaster servers and found a particularly interesting request that returned JSON-formatted data, inside which were of course the two secret keys. One seems to be unique per customer, and the other per ticket.\nThe important data captured from the web traffic\nThe Ticketmaster API documentation only briefly mentions this feature, but they do state that customers must refresh their ticket barcodes within 20 hours before an event starts. These two pieces of information were enough to allow [Conduition] to whip up a simple app that accepts the secret keys and the ticket ID and pops out the rotating barcodes. This would allow you to sell your tickets in the 20 hours prior to an event, or even just give them away to friends without having to give their personal data to Ticketmaster and allow you to take back control of your tickets.\nThanks to [Chrischi] for the tip!", "title": "\u30c1\u30b1\u30c3\u30c8\u30de\u30b9\u30bf\u30fc\u306e\u65b0\u3057\u3044\u96fb\u5b50\u30c1\u30b1\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u30de\u30eb\u30a6\u30a7\u30a2\u304c\u89e3\u6790", "body": "Ticketmaster\u306f\u30bb\u30ad\u30e5\u30a2\u306a\u96fb\u5b50\u30c1\u30b1\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u9006\u624b\u306b\u304b\u3051\u3089\u308c\u305f\u30cf\u30c3\u30ab\u30fc\u3068\u500b\u4eba\u60c5\u5831\u306e\u6d41\u51fa\u306b\u60a9\u307e\u3055\u308c\u3066\u3044\u308b\u3002\u65b0\u30b7\u30b9\u30c6\u30e0\u306f\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u306715\u79d2\u3054\u3068\u306b\u30d0\u30fc\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3002\u6280\u8853\u7684\u306b\u8208\u5473\u6df1\u3044\u304c\u3001\u30b9\u30de\u30db\u306a\u3057\u306e\u4eba\u3005\u306b\u30a2\u30af\u30bb\u30b9\u6027\u3092\u596a\u3046\u5f0a\u5bb3\u304c\u3042\u308b\u3002", "titles": ["\u30c1\u30b1\u30c3\u30c8\u30de\u30b9\u30bf\u30fc\u306e\u65b0\u3057\u3044\u96fb\u5b50\u30c1\u30b1\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u30de\u30eb\u30a6\u30a7\u30a2\u304c\u89e3\u6790", "\u96fb\u5b50\u30c1\u30b1\u30c3\u30c8\u306e\u30b7\u30b9\u30c6\u30e0\u304c\u30c6\u30af\u30cb\u30ab\u30eb\u306a\u8208\u5473\u3092\u5f15\u304f", "\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u30a2\u30d7\u30ea\u3092\u5fc5\u9808\u3068\u3057\u305f\u65b0\u3057\u3044\u30c1\u30b1\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u306b\u9006\u5de5\u5b66\u653b\u6483", "PDF417\u30d0\u30fc\u30b3\u30fc\u30c9\u306e\u89e3\u8aad\u3067\u30c1\u30b1\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u30a2\u30d7\u30ea\u304c\u767b\u5834", "\u96fb\u5b50\u30c1\u30b1\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u306e\u8106\u5f31\u6027\u3092\u3064\u3044\u305f\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0"]}