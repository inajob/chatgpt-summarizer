{"pubDate": "2025-09-26T14:00:09", "original_title": "This Week in Security: Randomness is Hard, SNMP Shouldn\u2019t Be Public, and GitHub Malware Delivery", "link": "https://hackaday.com/2025/09/26/this-week-in-security-randomness-is-hard-snmp-shouldnt-be-public-and-github-malware-delivery/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Randomness is hard. To be precise, without dedicated hardware, randomness is impossible for a computer. This is actually important to keep in mind when writing software. When theres not hardware providing true randomness, most rnd implementations use a seed value and a pseudo random number generator (PRNG). A PRNG is a function that takes a seed value, and turns it into a seemingly random value, and also produces a new seed for the next time a random value is needed. This could be as simple as a SHA256 sum, where the hash output is split to become the next seed and the random value.\nThe PRNG approach does still have a challenge. Where does the initial seed come from? There are a few common, if flawed, approaches, and one of the most common is to use the system clock. Its not a bulletproof solution, but using the microsecond counter since the last system boot is often good enough, because there are a lot of them to choose from  the entropy is high. With that brief background in mind, lets talk about what happens in VBScript. The Randomize call is used to seed that initial value, but Randomize has some quirks.\nThe first is a great feature: calling Randomize a second time with the same seed doesnt reset the PRNG engine back to the same initial state. And second, when called without a value, Randomize uses the number of system ticks since midnight as the PRNG seed. There are 64 ticks per second, giving five-and-a-half million possible seeds, or 22 bits of entropy. This isnt great on its own, but Randomize internally typecasts that number of ticks into a narrower value, with a maximum possible of time-based seeds set at 65,536, which is a lot easier to brute-force.\nWe dont know the exact application where the researchers at Doyensec found VBScript generating secure tokens, but in their Proof of Concept (PoC) test run, the generated token could be found in four guesses. Its a terrible security fail for basically any use, and its a deceptively easy mistake to make.\n\nGoAnywhere Exploit\nThe folks at WatchTowr have a report on a blistering 10.0 CVE in the GoAnywhere Managed File Transfer (MFT) product. This vulnerability was first published on September 18, and the WatchTowr crew took a look at it, and had questions. This bug is a deserialization attack that can land even without any authentication. It can result in command injection, and the latest update from GoAnywhere vendor Forta vaguely indicates that it is being used for attacks in the wild. But this is particularly odd: before the vulnerable interface deserializes, it first checks for a valid signature. And WatchTowr researchers couldnt find a leak of a valid private key. So how was the vulnerability in use in the wild?\nLucky for us, theres a part two to this story, but not all of the mysteries are explained. This CVE is indeed being exploited in the wild, with the earliest known exploit being September 10th. Since there was a full week between the earliest known compromise and the release of the patch, it seems unfortunate that it took WatchTowr this long to confirm that this vulnerability was actually exploited in the wild.\nCisco and Public SNMP\nTwo million Cisco systems are at risk from CVE-2025-20352. This is a remotely accessible flaw in the handling of Simple Network Management Protocol traffic. The attack does require valid credentials, but the attack works using SNMPv1, v2, or v3. While SNMPv3 has more secure user credentials, the earlier SNMP versions just used community strings, a text based password that was often set to public.\nThis vulnerability seems to lead to either a crash or a Remote Code Exploitation (RCE). Its not entirely clear how difficult it is to achieve RCE, but its noteworthy that RCE here is run as root, a level of access not usually available even to administrators of Cisco equipment. So far theres no indication that this was used in the wild, but now that some information and a patch is available, its likely not going to take long for someone to reverse-engineer the vulnerability and weaponize it.\nMore Spilled Tea\nRemember the Tea Spilling from a couple months ago? The Tea app had an unsecured Firebase database. It turns out that wasnt an isolated incident. [Mike Oude Reimer] has been working on OpenFirebase, an auditing tool for FireBase installs. And to prove the point, did an audit on 400 of the most popular Android apps from a trio of categories in the play store, and found 150 Firebase servers that granted unintended access of some sort. Thats a bit stunning, that over one in three Android apps have insecure Firebase servers associated with them.\nGithub Malware Delivery\nTheres a malware campaign that has happened in the last couple weeks, based around Search Engine Optimization and GitHub repositories. The instructions peddle malicious commands to users looking for popular software on the Mac, like LastPass and others. I was prepared to write about how Ad Blocking is really a form of security protection, as these campaigns are often delivered via advertising, but this one seems to primarily be based on real search engine placement.\nThis isnt the only malware campaign that takes advantage of GitHubs reputation as a trusted source of software. A phishing campaign was also recently spotted, where spam messages were added as GitHub issues, with the spammers tagging their victims, and offering fake Y Combinator sponsorships. Since the messages were sent via GitHub, most spam blockers treated them as legitimate. This campaign was a bit more clever than most, making use of domain typo-squatting, with the y-comblnator.com domain used as part of the campaign. The goal here being draining the crypto accounts of people sufficiently fooled by the messages.\nBits and Bytes\nIs nothing sacred? In addition to GitHub, malware appears to be distributed via Steam, in updates to games. The most recent example was the Block Blasters game, which was on Steam for nearly two months before shipping malicious code.\nHow can you figure out whether an image is AI, or has been manipulated with AI or other tools? Theres quite a few approaches, but one of the interesting ones is to look at the JPEG artifacting. If part of the image has ever been compressed via JPEG, this results in blocky artifacts that are hard for the human eye to spot, but easy to see with the right tools.\nAnd finally, in a blast from the past, Supermicro has another pair of vulnerabilities that could allow malicious firmware on server Baseboard Management Controller (BMCs). The way these images are signed is slightly odd, with the various portions of the file signed independently. The attack is to treat these sections like cards in a deck, and shuffle malicious slices into the stack. The verification routine thinks all the important pieces are signed, but during a real boot, the malicious code runs instead. Patches coming soon.", "title": "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u771f\u306e\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u6c42\u3081\u3066\uff1aPRNG\u306e\u9650\u754c\u3068\u8ab2\u984c", "body": "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u771f\u306e\u30e9\u30f3\u30c0\u30e0\u6027\u306f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306a\u3057\u3067\u306f\u4e0d\u53ef\u80fd\u3002PRNG\u306f\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u306b\u4f7f\u308f\u308c\u308b\u304c\u3001\u521d\u671f\u30b7\u30fc\u30c9\u306e\u53d6\u5f97\u304c\u8ab2\u984c\u3002VBScript\u306eRandomize\u306f\u8106\u5f31\u6027\u304c\u3042\u308a\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u554f\u984c\u304c\u3042\u308b\u3002", "titles": ["\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u771f\u306e\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u6c42\u3081\u3066\uff1aPRNG\u306e\u9650\u754c\u3068\u8ab2\u984c", "GoAnywhere\u306eCVE-10.0\u8106\u5f31\u6027\uff1a\u8a8d\u8a3c\u7121\u3057\u3067\u306e\u653b\u6483\u306e\u5371\u967a\u6027", "Cisco\u30b7\u30b9\u30c6\u30e0\u306e\u8106\u5f31\u6027\uff1aSNMP\u306e\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c\u30ea\u30b9\u30af", "Firebase\u306e\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\uff1a\u4eba\u6c17\u30a2\u30d7\u30ea\u306b\u6f5c\u3080\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c", "GitHub\u3092\u5229\u7528\u3057\u305f\u30de\u30eb\u30a6\u30a7\u30a2\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u306e\u65b0\u305f\u306a\u624b\u53e3"]}