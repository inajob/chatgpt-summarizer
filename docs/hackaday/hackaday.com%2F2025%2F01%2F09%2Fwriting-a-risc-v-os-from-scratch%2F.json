{"pubDate": "2025-01-09T16:30:54", "original_title": "Writing a RISC-V OS From Scratch", "link": "https://hackaday.com/2025/01/09/writing-a-risc-v-os-from-scratch/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/01/os.png", "original_content": "If you read Japanese, you might have seen the book Design and Implementation of Microkernels by [Nu Tian Sheng]. An appendix covers how to write your own operating system for RISC-V in about 1,000 lines of code. Dont speak Japanese? An English version is available free on the Web and on GitHub.\nThe author points out that the original Linux kernel wasnt much bigger (about 8,500 lines). The OS allows for paging, multitasking, a file system, and exception handling. It doesnt implement interrupt handling, timers, inter-process communication, or handling of multiple processors. But that leaves you with something to do!\nThe online book covers everything from booting using OpenSBI to building a command line shell. Honestly, wed have been happier with some interrupt scheme and any sort of crude way to communicate and synchronize across processes, but the 1,000 line limit is draconian.\nSince the project uses QEMU as an emulation layer, you dont even need any special hardware to get started. Truthfully, you probably wont want to use this for a production project, but for getting a detailed understanding of operating systems or RISC-V programming, it is well worth a look.\nIf you want something more production-ready, you have choices. Or, stop using an OS at all."}