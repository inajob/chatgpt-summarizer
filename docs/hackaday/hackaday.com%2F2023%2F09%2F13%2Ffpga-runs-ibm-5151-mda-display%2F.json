{"pubDate": "2023-09-14T05:00:50", "original_title": "FPGA Runs IBM 5151 MDA Display", "link": "https://hackaday.com/2023/09/13/fpga-runs-ibm-5151-mda-display/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/09/1688521681366884937-e1694507585355.jpg", "original_content": "When it comes to driving a display, you can do all kinds of fancy tricks with microcontrollers to get an image up. Really, though, FPGAs are the weapon of choice for playing with these kinds of signals. [Ted Fried] put one to great work driving an ancient IBM 5151 MDA display, and shared his results on Hackaday.io.\nThe build relies on a Digilent Arty Z7-20 SOC FPGA development board, which has a beefy 600 MHz ARM processor on board. It also packs 500 MB of DRAM\u2014more than enough for storing pixel data for an ancient display.\nTo drive the old display, [Ted] whipped up a state machine on the FPGA. Its tasked with fetching display data from RAM and creating the appropriate timings for the MDA display interface. The images are stored directly in an array in C code running on the ARM core. From there, they are copied into the FPGAs RAM for trucking out to the display. The 720350 images are stored as 1 bit per pixel, and are created by converting the original JPEGs into single-bit bitmaps in GIMP, before final conversion into a C code array via utility of [Teds] own design.\nIf youve ever wanted to display your images in resplendent amber or green, then this could be the project for you. Its also just a great way to learn about using FPGAs and interfacing with alternative display technologies. If youve been whipping up your own retro display hacks, dont hesitate to drop us a line."}