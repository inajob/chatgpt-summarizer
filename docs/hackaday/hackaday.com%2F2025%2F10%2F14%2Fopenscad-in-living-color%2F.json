{"pubDate": "2025-10-14T17:00:39", "original_title": "OpenSCAD in Living Color", "link": "https://hackaday.com/2025/10/14/openscad-in-living-color/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/02/3D-Printering-Header-New.jpg", "original_content": "I modified a printer a few years ago to handle multiple filaments, but I will admit it was more or less a stunt. It worked, but it felt like you had to draw mystic symbols on the floor of the lab and dance around the printer, chanting incantations for it to go right. But I recently broke down and bought a color printer. No, probably not the one you think, but one that is pretty similar to the other color machines out there.\nOf course, it is easy to grab ready-made models in various colors. It is also easy enough to go into a slicer and paint colors, but thats not always desirable. In particular, I like to design in OpenSCAD, and adding a manual intervention step into an otherwise automatic compile process is inconvenient.\nThe other approach is to create a separate STL file for each filament color you will print with. Obviously, if your printer can only print four colors, then you will have four or fewer STLs. You import them, assign each one a color, and then, if you like, you can save the whole project as a 3MF or other file that knows how to handle the colors. That process is quick and painless, so the question now becomes how to get OpenSCAD to put out multiple STLs, one for each color.\nBut color()\nOpenSCAD has a color function, but that just shows you colors on the screen, and doesnt actually do anything to your printed models. You can fill your screen with color, but the STL file you export will be the same. OpenSCAD is also parametric, so it isnt that hard to just generate several OpenSCAD files for each part of the assembly. But you do have to make sure everything is referenced to the same origin, which can be tricky.\nOpenSCAD Development Version Test\nIt turns out, the development version of OpenSCAD has experimental support for exporting 3MF files, which would allow me to sidestep the four STLs entirely. However, to make it work, you not only have to run the development version, but you also have to enable lazy unions in the preferences. You might try it, but you might also want to wait until the feature is more stable.\nBesides, even with the development version, at least as I tried it, every object in the design will still need its color set in the slicer. The OpenSCAD export makes them separate objects, but doesnt seem to communicate their color in a way that the slicer expects it. If you have a large number of multi-color parts, that will be a problem. It appears that if you do go this way, you might consider only setting the color on the very top-most objects unless things change as the feature gets more robust.\nA Better Way\nWhat I really wanted to do is create one OpenSCAD file that shows the colors I am using on the screen. Then, when Im ready to generate STL files, I should be able to just pick one color for each color I am using.\n\nLuckily, OpenSCAD lets you easily define modifiers using children(). You can define a module and then refer to things that are put after the module. That lets you write things that act like translate or scale that modify the things that come after them. Or, come to think of it, the built-in color command.\nSimple Example\nBefore we look at color output, lets just play with the children function. Consider this code:\n\n\nmodule redpart() {\n   color(red) children();\n}\n\nredpart() cube(5,5,5]);\n\n\nThat makes a red cube. Of course, you could remind me that you could just replace redpart() with color(\"red\") and youd be right. But theres more to it.\nLets add a variable that we set to 1 if we dont want color output:\n\n\nmono=0;\n\nmodule redpart() {\n   if (mono==0) color(red) children();\n   else children();\n}\n\nredpart() cube(5,5,5]);\n\n\nNow Were Getting Somewhere\nSo what we need is a way to mark different parts of the OpenSCAD model as belonging to a specific filament spool. An array of color names would work. Then you can select all colors or just a specific one to show in the output.\n\n\ncolors= black, white, blue,green];\n\n// Set to -1 for everything\ncurrent_color=-1;\n\n\nAll we need now is a way to mark which spool goes with what part. I put this in colorstl.scad so I could include it in other files:\n\n\nmodule colorpart(clr) {\n  color(colorsclr])\n  if (clr==current_color || current_color==-1) {\n    children();\n  }\n  else {\n  }\n}\n\nSo you can say something like:\n\n\ncolorpart(2) mounting_plate();\n\n\nThis will not only set the mounting_plate to the right color on your screen. It will also ensure that the mounting_plate will only appear in exports for color 2 (or, if you export with all colors).\nSome Better Examples\nThe letters are ever so slightly raised over the surface of the backing.\nSince Supercon is coming up, I decided I wanted a hello badge that wouldnt run out of batteries like my last one. It was easy enough to make a big plastic plate in OpenSCAD, import a Jolly Wrencher, and then put some text in, too.\nOf course, if you print this, you might just want to modify some of the text. You could also make the text some different colors if you wanted to get creative.\nHeres the script:\n\n\ncolors= black, white, blue,green];\n\n// Set to -1 for everything\ncurrent_color=-1;\n\ninclude colorstl.scad\n\ncolorpart(0) cube(100,75,3]);\ncolorpart(1) translate(5,40,2.8]) scale(.25,.25,1]) linear_extrude(height=0.4) import(wrencher2.svg);\ncolorpart(1) translate(37,48,2.8]) linear_extrude(height=0.4) text(Hackaday,size=10);\ncolorpart(1) translate(3,18,2.8]) linear_extrude(height=0.4) text(Al Williams,size=14);\ncolorpart(1) translate(25,2,2.8]) linear_extrude(height=0.4) text(WD5GNR,size=8);\n\n\nOnce it looks good in preview, you just change current_color to 0, export, then change it to 1 and export again to a different file name. Then you simply import both into your slicer. The Slic3r clones, like Orca, will prompt you when you load multiple files if you want them to be a single part. The answer, of course, is yes.\nEpoxy a magnet to the back and ready for Supercon!\nThe only downside is that the slicer wont know which part goes with which filament spool. So youll still have to pick each part and assign an extruder. In Orca, you flip from Global view to Objects view. Then you can pick each file and assign the right filament slot number. If you put the number of the color in each file name, youll have an easier time of it. Unlike the development version, youll only have to set each filament color once. All the white parts will lump together, for example.\nOf course, too, the slicer preview will show you the colors, so if it doesnt look right, go back and fix it before you print. I decided it might be confusing if too many people printed name tags, so heres a more general-purpose example:\n\ncolors= black, white, blue,black];\ncurrent_color=-1;\ninclude colorstl.scad\n$fn=128;\n\nradius=25; // radius of coin\nthick=3; // thickness of coin base\ntopdeck=thick-0.1;\nring_margin=0.5;\nring_thick=0.5;\nfeature_height=0.8;\n\ninner_ring_outer_margin=radius-ring_margin;\ninner_ring_inner_margin=inner_ring_outer_margin-ring_thick;\n\nmodule center2d(size) {\n    translate(-size0]/2, -size1]/2]) children();\n}\n\ncolorpart(0) cylinder(r=radius,h=thick);\u00a0 // the coin base\n\n// outer ring\ncolorpart(1) translate(0,0,topdeck]) difference() {\n   cylinder(r=inner_ring_outer_margin,h=feature_height);\n   translate(0,0,-feature_height]) cylinder(r=inner_ring_inner_margin,h=feature_height*3);\n}\n\n// the wrencher (may have to adjust scale depending on where you got your SVG)\ncolorpart(1) translate(0,0,topdeck]) scale(.3,.3,1]) linear_extrude(height=feature_height,center=true) center2d(118, 108]) import(wrencher2.svg);\n\n\n\n\n\nHow did it come out? Judge for yourself. Or find me at Supercon, and unless I forget it, Ill have a few to hand out. Or, make your own and well trade.", "title": "**OpenSCAD\u3067\u8907\u6570\u8272\u306eSTL\u51fa\u529b\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3059\u308b\u65b9\u6cd5**", "body": "OpenSCAD\u3067\u8907\u6570\u306e\u8272\u306eSTL\u30d5\u30a1\u30a4\u30eb\u3092\u7c21\u5358\u306b\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u3092\u89e3\u8aac\u3002", "titles": ["**OpenSCAD\u3067\u8907\u6570\u8272\u306eSTL\u51fa\u529b\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3059\u308b\u65b9\u6cd5**", "**\u30ab\u30e9\u30fc\u30d7\u30ea\u30f3\u30bf\u306e\u6700\u65b0\u6280\u8853\u3092\u6d3b\u7528\u3057\u305f\u591a\u8272\u5370\u5237\u306b\u6311\u6226**", "**\u96fb\u5b50\u5de5\u4f5c\u521d\u5fc3\u8005\u5411\u3051\uff1aOpenSCAD\u3067\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\u3068\u8272\u306e\u8a2d\u5b9a**", "**\u52b9\u7387\u7684\u306a\u30de\u30eb\u30c1\u30ab\u30e9\u30fc\u5370\u5237\u306e\u305f\u3081\u306eOpenSCAD\u30c6\u30af\u30cb\u30c3\u30af**", "**\u30d5\u30a3\u30e9\u30e1\u30f3\u30c8\u8272\u306e\u5272\u308a\u5f53\u3066\u3092\u7c21\u5358\u306b\u3059\u308bOpenSCAD\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u7d39\u4ecb**"]}