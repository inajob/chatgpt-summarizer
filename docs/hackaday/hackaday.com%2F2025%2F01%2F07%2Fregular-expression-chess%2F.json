{"pubDate": "2025-01-08T03:00:23", "original_title": "Regular (Expression) Chess", "link": "https://hackaday.com/2025/01/07/regular-expression-chess/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/01/chess.png", "original_content": "[Nicholas Carlini] found some extra time on his hands over the holiday, so he decide to do something with entirely no purpose. The result: 84,688 regular expressions that can play chess using a 2-ply minmax strategy. No kidding. We think we can do some heavy-duty regular expressions, but this is a whole other level.\nAs you might expect, the code to play is extremely simple as it just runs the board through series of regular expressions that implement the game logic. Of course, that doesnt count the thousands of strings containing the regular expressions.\n\nHow does this work? Luckily, [Nicholas] explains it in some detail. The trick isnt making a chess engine. Instead, he creates a branch-free, conditional-execution, single-instruction multiple-data CPU. Once you have a CPU, of course it is easy to play chess. Well, relatively easy, anyway.\nThe computers stack and registers are all in a long string, perfect for evaluation by a regular expression. From there, the rest is pretty easy. Sure, you cant have loops and conditionals cant branch. You can, however, fork a thread into two parts. Pretty amazing.\nProgramming the machine must be pretty hard, right? Well, no. Theres also a sort-of language that looks a lot like Python that can compile code for the CPU. For example:\ndef fib():\n\u00a0\u00a0\u00a0 a = 1\n\u00a0\u00a0\u00a0 b = 2\n\u00a0\u00a0 for _ in range(10):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 next = a + b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 a = b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 b = next\nThen you only have to write the chess engine. It isnt fast, but that really isnt the point.\nOf course, chess doesnt have to be that hard. The assembler reminds us a bit of our universal cross assembler.", "title": "\u6b63\u898f\u8868\u73fe\u3067\u30c1\u30a7\u30b9\u3092\u30d7\u30ec\u30a4\u3059\u308b\u9a5a\u7570\u306e\u30d7\u30ed\u30b0\u30e9\u30e0", "body": "\u30cb\u30b3\u30e9\u30b9\u30fb\u30ab\u30fc\u30cb\u30fc\u6c0f\u304c\u3001\u7121\u76ee\u7684\u306b\u30c1\u30a7\u30b9\u3092\u30d7\u30ec\u30a4\u3059\u308b84,688\u306e\u6b63\u898f\u8868\u73fe\u3092\u4f5c\u6210\u3002\u7c21\u5358\u306aCPU\u3067\u5b9f\u73fe\u3002", "titles": ["\u6b63\u898f\u8868\u73fe\u3067\u30c1\u30a7\u30b9\u3092\u30d7\u30ec\u30a4\u3059\u308b\u9a5a\u7570\u306e\u30d7\u30ed\u30b0\u30e9\u30e0", "\u30c1\u30a7\u30b9\u30a8\u30f3\u30b8\u30f3\u3092\u4f5c\u308b\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u306f\uff1f", "\u6761\u4ef6\u5206\u5c90\u306a\u3057\u3067\u52d5\u304fCPU\u3092\u7528\u3044\u305f\u96fb\u5b50\u5de5\u4f5c", "\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3059\u308b\u8907\u96d1\u306a\u30b2\u30fc\u30e0\u30ed\u30b8\u30c3\u30af", "Python\u98a8\u8a00\u8a9e\u3067\u7c21\u5358\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u308b\u30c1\u30a7\u30b9\u30a8\u30f3\u30b8\u30f3"]}