{"pubDate": "2024-04-04T14:00:23", "original_title": "Where Graph Theory Meets The Road: The Algorithms Behind Route Planning", "link": "https://hackaday.com/2024/04/04/where-graph-theory-meets-the-road-the-algorithms-behind-route-planning/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/03/map_reduction_to_graph.jpg", "original_content": "Back in the hazy olden days of the pre-2000s, navigating between two locations generally required someone to whip out a paper map and painstakingly figure out the most optimal route between those depending on the chosen methods of transport. For todays generations no such contrivances are required, with technology having obliterated even the a need to splurge good money on a GPS navigation device and annual map updates.\nThese days, you get out a computing device, open Google Maps or equivalent, ask it how you should travel somewhere, and most of the time the provided route will be the correct one, including the fine details such as train platform and departure times. Yet how does all of this seemingly magical route planning technology work? Its often assumed that Dijkstras algorithm, or the A* graph traversal algorithm is used, but the reality is that although these pure graph theory algorithms are decidedly influential, they cannot be applied verbatim to the reality of graph traversal between destinations in the physical world.\n\nA Story Of Travelers\nMap of K\u00f6nigsberg in Eulers time showing the actual layout of the seven bridges, highlighting the river Pregel and the bridges\nThe field of graph theory has been around since 1736, when Leonhard Euler published an article on the subject of the Seven Bridges of K\u00f6nigsberg (in Prussia, todays Kaliningrad in Russia). In this mathematical problem a walk has to be devised through the city in which each of the seven bridges across the citys Pregel River that connect to the two islands in said river is only crossed once. Euler observed that the only relevant information here are the land masses (the nodes) and the connections between them (the bridges, or edges), which reduces the problem to a simple graph.\nOn this graph a starting node is selected, with another node as the end node. As each land mass is connected with an odd number of bridges (3 or 5), this means that this problem does not have a solution. The main challenge here lies in devising a mathematically acceptable proof of this impossibility, which is where the foundations for what we today know as graph theory.\nFrom here graph theory got expanded and generalized into relations between objects, finding use in fields from computer science and chemistry to biology and linguistics. Combined with algorithms that can handle such graphs its a great way to not only make the basic structure of a network clear, but also to model structures and systems. Naturally, finding a route between nodes remained a crucial part of the field, with a wide range of path finding algorithms developed over the centuries.\nPerhaps the most common graph theory problem is that of the Travelling Salesman Problem (TSP), which is somewhat like Eulers original seven bridge problem, but instead asks for a traveller (a salesman) to be guided between a collection of cities in the most efficient way possible. The trick here is that by blindly trying out each route, the number of possible routes increases rapidly with each added city. By modeling the cities as nodes, an algorithm can then be devised that creates the edges between nodes, taking into account the weight of each node, related to its position on the map.\nAlthough simple route planning is not as daunting as TSP, there are some similarities, in that it involves a weighted, undirected graph, requiring the algorithm to take into account the cost of each edge as well as the total cost, creating a minimum spanning tree. One of the first algorithms for this is Jarn\u00edks algorithm, by Czech mathematician Vojt\u011bch Jarn\u00edk in 1930. Later this was rediscovered by Robert C. Prim in 1957 and in 1956 by Edsger W. Dijkstra (Dijkstras algorithm).\nThe weight assigned to each node is the Euclidian distance, allowing the the algorithm to calculate the distance of any newly discovered node to its current node. In its most simple form as a path finding algorithm, it tries one or more steps in roughly the direction of the destination and selects the shortest branch from these, repeating this procedure until the destination has been reached and something close to the shortest path has been found.\nThe most well-known improvement to this basic algorithm is probably the A* algorithm (geometric goal directed search), which was developed in 1968 at Stanford Research Institute. Rather than a simple node-to-node algorithm, A* considers the entirety of the nodes, and may skip nearby nodes in order to achieve an overall shorter path between the source and destination. One disadvantage of A* is that it has to keep all nodes in memory, making it much more memory-intensive than alternatives. Despite this, A* has been the usual choice for path finding in the real world.\nGPS For Everyone\nBefore the US enabled higher accuracy with the GPS satellites by turning off Selective Availability (SA), the best precision you could hope for by default was about 50-100 meters. This was clearly not enough to use for live navigation which  along with the high prices for satellite navigation devices during the 1990s  left route planning mostly dependent on paper maps and scribbled-down notes along with the occasional updates from helpful locals. Route planning using automated means was already used at this time, but the biggest use was by route planners at railways, logistics companies and so on.\nWith highly accurate GPS positioning becoming available in 2000 without the need for SA correction algorithms, and later other global navigation satellite systems (GNSS) becoming available to the public alongside rapidly dropping prices for GNSS-enabled devices, suddenly it became possible to combine digital maps with accurate satellite navigation, far beyond the scope of early satnav devices during the 1990s. This would lead eventually to the rise of smartphones, with their wireless internet connectivity, built-in GNSS support and apps like Google Maps that quite literally put a satnav device into your pocket.\nAlthough its useful to get live updates from a remote server on changes along the route, like road work, accidents and obstructions, generally you can use the digital maps offline to plan a route spanning a variety of transport methods and with many options to customize the generated route.\nRoute Planning Today\nThe idea of whipping out a portable computing device and asking a piece of route planning software to quickly plan out a route would have seemed futuristic in the 1990s, but these days we barely give doing so a second thought, let alone how it all works. At this point it should be obvious that simply applying a basic graph traversal algorithm like Dijkstras would be too simplistic, so what do services like Google Maps and others use?\nAlthough the general response is either Dijkstras algorithm., or A*, of course., the truth of the matter is that the former doesnt play a real role in modern-day route finding and A* has seen itself largely superseded by versions that optimize it even further through e.g. the use of preprocessing. We can consider e.g. the 2009 overview (PDF) provided by Daniel Delling and colleagues titled Engineering Route Planning Algorithms.\nOne part where the crisp, clean world of nodes and edges runs into some problem is where you have to consider the many details when e.g. plotting a course via a road network. In the real world not every road is the same, after all, and requires heuristics for when to include certain weights and when not. These heuristics include contraction hierarchies (CH) as well as Highway Hierarchies (HH) and many others, which speeds up the search for a route thats not necessarily the shortest, but also the fastest. By preprocessing the graph, unimportant vertices (intersections) and edges can be skipped, leading to a major speed-up.\nPerhaps it should come as no surprise that such route planning algorithms can be conveniently integrated into your own software, using open source projects like OSRM and RoutingKit, which both use map data from OpenStreetMap (OSM). With todays portable pocket computers and these optimized route planning algorithms and heuristics all it takes is these software components and a good GNSS reception to make your very own satnav.\nWhere From Here\nAlthough it would seem that we have pretty much cracked the whole route planning problem at this point, the paper by Delling et al. notes a number of challenges that still remain. Most of all, moving beyond static point-to-point routing and taking into account time-dependent factors remains a challenge, as many of the shortcuts and preprocessing that made static routing cheap do not work here. Beyond this the characterization of well-behaved networks is a consideration. Despite this paper having been written now almost fifteen years ago, it should be clear to anyone who regularly uses route planning software that it is not quite perfect yet.\nThe integration of more detailed information pertaining to specific travel modes, and preventing awkward situations where for example a truck finds itself wedged into a tunnel or between hedgerows are probably at the forefront of most peoples minds. Now that everyones assumption seems to be that they can just whip out their smartphone, plan a route and mindlessly follow the provided instructions, the impact of a heuristic slipping in a few flawed vertices can be rather major.\nAlthough it is liberating to not have to wrangle with a paper map in the car while traveling to ones vacation destination, the safe assumption is that as amazing as satellite navigation has become, algorithms and data sets arent perfect, you should always rely on your common sense and Mk-1 eyeballs first and foremost.\nThumbnail credit: [betaveros] with the fanciest a* illustration we could find on the Internet.", "title": "\u30b0\u30e9\u30d5\u7406\u8ad6\u3068\u7d4c\u8def\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6b74\u53f2", "body": "2000\u5e74\u4ee5\u524d\u306f\u7d19\u306e\u5730\u56f3\u3092\u4f7f\u3063\u3066\u6700\u9069\u306a\u7d4c\u8def\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u304c\u3001\u73fe\u4ee3\u3067\u306fGoogle \u30de\u30c3\u30d7\u306a\u3069\u306e\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u304c\u3053\u306e\u4f5c\u696d\u3092\u7c21\u5358\u306b\u3057\u3066\u3044\u308b\u3002\u5730\u56f3\u3084\u7b97\u6cd5\u306e\u767a\u5c55\u306f\u79fb\u52d5\u306e\u305f\u3081\u306e\u57fa\u672c\u69cb\u9020\u3084\u30b7\u30b9\u30c6\u30e0\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3002", "titles": ["\u30b0\u30e9\u30d5\u7406\u8ad6\u3068\u7d4c\u8def\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6b74\u53f2", "\u30c7\u30a3\u30af\u30b9\u30c8\u30e9\u6cd5\u3068A*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9032\u5316", "GPS\u3068\u30c7\u30b8\u30bf\u30eb\u30de\u30c3\u30d7\u306e\u9032\u5316", "Google\u30de\u30c3\u30d7\u306e\u80cc\u5f8c\u306b\u3042\u308b\u7d4c\u8def\u63a2\u7d22\u6280\u8853", "\u672a\u6765\u306e\u7d4c\u8def\u63a2\u7d22\u6280\u8853\uff1a\u8ab2\u984c\u3068\u5c55\u671b"]}