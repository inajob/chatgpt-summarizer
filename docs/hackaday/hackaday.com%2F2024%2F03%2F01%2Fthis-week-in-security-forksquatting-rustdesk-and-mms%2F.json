{"pubDate": "2024-03-01T15:00:06", "original_title": "This Week in Security: Forksquatting, RustDesk, and M&Ms", "link": "https://hackaday.com/2024/03/01/this-week-in-security-forksquatting-rustdesk-and-mms/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Github is struggling to keep up with a malware campaign thats a new twist on typosquatting. The play is straightforward: Clone popular repositories, add malware, and advertise the forks as the original. Some developers mistake the forks for the real projects, and unintentionally run the malware. The obvious naming choice is forksquatting, but the researchers at apiiro went with the safer name of Repo Confusion.\nThe campaign is automated, and GitHub is aware of it, with the vast majority of these malicious repositories getting removed right away. For whatever reason, the GitHub algorithm isnt catching all of the new repos. The current campaign appears to publishing millions of forks, using code from over 100,000 legitimate projects. Its beginning to seem that the squatting family of attacks are here to stay.\nRustDesk and Odd Certificates\nThe RustDesk remote access software is interesting, as its open source, allows self-hosting, and written in Rust. Ive had exploring RustDesk as a todo item for a long time, but a bit of concerning drama has just finished playing out. A user pointed out back in November that a test root certificate was installed as part of the RustDesk installation. That root cert is self-signed with SHA1. There is also concern that the RustDesk binaries are signed with a different certificate.\nThere have been new events since then. First, there was a Hacker News thread about the issue earlier this month. The next day, CVE-2024-25140 was registered with NIST, ranking an insane CVE 9.8 CVSS. Lets cut through some FUD and talk about whats really going on.\n\nFirst, root certificates ought to be signed with a more secure hashing function than SHA1. But not for the reason you think, and in this case it doesnt matter. Root certificates are self-signed by definition, and the only reason theyre signed at all is because these certificates must be signed to be valid. Child certs are not protected by the roots signature. The important function that depends on that root signature is the ability to issue a revocation request. That would be really bad for one of the widely trusted root certificates, and not an issue at all for an untrusted cert like this one.\nNext, RustDesk has a valid, signed certificate for the executables. The self-signed root certificate is strictly for signing a kernel driver, which requires an Extended Validation (EV) certificate. Its a bit disconcerting that this requirement can be so easily sidestepped by installing a root cert during application install, but thats on Microsoft, not RustDesk.\nThe final concern here is that this certificate is being installed as a system-wide Certificate Authority (CA). That is the most worrying element of this saga, but certificates have a field specifiying their Key Usage (KU) and Extended Key Usage (EKU). The RustDesk CA is strictly for Code Signing. This does not allow RustDesk or anyone in possession of this key to break TLS or spoof web sites. It does allow code signing, which could be a valid concern, but is not the hair-on-fire situation it first appears.\nRustDesk has pulled this key from their installation, which happens to disable the virtual display driver. That was the functionality that required a signed kernel driver. The latest news is that the RustDesk devs are getting some assistance, and are pursuing an EV code-signing certificate, and expect to have that process wrapped up in about a month. And that CVE, scoring a severity 9.8? Seems completely bogus.\nUltimate Member SQL Injection\nThe Ultimate Member WordPress plugin has been updated to release 2.8.3, fixing a SQL injection flaw that was accessible as an unauthenticated user. Based on the update diff, the key issue is probably a missed prepare() on line 704. Oh, and its apparently being probed and potentially exploited in the wild, so go patch.\nThis is probably a good time to have a chat about why there are so many SQL injection attacks in WordPress. First, SQL injection is when user supplied data is interpreted as part of the SQL command to execute. Thats done by including an unexpected character. For instance, a semicolon indicates the end of a statement, and can be used to start the next. So where a naive program expects a number, an input of 15; DROP TABLE Students will satisfy one SQL statement and inject a second statement to be executed on the database.\nBroadly speaking, there are two approaches to prevent SQL injection: input sanitization and prepared statements. And both is good, too! First, sanitize user input. Make sure that integer is actually an integer and only an integer. Strip out quotation marks, semicolons, and other potentially hazardous characters.\nThe second approach is to use prepared statements. This separates the SQL command from the data in a fundamental way. Its something like $database-prepare(\"INSERT INTO Students (name, age) VALUES (?, ?)\"); to send the SQL commands. Then its followed by $database-bind_param(\"si\", $name, $age); to set the values to be used. And finally a $database-execute(); actually runs the query. There is no injection possible because of the strict separation between the code and values.\nNow we come to WordPress, which has its own wpdb class for database calls. That includes a helpful function, wpdb::prepare() that looks almost like a prepared statement as shown above.\n$wpdb-prepare( \"u.user_registered BETWEEN %s AND %s\", $from_date, $to_date );\nExcept its not at all. The prepare() function strictly does a sanitization pass, and an sprintf() value substitution. The prepare() function does not actually produce a prepared database statement. WordPress does not provide a way to actually use prepared statements. One of the basic paradigms to keep developers out of trouble with SQL injections is missing.\nThe MMs Are Watching\nI have something of a hobby. I find it fun to spot misbehaving machines, and try to figure out what OS is running underneath the shiny GUI. The weirdest embedded device Ive found is a page scanner that ran a full-fat copy of Windows. The price scanners in your local big-box store might just run Windows CE. The airplane seat-back infotainment centers run a really old Linux. And apparently the MM vending machines at the University of Waterloo run Windows with the Invenda.Vending.FacialRecognition.App.exe application.\n\nWe know that because [SquidKid47] caught an unknown software exception on the vending machines display screen, and shared it on reddit. A school newspaper picked up the story (pdf) and determined that the vending machine uses a camera and facial detection as a combination of smart motion sensor and demographics detector for targeted advertising. Yes, these vending machines serves targeted ads. At least they did. These vending machines have met their Waterloo at the University of Waterloo, with the school now formally requesting their removal.\nBits and Bytes\nRing Doorbell to Pwn: It turns out that some smart doorbells arent all that smart. Its not surprising that theres a process to reset a smart doorbell, to associate it with another account. It is rather surprising that this process is as easy as holding the big doorbell button itself for 8 seconds. At the very least, the legitimate owner will receive an email about the change.\nPrinter insecurity is nothing new, but 3D printer security is still a bit of a niche idea. That may be changing, now that the equivalent of a greetings.txt file has been dropped on a bunch of Anycubic printers. Apparently Anycubic uses an MQTT server that really doesnt have sufficient access controls.\nIts that time again, when a vulnerability fix has been released for GitLab, and its time to go update. The stand-out this time is a Cross Site Scripting (XSS) flaw upon visiting a users profile page. I leave it as an exercise for the reader, to produce sample code that copies samy is my hero to the profile page of each visitor.\nAnd finally, in the irony department, Avast has been fined for using a browser privacy plugin as a platform to collect and sell user data. This happened from 2014 to 2020, using the Jumpshot platform for the actual selling of data. The data was nominally anonymized, but the amount and detail of information available is a bit staggering. It is worth pointing out that Jumpshot is no more, and Avast is now owned by another company. Hopefully without harvesting user information.", "title": "Github\u306e\u30de\u30eb\u30a6\u30a7\u30a2\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u3000\uff5e\u30d5\u30a9\u30fc\u30af\u30b9\u30af\u30ef\u30c3\u30c6\u30a3\u30f3\u30b0\uff5e", "body": "GitHub\u306f\u3001\u65b0\u305f\u306a\u30bf\u30a4\u30dd\u30b9\u30af\u30ef\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u4e00\u74b0\u3068\u3057\u3066\u30de\u30eb\u30a6\u30a7\u30a2\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u3092\u8ffd\u8de1\u4e2d\u3002\u4eba\u6c17\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u3001\u30de\u30eb\u30a6\u30a7\u30a2\u3092\u8ffd\u52a0\u3057\u3066\u30d5\u30a9\u30fc\u30af\u3092\u5e83\u544a\u3057\u3001\u958b\u767a\u8005\u304c\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u9593\u9055\u3048\u3066\u30de\u30eb\u30a6\u30a7\u30a2\u3092\u5b9f\u884c\u3059\u308b\u53ef\u80fd\u6027\u3042\u308a\u3002GitHub\u306f\u5927\u534a\u3092\u524a\u9664\u3057\u3066\u3044\u308b\u304c\u3001\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4e00\u90e8\u3092\u30ad\u30e3\u30c3\u30c1\u3067\u304d\u3066\u3044\u306a\u3044\u3002", "titles": ["Github\u306e\u30de\u30eb\u30a6\u30a7\u30a2\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u3000\uff5e\u30d5\u30a9\u30fc\u30af\u30b9\u30af\u30ef\u30c3\u30c6\u30a3\u30f3\u30b0\uff5e", "RustDesk\u306e\u8a3c\u660e\u66f8\u554f\u984c\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56", "Ultimate Member WordPress\u30d7\u30e9\u30b0\u30a4\u30f3\u306eSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u8106\u5f31\u6027\u4fee\u6b63", "\u5927\u5b66\u306e\u81ea\u52d5\u8ca9\u58f2\u6a5f\u304c\u9854\u8a8d\u8b58\u5e83\u544a\u5c0e\u5165\u3059\u308b\u3082\u30c8\u30e9\u30d6\u30eb\u767a\u751f", "IoT\u30c7\u30d0\u30a4\u30b9\u3068\u60c5\u5831\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3000\uff5e\u30c9\u30a2\u30d9\u30eb\u30013D\u30d7\u30ea\u30f3\u30bf\u3001GitLab\uff5e"]}