{"pubDate": "2023-07-20T14:00:32", "original_title": "PCIe For Hackers: An M.2 Card Journey", "link": "https://hackaday.com/2023/07/20/pcie-for-hackers-an-m-2-card-journey/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/03/PCIe.jpg", "youtube": "https://www.youtube.com/watch?v=ARwBwHZESOY", "original_content": "Ive designed a few M.2 adapters for my own and my friends use, and having found those designs online, people have asked me for custom-made adapters. One of these requests is quite specific  an adapter that adds one more PCIe link to an E-key M.2 slot, the kind of slot you will see used in laptops for WiFi cards. See, the M.2 specification allows two separate PCIe links connected to the E-key slot; however, no WiFi cards use this apart from some really old WiGig-capable ones, and manufacturers have long given up on connecting a second link. Nevertheless, there are some cards like the Google Coral M.2 E-key dual AI accelerator and the recently announced uSDR, that do indeed require the second link  otherwise, only half of their capacity is available.\nIts not clear why both Google and WaveletSDR designed for a dual-link E-key socket, since those are a rare occurrence; for the Google card, there are plenty of people complaining that the board they bought just doesnt fully work. In theory, all you need to do to help such a situation, is getting a second PCIe link from somewhere, then wiring it up to the socket  and a perfect way to do it is to get a PCIe switch chip. You will lose out on some bandwidth because the uplink PCIe connection of the switch can only go so fast; for things like this AI accelerator, its not much of a problem since the main point is to get the second device accessible. For the aforementioned SDR, it might turn out useless, or you might win some but lose some  cant know until you try!\nBuilding Our Own Card\nThats a hacker-friendly problem we can solve for fun and learning opportunities! With a small enough PCIe switch chip, we could make an M.2 card PCB that also has an M.2 socket, putting a PCIe switch in between to split the incoming PCIe 1x link into two outgoing 1x links.\nWhats more, this problem has even been solved before. This exact adapter already has been made by someone online  however, its decidedly not open-source, and its creator has never started selling it, claiming lack of interest. The adapter were designing today, will be fully and properly open  anyone will be able to get their own adapter like this manufactured if they need one, learn from it, or remix it into something else.\nOn the PCIe switch side, I did mention a small, cheap and underexplored PCIe switch chip last time  the ASM1182e, which is able to create two PCIe x1 links out of one. Its easily available on Aliexpress, used on many PCIe-splitting cards from China, its $6 after shipping, and it seems to be low-maintenance  small number of external components, standalone operation, simple wireup. Sadly, we just dont have a datasheet for it that I could find  however, theres quite a bit of information we can use to create our own boards, and Ill show you how you might be able to design around chips even if you dont have their datasheets.\nToday, were solving a long-standing problem for a hardware niche, creating a M.2 adapter with three PCIe links in total, and reverse-engineering a PCIe switch chip with no datasheets available. Id also like to make this board densely packed as a challenge, and show you what it takes, from a schematic page, to an assembled card.\nSchematics More Open Than Expected\nIll use one of my M.2 adapter designs as a base for this design  specifically, an A+E key to M-key adapter, letting you insert an SSD into a laptops WiFi card slot. That ones a two-layer board because it could be, but today, two layers wont do  this design will need four layers, as routing PCIe links properly and getting ground to everywhere would get way too intense otherwise! If you can reuse someone elses design for your goals, absolutely do so  this one has tested symbols and footprints, meaning that theres less variables for me to recheck! As a result, we dont have to design an M.2 card from scratch.\n\nThe same goes for the reference schematic we can reverse-engineer the ASM1182 from  specifically, its from a mass-produced laptop. Today, were in luck  Clevo is one of the rare companies that has (or had) a tradition of publishing schematics for their laptops, likely helped by the fact that, unlike every other laptop manufacturer, they actually design their own mainboards. The only other laptop company Ive seen publish schematics is Framework, whose mainboard is subcontracted (the norm in laptop space), and theirs is a partial one with all possibly-NDAed stuff removed. Theres no confidentiality markings of any kind on the schematic were looking for today  nevertheless, Im not providing a link, but its undoubtedly the first result in your favourite search engine, especially if you look for P75xZM_ESM.pdf.\nFor the purposes of writing this article, its fortunate that this particular schematic does not appear to be problematic in any way. Its apparently, quite uncommon for companies to issue takedown requests at schematic hosting sites, but these information-filled PDFs tend to be in a legal grey zone at best when it comes to distribution  you will see it argued that they fall under some form of intellectual property, and you might remember a showing schematics on stream dispute with Apple that thrust Louis Rossmann into the limelight. That said, if you personally ever use a schematic found online for reverse-engineering and design purposes, even if it has CONFIDENTIAL all over it, theres no indication that youre in any risk whatsoever  people have been doing that for ages with ThinkPads, Apple tech, and certainly random laptops here and there.\nA Pinch Of Reverse-Engineering\nWhat do we get out of this schematic? Well, the entire page 93 of the datasheet is dedicated to the ASM1182, with a complete, tested and working circuit that actually was shipped inside a laptop. Its not a datasheet, sure, but it has a symbol with pin names and its fully wired up, so its more than enough for us to copy the circuit; it even lists descriptions for strap pins, which is rare to find in schematics. Also, its basically the only information about it that I could find online, and I sure did search!\nTheres one more source of reference  an open-source KiCad board with an ASM1184, a wonderful project by [will127534] that lets you connect four NVMe SSDs to a Raspberry Pi CM4, and our hacker has reverse-engineered the ASM1184 just enough to make a fully functioning board. Theres a bit of extra info on power requirements, too  for instance, we see that all the same-voltage power pins are joined together and it doesnt seem like we actually need multiple 3.3 V or 1.2 V power rails, even if the pin names are different. Connecting all pins together is something that the laptop schematic also does, but in a roundabout way, so its good to have reassurance.\nOne thing the schematic doesnt list is the ASM1182s QFN package type  i.e. pad pitch. However, our ASM1184 shows that it has pitch of 0.5 mm, which Id expect to stay the same within the IC family, and KiCad has 48-pin QFN footprints with 0.5 mm pitch that seem to fit the bill perfectly. Just like the Pi Pico, theres 3.3 V and 1.2 V pins all around the package  for 1.2 V, I initially decided to designate an inner plane, but 3.3 V could go around behind the pins, between them and the ground pad. Ive opted to decrease the ground pads size  you can do that reasonably safely on a QFN, and my aim is to be able to both put 1.2 V vias there but also be able to pull an extra track. 4 mm ground pad size works perfectly for this, going down from the original 5.3 mm.\nIn the end, even though we dont have a datasheet and the chip is reasonably complicated, we seem to have everything we could need to design a board! You wont always get this lucky  that said, now you know that inaccessible datasheets arent the end.\nThe Crucial Choices\nI got the ASM1182 symbol recreated in KiCad, and routing the schematic has been super simple  starting from the M.2 socket-to-socket adapter design Ive had, Ive added the ASM1182, wired up the signals of the three PCIe links, one to the card edge and two to the onboard socket, copied basically everything that the laptop schematic had, then started going through component footprint choices, estimating board component placement, and thinking through how the design could look.\nAs usual, 80% of a successfully routed PCB is proper component placement, 80% is good routing choices, and the remaining 80% are mostly clairvoyance  if you arent good at the last one, dont worry, just be prepared to redesign parts of the board once or twice.\nHere, component placement has been deceptively simple  Ive taken an existing M.2 adapter as a base for outline, and assigned PCIe switch output links to M.2 sockets link pins in a way that PCIe diffpair routing will mostly be short and sweet. After that, Ive placed the PCIe switch on the bottom in a way that theres plenty of space for PCIe diffpair routing on two more intense looking sides, and a bit of space on the other side for all of the PCIe switch configuration resistors. That said, it helps that Ive been designing boards for a while and I have an eye for good component placement  if youre starting out, you might not get it right the first time, so cut yourself some slack, ask people for a design review, and take note on what other people do when they design their own boards.\nSuch a board would more-or-less require a stencil for assembly  having a 0.5 mm pitch ASM1182 and an M.2 socket means that soldering iron assembly will be pretty effortful, and stenciling is fast in comparison. Im going with 0402 components on this board  since Im stenciling it anyway, theres no good reason not to, and larger components would take way more space on the board. Itll have to be dual-sided assembly, too  Im not making a bet on having vertical space for any components under the inserted card, and having half of the space on the top layer occupied by the card edge and the socket puts us at a great disadvantage for single-sided placement. Usually, it isnt as comfortable to stencil a board with components on both sides, but here Id like to try and do it dual-sided anyway, and it should still be possible to stencil it despite any problems.\nAll in all, this is going to be a reasonably simple board to design and build, as long as we lay things out well! When routing such a board, you can start with the sensitive high-speed signals first while keeping the power rails and ground in mind, then route the power rails and ground while keeping low-importance signals in mind, and then, route the low-importance signals. Here, rotating the IC in one of the four directions solved most of the routing issues  putting both of the output PCIe links next to where theyre expected to be, and rotating the upstream link so that it can easily be routed from the card edge connector.\nCapping The Power Consumption\nProper power is necessary for an IC, and doubly so for a fast PCIe switch. I have no datasheet to refer to when it comes to peak and idle consumption numbers, but in the laptop schematic diagram I have, its got its own 2 A linear regulator for the 1.2 V rail. Ill personally go with a switching regulator, SY8089, a tried and true part from a well-known Chinese manufacturer. Since some of the pins are labelled as AVDD, I suspect some de-noising might be desired, but so far, both of the schematics weve seen, just join all power pins together with the non-analog-prefixed pins.\nAs a rule, youll want one capacitor per IC power pin  my usual tactic is copypasting a ton of capacitors in the schematic, placing them around the chip according to the power pins I see, and deleting the extra ones afterwards. Ive seen people use both 1 uF and 100 nF caps for decoupling, but its not clear theres much of a benefit to 1 uF over 100 nF here  Im going to use 100 nF caps in most places because theyre slightly cheaper, and add an 1 uF or two in places where current might have a harder time flowing, further away from the power source trace-wise. Of course, these are not exact values  its more of a range, and a capacitors presence at a power input is often way more important than its very specific value as far as IC decoupling is concerned, plus, the resulting capacitance varies wildly anyway, dependent on voltage applied, temperature, and the capacitors manufacturing tolerances. These are the kind of decoupling capacitor rules that I and many other people follow for own designs  if youd like to learn more about rules of thumb and actual reasoning for decoupling capacitor choice and placement, heres a collection of links.\nStill, these are important capacitors, meant to keep a digital chip at a stable brownout-free voltage with its highly spikey current consumption pattern, supplementing the current that flows through the path from the power supply  a path which tends to be long-winded and electrically thorny, high inductance and all. In the end, Ive made extra sure that all power pins have capacitors somewhere nearby, and added two 1uF capacitors at further-away 3.3 V and 1.2 V areas. This is, again, more of a vibes-based placement, but it tends to work well. Every decoupling capacitor has to have a great path to both its power rail and GND  vias will work wonders for GND as we have two GND layers throughout the board, and for 3.3 V with 1.2 V, traces under the IC or even on internal layers should work alright too.\nLayout Done, Diffpairs To Go\nNow, we have at least 80% of this board completed  its time to route it. Remember the routing order? High-speed first, then power and ground, then low-importance signals. If the high-speed signals dont work, the board might as well be toast, and its pretty hard to bodge after the fact. If the power distribution doesnt work, the board wont work well, but its easier to bodge that. And, if low-importance signals are mixed up, you can generally bodge them easily!\nAs such, we start our routing with diffpairs  next week, we will plug board parameters into a calculator to get trace width and spacing, draw the pairs as properly as the board space allows us, and tune their length a bit  with a video demonstration, too!", "title": "\u300cM.2\u30b9\u30ed\u30c3\u30c8\u306bPCIe\u30ea\u30f3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u30a2\u30c0\u30d7\u30bf\u300d\u306e\u4f5c\u6210\u65b9\u6cd5", "body": "\u81ea\u4f5c\u306eM.2\u30a2\u30c0\u30d7\u30bf\u30fc\u3092\u8a2d\u8a08\u3057\u3001\u4e00\u90e8\u306eWiFi\u30ab\u30fc\u30c9\u306b\u3055\u3089\u306b1\u3064\u306ePCIe\u30ea\u30f3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u30a2\u30c0\u30d7\u30bf\u30fc\u3092\u4f5c\u308a\u305f\u3044\u3068\u306e\u8981\u671b\u304c\u3042\u308a\u307e\u3059\u3002PCIe\u30b9\u30a4\u30c3\u30c1\u30c1\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u3001M.2\u30ab\u30fc\u30c9\u306b3\u3064\u306ePCIe\u30ea\u30f3\u30af\u3092\u642d\u8f09\u3059\u308b\u8a2d\u8a08\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u307e\u3059\u3002", "titles": ["\u300cM.2\u30b9\u30ed\u30c3\u30c8\u306bPCIe\u30ea\u30f3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u30a2\u30c0\u30d7\u30bf\u300d\u306e\u4f5c\u6210\u65b9\u6cd5", "\u300cGoogle Coral M.2 AI\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u30fc\u7528\u306ePCIe\u30ea\u30f3\u30af\u30a2\u30c0\u30d7\u30bf\u300d\u306e\u30cf\u30c3\u30ab\u30fc\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3", "\u300c\u975e\u516c\u958b\u306ePCIe\u30b9\u30a4\u30c3\u30c1\u30c1\u30c3\u30d7\u306e\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u300d\u3067M.2\u30a2\u30c0\u30d7\u30bf\u3092\u8a2d\u8a08", "\u300c4\u5c64\u306eM.2\u30a2\u30c0\u30d7\u30bf\u30dc\u30fc\u30c9\u306e\u30c7\u30b6\u30a4\u30f3\u3068\u7d44\u307f\u7acb\u3066\u624b\u9806\u300d\u306e\u89e3\u8aac", "\u300c\u9ad8\u901f\u4fe1\u53f7\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u304a\u3051\u308b\u8a2d\u8a08\u4e0a\u306e\u30dd\u30a4\u30f3\u30c8\u3068\u30d2\u30f3\u30c8\u300d"]}