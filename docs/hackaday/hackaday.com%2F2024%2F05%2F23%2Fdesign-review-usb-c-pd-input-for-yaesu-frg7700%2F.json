{"pubDate": "2024-05-23T14:00:21", "original_title": "Design Review: USB-C PD Input For Yaesu FRG7700", "link": "https://hackaday.com/2024/05/23/design-review-usb-c-pd-input-for-yaesu-frg7700/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/04/PCBdesign.jpg", "original_content": "Today is another board from a friend, [treble], who wants to convert a Yaesu FRG7700 radio to USB-C PD power. Its yet another review that Ive done privately, and then realized Ive made more than enough changes to it, to the point that others could learn from this review quite a bit. With our hackers consent, Im now sharing these things with you all, so that we can improve our boards further and further.\nThis boards idea is thought-out and executed well  it replaces a bespoke barrel jack assembly, and is mechanically designed to fit the screw holes and the free space inside the chassis. For USB-PD, it uses a CH32V003 coupled with FUSB302  I definitely did help pick the latter! For mechanical reasons, this board is split into two parts  one has the USB-C port, whereas the other has the MCU and the PD PHY.\nIn short, this board is a PD trigger. Unlike the usual PD triggers, however, this one is fully configurable, since it has a 32-bit MCU with good software support, plus, the PD PHY is also well known and easily controllable. So, if you want special behavior like charger-power-dependent profile selection for powering a static resistance load, you can implement it easily  or, say, you can do PPS for variable voltage or even lithium ion battery charging! With a bit of extra code, you could even do EPR (28 V = 140 W power) with this board, instantly making it into a pretty advanced PD trigger, beyond the ones available on the market.\nAlso, the board has some PCB art, and a very handy filter to get some of the USB-C charger noise out. Lets take a look at all of these!\nCurrent Flow Improvements\n\n\n\n\n\nA companion board for this PCB, that hosts the vertical USB-C socket, fitting into the small gap available in the barrel jack space\nFirst of all, the back of the PCB has art. This is a problem. Specifically, the art has to be bigger. See, fabs might struggle drawing thin silkscreen lines. So, I will take the liberty of enlarging it. This board is 2525 mm in size, after all. Due to the way KiCad works, Ive had to ask for the original .svg file from [treble] for that. Heres a tip that I myself should follow more, if youre adding PCB art, storing its sources alongside the board is pretty valuable for whenever it might need to be regenerated or modified!\nThis board is seriously nice. It has thick traces for power, and, it makes liberal use of filled zones for higher-current tracks, too! Its not often that I see these fills used, even for higher-power areas, and truth be told, I get lazy to draw them, but they are possibly the cleanest choice for a board that fulfills a power-related purpose. Also, as usual, its just two layers, something dear to my heart.\nNow, lets take a good look at the two layers we have. This is a board that current is supposed to flow through, and if you have an eye for it, you might notice that it will be impeded more than youd want it to be, in ways that are easy to fix.\n\n\n\n\nTake a look at the boards bottom layer. It has a ground plane, yes, but there are also tracks going all across it. If you try and visualize the way that ground return current could flow across the board, you might realize that it has to go through a few small slivers of copper; this is despite the ground fill being present on both sides. Lets fix this.\n\n\n\n\nHere are three spots where you could straightforwardly add ground connectivity purely by moving vias. I usually look out for such spots as part of my after-design cleanup routine  something I might spend a good half an hour on; just, idly glancing at the board in the 3D viewer, looking here and there, trying to notice any things I could improve upon. Here, if you wanted a high return on your investment, you could move these vias and gain whole two new paths for ground return current to flow through.\nMoving tracks around will yield way bigger returns for freeing up some ground area. For a start, the SWIO pin, wittily wired up to an SBU pin on the USB-C connector with the trace snaking between the 2.54 mm header pads, doesnt have to go on B.Cu at all. The VBUS connection of the FUSB302 could also be moved to the left edge, all around the 2.54 mm connector, so that it doesnt have to cut the ground polygon in half. Furthermore, we could improve upon USB diffpair routing by rotating the CH32V003 90 degrees clockwise, and having the pairs go back onto the front layer again at the top. Part of the 3.3 V track could be routed on the top if you rotate a resistor 180 degrees, and voila, we now have a healthy and plentiful ground polygon.\n\n\n\n\nRoute as much of your board on a single layer as humanly possible is still a great guideline, and it helps here, too. It also helps if you look at your board and visualize the way that ground return current will flow, from one side to the other, all along the signals.\nOnly a few small details are left. The ICs dont have decoupling caps on their 3.3 V inputs, and we could easily add them  cleaner power is always a plus. Oh, and the linear regulator could use a couple more vias from its GND pin  purely for the heat dissipation potential. Theres a 1.5 K resistor used for a USB pull-up, and I2C uses 3.3 K pullups in the same package  Ive changed them to use 1.5 K too, just as a BOM optimization reminder; should work wonders for I2C.\nImplementation Details And Polish\nSomething I dont expect hackers to know but is nice to keep in mind  the VBUS pin of the FUSB302 is fault-prone and PSU noise on it can cause the FUSB to die in a way that short-circuits the 3.3 V rail, to the point that the Pinecil soldering iron eventually disconnected it in a new hardware revision, and the community has developed guides to disconnect the VBUS pin. Furthermore, the VBUS connection on the FUSB is not even needed for any part of the PD process; essentially, its not even a nice-to-have, all you get is an interrupt that doesnt carry any meaning in our bus-powered arrangement. Lets disconnect it  that frees up quite a bit of ground and routing space around the FUSB302.\nNow, adding a 1:10 resistor divider to an ADC-capable CH32V003 pin would be worthwhile  this lets us measure the voltage we get, checking that its indeed the voltage we need. FUSB has provisions to measure voltage on its VBUS pin, but theyre bothersome to use, using an on-MCU ADC is way easier. Ive also added a 3.6 V Zener diode in 0805 package, clamping the voltage that reaches the GPIO  I dont expect it to actually be needed, but we do have space for it, and it protects the MCUs GPIO in case of any assembly errors or voltage spikes; I have previously mis-placed a resistor at a voltage divider, and now Im worried about others doing it. Worst case, the Zener doesnt have to be placed at all, and you can just add a capacitor there, smoothing the divided voltage before it reaches the ADC.\nWhat else? Heres something to consider  the radio might not be happy with 5 volts on its power input, which is an inevitability given how the USB-C negotiation process works. Remember, first, you get 5 V, and then you have to negotiate further up. This is why PD trigger ICs tend have a PG pin, that you can connect to a P-FET gate, and that pin is only driven after a successful negotiation. In our case, we have MCU GPIOs we can use instead!\nCH32V003 pinout diagram courtesy of [Tengo10]s pinout generator scriptFor that to work, lets rewire the VBUS on this board. The MCU and its 3.3 V linear regulator can be powered from the raw USB-C input, we wont gate them with the FET, of course, thatd lead to a chicken and egg problem. It makes sense to power the Pi filter through the FET, though  mostly because we have some board space between the USB-C input and the Pi filter, where a SOT-23 FET could very nicely fit. The radio could consume as much as 3 A at 12 V; at least, thatd be the maximum capability of a typical USB-C PSU you could use with this board. My FET of choice, then, is AO3401  a classic FET that works at 30 V 4 A, and will even let this board be a pretty generic trigger board if needed, and; higher current, you can stack one more SOT23 FET on top.\nWith an NPN driver and a provisional 3:1 divider for the gate voltage, the power good circuit fits into the board space wonderfully. If its not needed, it can be easily jumpered with a 0 R resistor across the FET pads, but adding this circuit retrospectively would be bothersome  it helps that we have the footprints for it. Remember, traces and footprints are free to add, fundamentally  just like silkscreen markings.\n\n\n\n\nHow Will You Use Your Board?\nAnother great thing to visualize is  after you assemble your board, how will you interact with it? Here, [treble] still has to write the USB-PD firmware  in C++, no less, my MicroPython stack wont be directly applicable, as much as I will help, but [Ralim]s open-source PD stack used in the Pinecil could work wonderfully! While integrating that, she will have to debug things. Possibly, might even have to debug it some more later on, with the board installed into the radio chassis. Its a project one hacker could pull off without a doubt, and, theres things you could add to your board that will help.\nThe SWIO pin of the CH32V003 goes to an SBU pin on the USB-C socket. This is a great decision, because you can easily reflash the MCU without disassembling the entire radio  just have a USB-C plug with SBU exposed and thats enough. Also, when Im thinking about it, it might be troublesome during active development, because [treble] will have to constantly unplug and plug the PSU and the programming plug while debugging the in-progress firmware. Now, she could solder to the 2.54 mm pin headers, sure  alternatively, you could add an extra SWIO header at the edge and make her job a bit easier. I cant find much space for it, sadly, so I suppose a female header with longer male pins (Arduino and Wemos shield style) can do just as well, also allowing to probe CC pins as a bonus.\nI feel like theres a good few more things you can add to improve development and usage comfort. Will there be a failure mode where the board has to signal to the user that somethings gone wrong  say, with a 5 V USB-C PSU inserted? Lets add two LEDs on one pin  could even do WS2812 sometime later. What about I2C communications, what if tapping them would be useful during the boards development? Lets add a QWIIC socket and pull the I2C lines onto it  not for expansions, but rather, so that you have a socket you can easily wire up to a logic analyzer, plug it in and unplug it at any point.\n\n\n\n\nTheres some arguments to be made for breaking out as many CH32V003 pins as possible. I will refrain from it, as much as its tempting  at this point, there isnt a lot of board space in the spots where it matters. It would be cool to have them on testpoints though! Speaking about that, Ive just realized  you could add a tiny SMD three-position DIP switch onto the back of the board reasonably easily, so that you can have profiles for the trigger board, CH224 PD trigger board style. Ive found the tiniest three-position SMD DIP switch that LCSC has, then added it to the back of the board, trying to still have the ground fill as intact as possible  the idea is that this is a nice feature for whenever the board might be used as a more general-purpose trigger board. When not populated, it serves as a breakout for three ADC-capable GPIOs, GND, and 3.3 V!\nNow, Id like to emphasize: the DIP switch is not exactly necessary in this project. It falls into something thatd be cool to fit in space left over, if the board is to be used in an entirely different setting. Overall, I try not to push features this remote onto people while doing design review  plus, it does clash with the silkscreen. So, this addition is easily removable from the PCB files, and it doesnt have to be populated either. Also, Ill stop the additions here, to avoid feature creep.\nThat about wraps it up for things I feel like this board needs. Lets talk about an aspect where Id like your opinion.\nQuestions For The Audience\nNow, heres a question for the audience, on two things Im not well-versed on. First one is  heres a Pi filter. The purpose is filtering out 300 KHz USB-C charger switching frequency that [treble] has noticed being produced by a USB-C charger shes picked. Having simulated this filter in LTSpice, it appears to be good for filtering out 200 KHz and above. Does that look correct? And, any things she should look out for when it comes to component choices?\n\nAnother question is  the ground cutout under the Pi filter. My understanding is  the more ground, all over the board, the better. [treble] decided to remove ground under the Pi filter, as far as I recall, due to a gut feeling that itd decrease noise imposed by the inductor. Does that make sense? Im tempted to say no, but I cant formulate a good enough explanation on the specific downsides and how it might need, which is why Im asking you.\n\nAnother board reviewed, and due to the way its built, I can easily imagine ordering a dozen for use in my own projects  thanks to [treble] for sharing this, and I hope this feedback helps! As usual, if you would like a design review for your board, submit a tip to us with [design review] in the title, linking to your board files. KiCad design files strongly preferred, both repository-stored files (GitHub/GitLab/etc) and shady Google Drive/Dropbox/etc .zip links are accepted.\nI thank [Julianna] for helping me check the the CH32V003 circuit!", "title": "Yaesu FRG7700\u30e9\u30b8\u30aa\u3092USB-C PD\u96fb\u6e90\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u30dc\u30fc\u30c9\u306e\u69cb\u7bc9\u65b9\u6cd5", "body": "\u53cb\u4eba\u304b\u3089\u306e\u65b0\u3057\u3044\u30dc\u30fc\u30c9\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u307e\u3059\u3002\u30e4\u30a8\u30b9FRG7700\u30e9\u30b8\u30aa\u3092USB-C PD\u96fb\u6e90\u306b\u5909\u63db\u3059\u308b\u30dc\u30fc\u30c9\u3067\u3001\u30cf\u30c3\u30ab\u30fc\u5411\u3051\u306b\u5171\u6709\u3055\u308c\u3001\u8a55\u4fa1\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30dc\u30fc\u30c9\u306f\u3088\u304f\u8003\u3048\u3089\u308c\u305f\u30a2\u30a4\u30c7\u30a2\u3067\u3001PD\u30c8\u30ea\u30ac\u30fc\u3067\u69cb\u6210\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u4fe1\u983c\u6027\u304c\u3042\u308a\u307e\u3059\u3002", "titles": ["Yaesu FRG7700\u30e9\u30b8\u30aa\u3092USB-C PD\u96fb\u6e90\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u30dc\u30fc\u30c9\u306e\u69cb\u7bc9\u65b9\u6cd5", "USB-PD\u30c8\u30ea\u30ac\u30fc\u3092\u4f7f\u3063\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u7d44\u307f\u7acb\u3066\u3068\u8a2d\u5b9a\u65b9\u6cd5", "PCB\u30a2\u30fc\u30c8\u3084\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u8ffd\u52a0\u65b9\u6cd5\u3068\u305d\u306e\u52b9\u679c", "CH32V003\u30d4\u30f3\u306b\u3088\u308bADC\u5bfe\u5fdc\u306e\u6a5f\u80fd\u62e1\u5f35\u306b\u3064\u3044\u3066", "\u958b\u767a\u3068\u4f7f\u7528\u306e\u5feb\u9069\u3055\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306e\u30dc\u30fc\u30c9\u6a5f\u80fd\u306e\u8ffd\u52a0\u65b9\u6cd5"]}