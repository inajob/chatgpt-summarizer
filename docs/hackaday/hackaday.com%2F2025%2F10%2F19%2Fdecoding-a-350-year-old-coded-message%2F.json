{"pubDate": "2025-10-19T11:00:00", "original_title": "Decoding a 350 Year Old Coded Message", "link": "https://hackaday.com/2025/10/19/decoding-a-350-year-old-coded-message/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/code.png", "original_content": "Usually, a story about hacking a coded message will have some computer element or, at least, a machine like an Enigma. But [Ruth Selman] recently posted a challenge asking if anyone could decrypt an English diplomatic message sent from France in 1670. Turns out, two teams managed it. Well, more accurately, one team of three people managed it, plus another lone cryptographer. If you want to try decoding it yourself, you might want to read [Ruths] first post and take a shot at it before reading on further here: there are spoilers below.\nNo computers or machines were likely used to create the message, although we imagine the codebreakers may have had some mechanized aids. Still, it takes human intuition to pull something like this off. One trick used by the text was the inclusion of letters meant to be thrown out. Because there were an odd number of Qs, and many of them were near the right margin, there was a suspicion that the Qs indicated a throw-away character and an end of line.\n\nA further complication was that in 1670, there was no spell check. Or maybe the writer dropped some letters simply to thwart would-be decoders. The message was in columns that needed rearrangement, and some words like THE and AND are, apparently, abbreviated in the cipher. Some names and places had numeric codes and, despite novels and movies, are not decipherable without knowing the key or using some other knowledge that isnt evident in the message.\nIf you do decide to try, the government has some (previously) classified code-breaking info to help you. If you want something even older, you can go back to the days of Mary, Queen of Scots.", "title": "1670\u5e74\u306e\u6697\u53f7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u89e3\u8aad\u3059\u308b\u6311\u6226", "body": "1670\u5e74\u306e\u30d5\u30e9\u30f3\u30b9\u306e\u5916\u4ea4\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u89e3\u8aad\u3059\u308b\u6311\u6226\u304c\u3042\u308a\u30012\u30c1\u30fc\u30e0\u304c\u6210\u529f\u3002\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u3001\u53e4\u3044\u624b\u6cd5\u3084\u30ab\u30ae\u304c\u5fc5\u8981\u3002", "titles": ["1670\u5e74\u306e\u6697\u53f7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u89e3\u8aad\u3059\u308b\u6311\u6226", "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306a\u3057\u3067\u306e\u4eba\u9593\u306e\u76f4\u611f\u306b\u3088\u308b\u6697\u53f7\u89e3\u8aad", "\u6b74\u53f2\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u96a0\u3055\u308c\u305f\u79d8\u5bc6\u3092\u63a2\u308b", "\u8b0e\u306e\u30b3\u30fc\u30c9\u89e3\u8aad\uff1a1690\u5e74\u306e\u5916\u4ea4\u6587\u66f8\u306e\u79d8\u5bc6", "\u30c7\u30b8\u30bf\u30eb\u6280\u8853\u306a\u3057\u3067\u306e\u6697\u53f7\u306b\u6311\u6226\u3059\u308b\u65b9\u6cd5"]}