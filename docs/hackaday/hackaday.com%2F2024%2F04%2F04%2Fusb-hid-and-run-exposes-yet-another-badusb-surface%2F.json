{"pubDate": "2024-04-04T23:00:05", "original_title": "USB HID And Run Exposes Yet Another BadUSB Surface", "link": "https://hackaday.com/2024/04/04/usb-hid-and-run-exposes-yet-another-badusb-surface/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/04/usb-featured.jpg", "original_content": "You might think you understand the concept of BadUSB attacks and know how to defend it, because all youve seen is opening a terminal window. Turns out theres still more attack surface to cover, as [piraija] tells us in their USB-HID-and-run publication. If your system doesnt do scrupulous HID device filtering, you might just be vulnerable to a kind of BadUSB attack you havent seen yet, rumoured to have been the pathway a few ATMs got hacked  simply closing the usual BadUSB routes wont do.\nThe culprit is the Consumer Control specification  an obscure part of HID standard that defines media buttons, specifically, the launch browser and open calculator kinds of buttons you see on some keyboards, that operating systems, surprisingly, tend to support. If the underlying OS youre using for kiosk purposes isnt configured to ignore these buttons, they provide any attacker with unexpected pathways to bypass your kiosk environment, and it works astonishingly well.\n[piraija] tells us that this attack provides us with plenty of opportunities, having tested it on a number of devices in the wild. For your own tests, the writeup has Arduino example code you can upload onto any USB-enabled microcontroller, and for better equipped hackers out there, were even getting a Flipper Zero application you can employ instead. While weve seen some doubts that USB devices can be a proper attack vector, modern operating systems are complex and bloated enough than even meets the eye, often for hardly any reason  for example, if youre on Windows 10 or 11, press Ctrl+Shift+Alt+Win+L and behold. And, of course, you can make a hostile USB implant small enough that you can build them into a charger or a USB-C dock.\nUSB image: Inductiveload, Public domain.", "title": "HID\u30c7\u30d0\u30a4\u30b9\u3092\u4f7f\u7528\u3057\u305fBadUSB\u653b\u6483\u306e\u65b0\u305f\u306a\u8105\u5a01", "body": "USB-HID-and-run\u306f\u65b0\u305f\u306aBadUSB\u653b\u6483\u624b\u6cd5\u3092\u8b66\u544a\u3059\u308b\u8a18\u4e8b\u3002OS\u306fConsumer Control specification\u306e\u4e00\u90e8\u3068\u3057\u3066\u3001USB\u30c7\u30d0\u30a4\u30b9\u7d4c\u7531\u3067\u306e\u653b\u6483\u3092\u8a31\u3059\u53ef\u80fd\u6027\u3042\u308a\u3002Arduino\u30b3\u30fc\u30c9\u3084Flipper Zero\u30a2\u30d7\u30ea\u3082\u516c\u958b\u4e2d\u3002Windows\u3067\u306e\u8106\u5f31\u6027\u3082\u6307\u6458\u3002", "titles": ["HID\u30c7\u30d0\u30a4\u30b9\u3092\u4f7f\u7528\u3057\u305fBadUSB\u653b\u6483\u306e\u65b0\u305f\u306a\u8105\u5a01", "HID\u898f\u683c\u306eConsumer Control\u4ed5\u69d8\u3092\u60aa\u7528\u3057\u305fUSB\u653b\u6483", "\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30e1\u30c7\u30a3\u30a2\u30dc\u30bf\u30f3\u3092\u5229\u7528\u3057\u305f\u4e0d\u6b63\u306a\u30d1\u30b9\u751f\u6210\u653b\u6483", "Arduino\u3092\u4f7f\u3063\u305fUSB\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3078\u306e\u653b\u6483\u4f8b", "\u60aa\u610f\u3042\u308bUSB\u30a4\u30f3\u30d7\u30e9\u30f3\u30c8\u3092\u5145\u96fb\u5668\u3084USB-C\u30c9\u30c3\u30af\u306b\u642d\u8f09\u53ef\u80fd"]}