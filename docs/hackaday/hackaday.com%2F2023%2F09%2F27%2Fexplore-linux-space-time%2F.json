{"pubDate": "2023-09-27T23:00:29", "original_title": "Explore Linux Space Time", "link": "https://hackaday.com/2023/09/27/explore-linux-space-time/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2017/03/tux-on-htop-featured.jpg", "original_content": "If youve ever wondered how much memory a process uses, youve probably used a form of task manager or system monitor. System monitors can be useful to identify resource hogs, but are often less versatile if you want more details about just one process. If youve ever faced this problem, then [Fabien Sanglard]s Space-Time explorer is for you!\nThe wonderfully punny Space-Time tool records physical memory usage, time spent in user space vs. kernel space and even threads and subprocesses created. These words may not mean much to some readers, so lets quickly go over them: Physical memory usage is the actual amount of RAM given (not always the same as requested). The kernel (which lives in kernel space) is the supervisor to all processes on a computer. In contrast, every process lives in its own user space, a way of protecting the kernel. Finally, a subprocess (or child process) is simply a process started by another process (the parent).\nIn their blog post, [Fabien] starts with a simple test program: allocating 1 GiB and setting each byte individually. What would seem like a simple task that shouldnt take much more than 10ms actually takes over a second and [Fabien] explains that the kernel doesnt actually immediately give 1 GiB, but actually waits until the memory gets used. [Fabien] also compares the Space-Time footprints of hello world programs in C and C++ (both clang and GCC), Rust, Java and Go, which yields surprising results. [Fabien] also tries some more real-world tasks like a browser (chromium), curl, wget and even a compiling a medium-size project (Git) from source. Finally, [Fabien] finishes off by briefly explaining how Space-Time explorer works and why what pushed them to create the tool in the first place.\nIf youre looking to improve you Linux arsenal, how about building a better ls?"}