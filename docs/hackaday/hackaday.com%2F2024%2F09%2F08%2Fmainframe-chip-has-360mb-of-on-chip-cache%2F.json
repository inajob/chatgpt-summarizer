{"pubDate": "2024-09-09T05:00:02", "original_title": "Mainframe Chip has 360MB of on-Chip Cache", "link": "https://hackaday.com/2024/09/08/mainframe-chip-has-360mb-of-on-chip-cache/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/09/ibm_e94bed.png", "original_content": "It is hard to imagine what a mainframe or supercomputer can do when we all have what amounts to supercomputers on our desks. But if you look at something like IBMs mainframe Telum chip, youll get some ideas. The Telum II has only eight cores, but they run at 5.5 GHz. Unimpressed? It also has 360 MB of on-chip cache and I/O and AI accelerators. A mainframe might use 32 of these chips, by the way.\n[Clamchowder] explains in the post how the cache has a unique architecture. There are actually ten 36 MB L2 caches on the chip. There are eight caches, one for each core, plus one for the I/O accelerator, and another one that is uncommitted.\nA typical CPU will have a shared L3 cache, but with so much L2 cache, IBM went a different direction. As [Clamchowder] explains, the chip reuses the L2 capacity to form a virtual L3 cache. Each cache has a saturation metric and when one cache gets full, some of its data goes to a less saturated cache block.\nRemember the uncommitted cache block? It always has the lowest saturation metric so, typically, unless the same data happens to be in another cache, it gets moved to the spare block.\nTheres more to it than that  read the original post for more details. Youll even read speculation about how IBM managed a virtual L4 cache, across CPUs.\nCache has been a security bane lately on desktop CPUs. But done right, it is good for performance."}