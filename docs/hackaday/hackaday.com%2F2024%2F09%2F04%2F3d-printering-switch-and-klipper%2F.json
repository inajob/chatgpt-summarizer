{"pubDate": "2024-09-04T14:00:52", "original_title": "3D Printering: Switch and Klip(per)", "link": "https://hackaday.com/2024/09/04/3d-printering-switch-and-klipper/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/02/3D-Printering-Header-New.jpg", "original_content": "Last time I tried to convince you that, if you havent already, you should try running your 3D printer with Klipper. There are several ways to actually make it work.\nThe first thing you need is something to run the Klipper host. Most people use a Raspberry Pi and if you already have one that runs OctoPrint, for example, you might well use it. Just tuck your SD card away in case you give up and install a fresh Linux system on a new card.\nThe Creality Sonic Pad has issues, but it does work.\nHowever, a Pi isnt your only option. You should be able to make it work on nearly anything that runs Linux. Weve even seen it running on Windows under WSL. If you have an old laptop that can run Linux, that would work, too. Weve even heard it works on a Chromebook.\nThe other option is to get a pad. Several vendors make touchscreens with some Linux single-board computer bundled together with Klipper preinstalled. For example, there is the Creality Sonic Pad, along with similar devices from other 3D printing companies.\nIf you decide to go that route, you might want to make sure it is easy to install your own software easily. Some pads, like the Creality unit, are notorious for having so much customization that they dont lend themselves to upgrades unless they come from the manufacturer. In some cases, you can wipe out the stock firmware and install a normal operating system, but at that point, you could probably just buy a Pi and a touchscreen, right?\n\nInstallation\nIf you use something like a pad, it probably has a menu option to provide prebuilt firmware for your printer. Typically, you let it save the code to an SD card or a USB stick and then you are expected to flash it to your printer which, of course, depends on what kind of printer you have.\nIf you are rolling your own, you use a menu configuration program something like building a Linux kernel. If you have a pre-built configuration file, it will probably tell you in its comments what things you should pick. You need to know, for example, the type of CPU your board has, the bootloader offset, and if you are connecting via USB or serial. You can find details on the Klipper project pages.\nKIAUH makes installing Klipper and supporting programs painless.\nInstalling the Linux side is easy because there is a nice script called KIHUH. The easiest thing to do is clone the Git repository and run it. From there, you can install Klipper, Moonraker, Fluidd, Mainsail, and some other things, too.\nThe real trick isnt installing the software. The challenge is creating a proper configuration file for your printer. If you have a totally stock and popular printer, youll probably be in luck. But, how many of us can say that?\nStart with the GitHub list to see if your printer or board is there. Even if it isnt an exact match for your hardware, it will give you a start. For example, my custom printer is a Fysetc Spider, but the canned configuration is for a core XY machine, which means I have to make changes.\nEven if you get a pad that claims to be plug and play, dont count on it. For example, a Creality Sonic Pads instructions for installing with a Creality Ender 3 first asks you to take the printer apart to determine the type of motherboard you have. Thats not really plug and play! Any deviation from the stock machine is likely to require you to change the default profile.\nChChChChanges\nIn addition to just setting things up to match my exact hardware, I also needed to adjust the extruder step count. That has to be simple, right? Most firmware requires you to plug in the number of steps per millimeter of filament.\nKlipper, on the other hand, wants to know how many millimeters extrude from a full rotation of the stepper. If you know how many steps (and microsteps) your printer uses, you can easily calculate either number from the other. For example, if you have 200 steps per rotation and 16 microsteps, thats 3200 steps total. If your current steps per millimeter is 100, then your Klipper rotation distance is 3200/100=32.\nConfiguration Example\nI had another major change to make. My printers have a non-standard filament sensor that detects the filament moving. That way, it can detect not only broken filaments but jammed filaments, too.\nTo install it, I had to add a few lines to my printer.cfg file and restart Klipper. Since I have more than one printer with the same sensor, I put all the lines in a single file and then included it in each printer. So the printer.cfg change was very simple:\n\ninclude sfs.cfg]\n\nThen the real work is in sfs.cfg:\n\nfilament_motion_sensor SFS_T0]\ndetection_length: 10.00 \nextruder: extruder\nswitch_pin: ^PA4 \npause_on_runout: True \nevent_delay: 3.0\npause_delay: 0.5\nrunout_gcode:\n  M117 Runout Detected!\n\ndelayed_gcode DISABLEFILAMENTSENSOR] \ninitial_duration: 1\ngcode:\n SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0\n\ngcode_macro SFS_ENABLE] ; Add this to PRINT_START\ndescription: Enable smart filament sensor\ngcode:\n  M117 ENABLING the Smart Filament Sensor\n  G92 E0\n  SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1\n\ngcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL\ndescription: Disable smart filament sensor\ngcode:\n  M117 DISABLING the Smart Filament Sensor\n  G92 E0\n  SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0\n\n\nThis defines a few macros you can use elsewhere. Like Python, the indentation matters. You can organize your files using [include], and thats especially useful if you have multiple printers that can share files.\nReference\nSo, how do you know whats available? The Klipper reference. It will show you all the configuration sections you can use and what can possibly go in them. Dont forget that some features  like print status notifications  will be in the Moonraker configuration which is a separate document.\nSince the system is in Python, you can hack on it to your hearts content. Just back up first. For example, you can add some custom Python scripts in the klipper/extras directory, like the one that can run arbitrary system commands from G-code.\nTinkering is what most of us like the best, and theres plenty of opportunity to tinker with here. Klipper is also a good way to put new life in a very old printer since what runs on the printer is very simple, and all the heavy lifting is done elsewhere.\nKlipper can easily do adaptive bed leveling, for example. If you can work in Python, it is also easy to experiment with things like exotic sensors.", "title": "\u30af\u30ea\u30c3\u30d1\u30fc\u3092\u4f7f\u3063\u305f3D\u30d7\u30ea\u30f3\u30bf\u306e\u8a2d\u5b9a\u65b9\u6cd5", "body": "3D\u30d7\u30ea\u30f3\u30bf\u30fc\u3092Klipper\u3067\u52d5\u304b\u3059\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3002Raspberry Pi\u306a\u3069\u3067Klipper\u3092\u52d5\u304b\u3059\u65b9\u6cd5\u3084\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8abf\u6574\u306a\u3069\u8a73\u3057\u304f\u8aac\u660e\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\u3084\u3001Klipper\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u63d0\u4f9b\u3055\u308c\u308b\u69cb\u6210\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u3082\u8a00\u53ca\u3002", "titles": ["\u30af\u30ea\u30c3\u30d1\u30fc\u3092\u4f7f\u3063\u305f3D\u30d7\u30ea\u30f3\u30bf\u306e\u8a2d\u5b9a\u65b9\u6cd5", "\u30e9\u30ba\u30d9\u30ea\u30fc\u30d1\u30a4\u4ee5\u5916\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8003\u3048\u308b", "\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u8a2d\u5b9a\u65b9\u6cd5", "\u30af\u30ea\u30c3\u30d1\u30fc\u3092\u4f7f\u3063\u305f\u30d7\u30ea\u30f3\u30bf\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5", "\u30af\u30ea\u30c3\u30d1\u30fc\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3068\u62e1\u5f35\u6027"]}