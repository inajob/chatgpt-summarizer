{"pubDate": "2025-05-25T11:00:00", "original_title": "A Quick Introduction to TCP Congestion Control", "link": "https://hackaday.com/2025/05/25/a-quick-introduction-to-tcp-congestion-control/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/05/congestion_management.png", "youtube": "https://www.youtube.com/watch?v=yiH1wLyeS5g", "original_content": "\nIt\u2019s hard to imagine now, but in the mid-1980s, the Internet came close to collapsing due to the number of users congesting its networks. Computers would request packets as quickly as they could, and when a router failed to process a packet in time, the transmitting computer would immediately request it again. This tended to result in an unintentional denial-of-service, and was degrading performance significantly. [Navek]s recent video goes over TCP congestion control, the solution to this problem which allows our much larger modern internet to work.In a 1987 paper, Van Jacobson described a method to restrain congestion: in a TCP connection, each side of the exchange estimates how much data it can have in transit (sent, but not yet acknowledged) at any given time. The sender and receiver exchange their estimates, and use the smaller estimate as the congestion window. Every time a packet is successfully delivered across the connection, the size of the window doubles.\nOnce packets start dropping, the sender and receiver divide the size of the window, then slowly and linearly ramp up the size of the window until it again starts dropping packets. This is called additive increase/multiplicative decrease, and the overall result is that the size of the window hovers somewhere around the limit. Any time congestion starts to occur, the computers back off. One way to visualize this is to look at a graph of download speed: the process of periodically hitting and cutting back from the congestion limit tends to create a sawtooth wave.[Navek] notes that this algorithm has rather harsh behavior, and that there are new algorithms that both recover faster from hitting the congestion limit and take longer to reach it. The overall concept, though, remains in widespread use. If you\u2019re interested in reading more, we\u2019ve previously covered network congestion control in more detail. We\u2019ve also covered [Navek]\u2019s previous video on IPV5.\n\nThanks to [Mahdi Naghavi] for the tip!", "title": "- TCP\u8f3b\u8f33\u5236\u5fa1\u306e\u6b74\u53f2\u3068\u305d\u306e\u91cd\u8981\u6027", "body": "1980\u5e74\u4ee3\u534a\u3070\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u6025\u5897\u3067\u6df7\u96d1\u3057\u305d\u3046\u3060\u3063\u305f\u3002TCP\u306e\u6df7\u96d1\u5236\u5fa1\u304c\u89e3\u6c7a\u7b56\u3067\u3001\u30c7\u30fc\u30bf\u8ee2\u9001\u3092\u7ba1\u7406\u3059\u308b\u3002", "titles": ["- TCP\u8f3b\u8f33\u5236\u5fa1\u306e\u6b74\u53f2\u3068\u305d\u306e\u91cd\u8981\u6027", "- \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8f3b\u8f33\u554f\u984c\u3068\u89e3\u6c7a\u7b56", "- \u300c\u52a0\u7b97\u7684\u5897\u52a0/\u4e57\u7b97\u7684\u6e1b\u5c11\u300d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4ed5\u7d44\u307f", "- 1980\u5e74\u4ee3\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u6df7\u96d1\u72b6\u614b\u3068\u306f\uff1f", "- \u6700\u65b0\u306e\u8f3b\u8f33\u5236\u5fa1\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9032\u5316\u306b\u3064\u3044\u3066"]}