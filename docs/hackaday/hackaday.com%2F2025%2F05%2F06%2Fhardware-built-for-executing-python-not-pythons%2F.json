{"pubDate": "2025-05-06T08:00:53", "original_title": "Hardware Built For Executing Python (Not Pythons)", "link": "https://hackaday.com/2025/05/06/hardware-built-for-executing-python-not-pythons/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/Screenshot-2025-05-01-114025-e1746063734236.png", "original_content": "Lots of microcontrollers will accept Python these days, with CircuitPython and MicroPython becoming ever more popular in recent years. However, theres now a new player in town. Enter PyXL, a project to run Python directly in hardware for maximum speed.\nWhats the deal with PyXL? Its actual Python executed in silicon, notes the project site. A custom toolchain compiles a .py file into CPython ByteCode, translates it to a custom assembly, and produces a binary that runs on a pipelined processor built from scratch. Currently, there isnt a hard silicon version of PyXL  no surprise given what it costs to make a chip from scratch. For now, it exists as logic running on a Zynq-7000 FPGA on a Arty-Z7-20 devboard. Theres an ARM CPU helping out with setup and memory tasks for now, but the Python code is executed entirely in dedicated hardware.\nThe headline feature of PyXL is speed. A comparison video demonstrates this with a measurement of GPIO latency. In this test, the PyXL runs at 100 MHz, achieving a round-trip latency of 480 nanoseconds. This is compared to MicroPython running on a PyBoard at 168 MHz, which achieves a much slower 15,000 nanoseconds by comparison. The project site claims PyXL can be 30x faster than MicroPython based on this result, or 50x faster when normalized for the clock speed differences.\nPython has never been the most real-time of languages, but efforts like this attempt to push it this way. The aim is that it may finally be possible to write performance-critical code in Python from the outset. Weve taken a look at Python in the embedded world before, too, albeit in very different contexts.\n\n"}