{"pubDate": "2024-03-24T11:00:06", "original_title": "Obfuscated C 8080 Emulator Ported", "link": "https://hackaday.com/2024/03/24/obfuscated-c-8080-emulator-ported/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/03/ioccc.png", "original_content": "[Oscar] is no stranger to writing hard-to-read C code. While most of us do that by accident, there are those who strive to write the most unreadable code and enter it in the IOCCC  the International Obfuscated C Code Contest. One of his winning entries was a single C function that emulates an 8080. With a few support files, the plucky little emulator will run CP/M.\nThe emulator won best in show, but that was in 2006. Things have changed a bit and [Oscar] has updated the code so that you can continue to try it if you want to give yourself a headache reading code. The portability isnt a CPU issue  modern CPUs will happily run code from 2006. The problem is the compiler and operating system. Compilers are much stricter these days, and Linux needs a little extra coaxing to give access to the input stream the way the faux computer needs it.\n\nIf you want to puzzle out the code, dont read any further. Spoilers ahead! The code has an array of 64K representing all the memory an 8080 can use without some bank-switching scheme. After that, a loop simply has to read the array, determine the opcode, and perform the operation. The registers are in the o array. Why o? Well, it is supposed to be obfuscated, remember?\nThe emulator needs two binary files: one containing a stripped-down BIOS system and the other\u00a0 Tiny Basic. Alternatively, you can download a file that will run CP/M, including Wordstar.\nIf you prefer running on real hardware, slip one of these in your pocket. If obfuscation isnt your thing, run CP/M on nearly anything with more readable code."}