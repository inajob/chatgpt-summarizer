{"pubDate": "2025-04-13T08:00:29", "original_title": "Learning Linux Kernel Modules Using COM Binary Support", "link": "https://hackaday.com/2025/04/13/learning-linux-kernel-modules-using-com-binary-support/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/cartoon2.jpg", "original_content": "Have you ever felt the urge to make your own private binary format for use in Linux? Perhaps you have looked at creating the smallest possible binary when compiling a project, and felt disgusted with how bloated the ELF format is? If you are like [Brian Raiter], then this has led you down many rabbit holes, with the conclusion being that flat binary formats are the way to go if you want sleek, streamlined binaries. These are formats like COM, which many know from MS-DOS, but which was already around in the CP/M days. Here flat means that the entire binary is loaded into RAM without any fuss or foreplay.\nAlthough Linux does not (yet) support this binary format, the good news is that you can learn how to write kernel modules by implementing COM support for the Linux kernel. In the article [Brian] takes us down this COM rabbit hole, which involves setting up a kernel module development environment and exploring how to implement a binary file format. This leads us past familiar paths for those who have looked at e.g. how the Linux kernel handles the shebang (#!) and misc formats.\nOn Windows, the kernel identifies the COM file by its extension, after which it gives it 640 kB  an interrupt table to play with. The kernel module does pretty much the same, which still involves a lot of code.\nOf course, this particular rabbit hole wasnt deep enough yet, so the COM format was extended into the .\u265a (Unicode U+265A) format, because this is 2025 and we have to use all those Unicode glyphs for something. This format extension allows for amazing things like automatically exiting after finishing execution (like crashing).\nAt the end of all these efforts we have not only learned how to write kernel modules and add new binary file formats to Linux, we have also learned to embrace the freedom of accepting the richness of the Unicode glyph space, rather than remain confined by ASCII. All of which is perfectly fine.\nTop image: Illustration of [Brian Raiter] surveying the fruits of his labor by [Bomberanian]"}