{"pubDate": "2024-07-07T14:00:20", "original_title": "Custom Microcode Compiler, Made in Google Sheets", "link": "https://hackaday.com/2024/07/07/custom-microcode-compiler-made-in-google-sheets/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/microcode.png", "original_content": "When homebrewing a CPU, one has to deal with microcode. Microcode is the low-level nuts and bolts of how, precisely, a CPU executes instructions (like opcodes) and performs functions such as updating the cycle counter or handling interrupt requests. To make this task easier, [Bob Alexander] created a microcode compiler built in Google Sheets to help with his own homebrew work, but its flexible and configurable enough to be useful to others, as well.\nA CPUs microcode usually lives in read-only memory, and writing the microcode is only one step in the journey. [Bob]s tool compiles his microcode into files that can be burned into memory (multiple EEPROM chips, in [Bob]s case) or used as a Verilog program in the case of implementing the CPU in an FPGA. Its configurable enough to be adapted for other homebrew CPU projects, though one would of course have to re-write the microcode portion.\nA read-only version of the spreadsheet makes for some fun browsing, and if it piques your interest enough to get a copy of your own complete with the compiler script, you can do that here. It uses Google Sheets, and writes the output files into ones Google Drive.\nThis kind of low-level project really highlights the finer points of just how the hard work of digital computing gets done. A good example is the Gigatron which implemented a RISC CPU using only microcode, memory, and logic gates in the late 70s. Weve even seen custom microcode used to aid complex debugging.", "title": "Google Sheets\u3092\u4f7f\u7528\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u81ea\u4f5c", "body": "\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u306fCPU\u304c\u547d\u4ee4\u3092\u5b9f\u884c\u3057\u6a5f\u80fd\u3092\u51e6\u7406\u3059\u308b\u969b\u306e\u91cd\u8981\u306a\u5f79\u5272\u3092\u62c5\u3046\u3002Bob Alexander\u304cGoogle Sheets\u3067\u69cb\u7bc9\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u81ea\u4f5cCPU\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5f79\u7acb\u3064\u3002\u8ab0\u3067\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3001\u4ed6\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3082\u9069\u5fdc\u53ef\u80fd\u3002", "titles": ["Google Sheets\u3092\u4f7f\u7528\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u81ea\u4f5c", "\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u3092EEPROM\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30c4\u30fc\u30eb", "\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fcCPU\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u305f\u3081\u306e\u67d4\u8edf\u306a\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30e9", "\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u3068\u306f\u4f55\u304b\uff1f\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fcCPU\u88fd\u4f5c\u306e\u57fa\u790e", "\u30c7\u30b8\u30bf\u30eb\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u539f\u70b9\u306b\u8feb\u308b\uff1a\u30de\u30a4\u30af\u30ed\u30b3\u30fc\u30c9\u306e\u91cd\u8981\u6027"]}