{"pubDate": "2025-06-23T17:00:03", "original_title": "Video Game Preservation Through Decompilation", "link": "https://hackaday.com/2025/06/23/video-game-preservation-through-decompilation/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/10/Graphics.jpg", "original_content": "Unlike computer games, which smoothly and continuously evolved along with the hardware that powered them, console games have up until very recently been constrained by a generational style of development. Sure there were games that appeared on multiple platforms, and eventually newer consoles would feature backwards compatibility that allowed them to play select titles from previous generations of hardware. But in many cases, some of the best games ever made were stuck on the console they were designed for.\nNow, for those following along as this happened, it wasnt such a big deal. For gamers, it was simply a given that their favorite games from the Super Nintendo Entertainment System (SNES) wouldnt play on the Nintendo 64, any more than their Genesis games could run on their Sony PlayStation. As such, it wasnt uncommon to see several game consoles clustered under the family TV. If you wanted to go back and play those older titles, all you had to do was switch video inputs.\nBut gaming, and indeed the entertainment world in general, has changed vastly over the last couple of decades. Telling somebody today that the only way they can experience The Legend of Zelda: A Link to the Past is by dragging out some yellowed thirty-odd year old console from the attic is like telling them the only way they can see a movie is by going to the theater.\nThese days, the expectation is that entertainment comes to you, not the other way around  and its an assumption thats unlikely to change as technology marches on. Just like our TV shows and movies now appear on whatever device is convenient to us at the time, modern gamers dont want to be limited to their consoles, they also want to play games on their phones and VR headsets.\nBut that leaves us with a bit of a problem. There are some games which are too significant, either technically or culturally, to just leave in the digital dust. Like any other form of art, there are pieces that deserve to be preserved for future generations to see and experience.\nFor the select few games that are deemed worth the effort, decompilation promises to offer a sort of digital immortality. As several recent projects have shown, breaking a game down to its original source code can allow it to adapt to new systems and technologies for as long as the community wishes to keep them updated.\n\nEmulation For Most, But Not All\nBefore we get into the subject of decompilation, we must first address a concept that many readers are likely familiar with already: emulation.\nUsing a console emulator to play an old game is not entirely unlike running an operating system through a virtual machine, except in the case of the console emulator, theres the added complication of having to replicate the unique hardware environment that a given game was designed to run on. Given a modern computer, this usually isnt a problem when it comes to the early consoles. But as you work your way through the console generations, the computational power required to emulate their unique hardware architectures rapidly increases.\nNintendo put emulation to work with their Mini consoles.\nThe situation is often complicated by the fact that some games were painstakingly optimized for their respective console, often making use of little-documented quirks of the hardware. Emulators often employ title-specific routines to try and make these games playable, but they arent always 100% successful. Even on games that arent particularly taxing, the general rule of emulation is to put performance ahead of accuracy.\nTherein lies the key problem with emulation when it comes to preserving games as an artistic medium. While the need for ever-more powerful hardware is a concern, Moores Law will keep that largely in check. The bigger issue is accuracy. Simply running a game is one thing, but to run it exactly how it was meant to run when the developers released it is another story entirely.\nIts fairly common for games to look, sound, and even play slightly differently when under emulation than they did when running on real hardware. In many cases, these issues are barely noticeable for the average player. The occasional sound effect playing out of sync, or a slightly shifted color palette isnt enough to ruin the experience. Other issues, like missing textures or malfunctioning game logic can be bad enough that the game cant be completed. There are even games, few as they may be, that simply dont run at all under emulation.\nMake no mistake, emulation is usually good enough for most games. Indeed, both Nintendo and Sony have used emulation in various capacities to help bring their extensive back catalog of games to newer generations. But the fact remains that there are some games which deserve, and sometimes even require, a more nuanced approach.\nChasing Perfection\nIn comparison, when a game is decompiled to the point that the community has the original C code that it was built from, its possible to avoid many of the issues that come with emulation. The game can be compiled as a native executable for modern platforms, and it can take advantage of all the hardware and software improvements that come with it. Its even possible to fix long-standing bugs, and generally present the game in its best form.\nFor those whove dabbled in reverse engineering, youll know that decompiling a program back into usable C code isnt exactly a walk in the park. While there are automated tools that can help get through a lot of the work, theres still plenty of human intervention required. Even then, the original code for the game would have been written to take advantage of the original consoles unique hardware, so youll need to either patch your way around that or develop some kind of compatibility layer to map various calls over to something more modern and platform-agnostic. Its a process that can easily take years to complete.\nBecause of this, decompilation efforts tend to be limited to the most critically acclaimed titles. For example, in 2021 we saw the first efforts to fully reverse The Legend of Zelda: Ocarina of Time. Released in 1998 on the N64, its often hailed as one of the greatest video games ever made. Although the effort started with Ocarina, by 2024, the lessons learned during that project led to the development of tools which can help decompile and reconstruct other N64 games.\nGames as Living Documents\nFor the most part, an emulated game works the same way it did when it was first released. Of course, the emulator has full control over the virtual environment that the game is running in, so there are a few tricks it can pull. As such, additional features such as cheats and save states are common in most emulators. Its even possible to swap out the original graphical assets for higher resolution versions, which can greatly improve the look of some early 3D games.\nBut what if you wanted to take things further? Thats where having the source code makes all the difference. Once youve gotten the game running perfectly, you can create a fork that starts adding in new features and quality of life improvements. As an example, the decompilation for Animal Crossing on the GameCube will allow developers to expand the in-game calendar beyond the year 2030  but its a change that will be implemented in a deluxe fork of the code so as to preserve how the original game functioned.\nAt this point youre beyond preservation, and youve turned the game into something that doesnt just live on, but can actually grow with new generations of players.", "title": "\u53e4\u3044\u30b2\u30fc\u30e0\u3092\u672a\u6765\u306b\u7e4b\u3050\uff1a\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u91cd\u8981\u6027", "body": "\u30b2\u30fc\u30e0\u306e\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u4fbf\u5229\u3060\u304c\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u518d\u73fe\u306b\u306f\u9650\u754c\u304c\u3042\u308b\u3002\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308c\u3070\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f7f\u3044\u65b0\u305f\u306a\u6539\u826f\u3084\u62e1\u5f35\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002", "titles": ["\u53e4\u3044\u30b2\u30fc\u30e0\u3092\u672a\u6765\u306b\u7e4b\u3050\uff1a\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u91cd\u8981\u6027", "\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u9055\u3044\uff1a\u30b2\u30fc\u30e0\u4fdd\u5b58\u306e\u65b0\u305f\u306a\u30a2\u30d7\u30ed\u30fc\u30c1", "\u30b2\u30fc\u30e0\u306e\u6587\u5316\u7684\u4fa1\u5024\u3092\u5b88\u308b\uff1a\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u3088\u308b\u30c7\u30b8\u30bf\u30eb\u4e0d\u673d", "\u30b2\u30fc\u30e0\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7814\u7a76\uff1a\u6280\u8853\u3092\u6d3b\u7528\u3057\u305f\u30b3\u30f3\u30bd\u30fc\u30eb\u306e\u9032\u5316", "\u30aa\u30ea\u30b8\u30ca\u30eb\u4f53\u9a13\u306e\u518d\u73fe\uff1a\u30c7\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3082\u305f\u3089\u3059\u65b0\u3057\u3044\u53ef\u80fd\u6027"]}