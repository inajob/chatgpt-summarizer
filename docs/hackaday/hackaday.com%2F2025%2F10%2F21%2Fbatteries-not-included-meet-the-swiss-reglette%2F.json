{"pubDate": "2025-10-21T23:00:43", "original_title": "Batteries Not Included: Meet the Swiss R\u00e9glette!", "link": "https://hackaday.com/2025/10/21/batteries-not-included-meet-the-swiss-reglette/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/Cryptographic_sliding_rule-IMG_0533-featured.png", "youtube": "https://www.youtube.com/watch?v=jvrUCylwGaU", "original_content": "Over on YouTube, [The Modern Rogue] created an interesting video showing a slide-rule-like encryption device called the R\u00e9glette. This was a hardware implementation of a Vigen\u00e8re-like Cipher, technically referred to as a manual polyalphabetic substitution cipher. The device requires no batteries, is fully waterproof, daylight readable and easy to pack, making it really useful if you find yourself in a muddy trench in the middle of winter during a world war. Obviously, because its a slide rule.\nAnyway, so how does this cipher work? Well, the polyalphabetic bit infers the need for a key phrase, which is indeed the first thing all parties need to agree upon. Secondly, a number is required as a reference point. As you can see from the video, the sliding part of the device has letters of the alphabet, as well as numbers and a special symbol. The body has two series of numbers, with the same spacing as the central, sliding part. A second copy of the sliding part is also needed to slide in behind the first unit. This second copy is neatly stowed below the body during storage.\nWith each message letter, you lookup the corresponding cipher text number, then shift the slider to the next key phrase letter.\nThe cipher works by first aligning the starting letter of the (variable-length) key phrase with the reference number. Next, encode the first symbol from the cleartext message (the thing you want to encrypt). You simply look up the letter on the slide and read off either of the numbers next to it. Randomly selecting the left or right set adds an extra bit of strength to the code due to increased\u00a0entropy. The number is the first symbol for your ciphertext (the thing you want to transmit to the receiver). Next, you move on to the next symbol in the cleartext message. Align the following letter of the key phrase with the reference number, look up the corresponding letter in the message, and transmit the following number onwards. When you run out of key phrase letters, you loop back to the start, and the cycle repeats.\nThe special symbol we mentioned earlier is not really a blank; it is a control symbol used to retransmit a new reference number with the existing setup. To change the reference number, the blank character is encoded and sent, followed by the latest reference number. When the blank symbol is received at the other end, the following code is used as the reference number, and the key phrase position is reset to point back to the first letter, restarting the cycle anew. Simple, yes. Effective? Well, not really by modern standards, but at the time of limited computing power (i.e. pen and paper, perhaps a mechanical calculator at best), it would have been sufficient for some uses for a couple of decades.\nWhy is this Vigen\u00e8re-like? Well, an actual Vigen\u00e8re cipher maps letters to other letters, but the R\u00e9glette uses numbers, randomly selected, adding entropy, as well as the control code to allow changing the cypher parameter mid-message. This makes it harder to attack; the original Vigen\u00e8re was considered first-rate cryptography for centuries.\nIf youd like to play along at home and learn some other simple ciphers, check this out. Kings and Queens of old frequently used cryptography, including the famous Queen Mary of Scots. Of course, we simply cant close out an article on cryptography without mentioning the Enigma machine. Heres one built out of Mechano!\n\n\nThanks to [Stephen] for the tip!", "title": "- \u624b\u4f5c\u308a\u306e\u6697\u53f7\u88c5\u7f6e\u300c\u30ec\u30b8\u30a7\u30c3\u30c8\u300d\u306e\u9b45\u529b", "body": "YouTube\u306e[The Modern Rogue]\u304c\u3001\u6ed1\u5c3a\u306e\u3088\u3046\u306a\u6697\u53f7\u88c5\u7f6e\u300cR\u00e9glette\u300d\u3092\u7d39\u4ecb\u3002\u30d0\u30c3\u30c6\u30ea\u30fc\u4e0d\u8981\u3067\u3001\u8010\u6c34\u6027\u3084\u6301\u3061\u904b\u3073\u306e\u5229\u4fbf\u6027\u304c\u3042\u308b\u3002", "titles": ["- \u624b\u4f5c\u308a\u306e\u6697\u53f7\u88c5\u7f6e\u300c\u30ec\u30b8\u30a7\u30c3\u30c8\u300d\u306e\u9b45\u529b", "- \u30d0\u30c3\u30c6\u30ea\u30fc\u306a\u3057\u3067\u4f7f\u3048\u308b\uff01\u30ec\u30b8\u30a7\u30c3\u30c8\u306e\u4f7f\u3044\u65b9", "- \u30e6\u30cb\u30fc\u30af\u306a\u624b\u52d5\u591a\u5143\u7f6e\u63db\u6697\u53f7\u306e\u4ed5\u7d44\u307f", "- \u6697\u53f7\u5316\u306e\u6b74\u53f2\u3092\u63a2\u308b\uff1a\u30ec\u30b8\u30a7\u30c3\u30c8\u3068\u30f4\u30a3\u30b8\u30a7\u30cd\u30fc\u30eb\u6697\u53f7", "- \u7c21\u5358\u306b\u8a66\u305b\u308b\uff01\u5bb6\u3067\u3067\u304d\u308b\u6697\u53f7\u6280\u8853\u306e\u7d39\u4ecb"]}