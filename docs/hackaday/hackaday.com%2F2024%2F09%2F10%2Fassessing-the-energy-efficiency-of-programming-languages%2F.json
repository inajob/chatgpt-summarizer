{"pubDate": "2024-09-10T17:00:11", "original_title": "Assessing the Energy Efficiency of Programming Languages", "link": "https://hackaday.com/2024/09/10/assessing-the-energy-efficiency-of-programming-languages/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2021/11/language_efficiency_banner_had.jpg", "youtube": "https://www.youtube.com/watch?v=U4c6nFGt1iM", "original_content": "Programming languages are generally defined as a more human-friendly way to program computers than using raw machine code. Within the realm of these languages there is a wide range of how close the programmer is allowed to get to the bare metal, which ultimately can affect the performance and efficiency of the application. One metric that has become more important over the years is that of energy efficiency, as datacenters keep growing along with their power demand. If picking one programming language over another saves even 1% of a datacenters electricity consumption, this could prove to be highly beneficial, assuming it weighs up against all other factors one would consider.\nThere have been some attempts over the years to put a number on the energy efficiency of specific programming languages, with a paper by Rui Pereira et al. from 2021 (preprint PDF) as published in Science of Computer Programming covering the running a couple of small benchmarks, measuring system power consumption and drawing conclusions based on this. When Hackaday covered the 2017 paper at the time, it was with the expected claim that C is the most efficient programming language, while of course scripting languages like JavaScript, Python and Lua trailed far behind.\nWith C being effectively high-level assembly code this is probably no surprise, but languages such as C++ and Ada should see no severe performance penalty over C due to their design, which is the part where this particular study begins to fall apart. So what is the truth and can we even capture efficiency in a simple ranking?\n\nDefining Energy Efficiency\nAt its core, energy efficiency is pretty simple to define: its the total amount of energy required to accomplish a specific task. In the case of a software application, this means the whole-system power usage, including memory, disk and processor(s). Measuring the whole-system power usage is also highly relevant, as not every programming and scripting language taxes these subsystems in the same way. In the case of Java, for example, its CPU usage isnt that dissimilar from the same code written in C, but it will use significantly more memory in the process of doing so.\nTwo major confounding factors when it comes to individual languages are:\n\nIdiomatic styles versus a focus on raw efficiency.\nNative language features versus standard library features.\n\nThe idiomatic style factor is effectively some kind of agreed-upon language usage, which potentially eschews more efficient ways of accomplishing the exact same thing. Consider here for example C++, and the use of smart pointers versus raw pointers, with the former being part of the Standard Template Library (STL) instead of a native language feature. Some would argue that using an STL smart pointer like a unique_ptr or auto_ptr is the idiomatic way to use C++, rather than the native language support for raw pointers, despite the overhead that these add.\nA similar example is also due to C++ being literally just an extension to C, namely that of printf() and similar functions found in the cstdio standard library header. The idiomatic way to use C++ is to use the stream-based functions found in the iostream header, so that instead of employing low-level functions like putc() and straightforward formatted output functions like printf() to write this:\nprintf(\"Printing %d numbers and this string: %s.\\n\", number, string);\nThe idiomatic stream equivalent is:\nstd::cout  \"Printing \"  number  \" numbers and this string: \"  string  \".\"  std::endl;\nNot only is the idiomatic version longer, harder to read, more convoluted and easier to get formatting wrong with, it is internally also significantly more complicated than a simple parse-and-replace and thus causes more overhead. This is why C++20 decided to double-down on stream formatting and fudging in printf-like support with std::format and other functions in the new format header. Because things can always get worse.\nKnow What Youre Measuring\nAt this point we have defined what energy efficiency with programming languages is, and touched upon a few confounding factors. All of this leads to the golden rule in science: know what youre measuring. Or in less fanciful phrasing: garbage in, garbage out, as conclusions drawn from data using flawed assumptions truly are a complete waste of anyones time. Whether it was deliberate, due to wishful thinking or a flawed experimental setup, the end result is the same: a meticulously crafted document that can go straight into the shredder.\nIn this particular comparative analysis, the pertinent question is whether the used code is truly equivalent, as looking across the papers by Rui et al. (2017, 2021), Gordillo et al. (2024) or even a 2000 paper by Lutz Prechelt all reveal stark differences between the results, with seemingly the only constant being that C is pretty good, while a language such as C++ ends up being either very close to C (Gordillo et al., Prechelt) or wildly varying in tests (Rui et al.), all pointing towards an issue with the code being used, as power usage measurement and time measurement is significantly more straightforward to verify.\nIn the case of the 2021 paper by Rui et al., the code examples used come from Rosetta Code, with the code-as-used also provided on GitHub. Taking as example the Hailstone Sequence, we can see a number of fascinating differences between the C, C++ and Ada versions, particularly as it pertains to the use of console output and standard library versus native language features.\nThe C version of the Hailstone Sequence has two printf() statements, while the C++ version has no fewer than five instances of std::cout. The Ada version comes in at two put(), two new_line (which should be merged with put_line) and one put_line. This difference in console output is already a red flag, even considering that when benchmarking you should never have console output enabled as this draws in significant parts of the operating system, with resulting high levels of variability due to task scheduling, etc.\nThe next red flag is that while the Ada and C versions uses the native array type, the C++ version uses std::vector, which is absolutely not equivalent to an array and should not be used if efficiency is at all a concern due to the internal copying and house-keeping performed by the std::vector data structure.\nIf we consider that Rosetta Code is a communal wiki that does not guarantee that the code snippets provided are absolutely equivalent, that means that the resulting paper by Rui et al. is barely worth the trip to the shredder and consequently a total waste of a tree.\nNot All Bad\nNone of this should come as a surprise, of course, as it is well-known (or should be) that C++ produces the exact same code as C\u00a0unless you use specific constructs like RTTI or the horror show that is C++ exceptions. Similarly, Ada code with similar semantics as C code should not show significant performance differences. The problem with many of the programming language efficiency studies is simply that they take a purported authoritative source of code without being fluent in the chosen languages, run them in a controlled environment and then draw conclusions based on the mangled garbage that comes out at the end.\nThat said, there are some conclusions that can be drawn from the fancy-but-horrifically-flawed tables, such as how comically inefficient scripting languages like Python are. This was also the take-away by Bryan Lunduke in a recent video when he noted that Python is 71 times slower and uses 75 times more energy based on the Rui et al. paper. Even if its not exactly 71 times slower, Python is without question a total snail even among scripting languages, where it trades blows with Perl, PHP and Ruby at the bottom of every ranking.\nThe take-away here is thus perhaps that rather than believing anything you see on the internet (or read in scientific papers), it pays to keep an open mind and run your own benchmarks. As eating your own dogfood is crucial in engineering, I can point to my own remote-procedure call (NymphRPC) library in C++ on which I performed a range of optimizations to reduce overhead. This mostly involved getting rid of std::string and moving to a zero-copy system involving C-isms like memcpy and every bit of raw pointer arithmetic and bit-wise operators goodness that is available.\nThe result for NymphRPC was a four-fold increase in performance, which is probably a good indication of how much performance you can gain if you stick close to C-style semantics. It also makes it obvious how limited these small code snippets are, as with a real application you also deal with cache access, memory alignment and cache eviction issues, all of which can turn a seemingly efficient approach into a sluggish affair.", "title": "\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u306e\u8a55\u4fa1\u306b\u3064\u3044\u3066", "body": "\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u305f\u3081\u306e\u3001\u6a5f\u68b0\u8a9e\u3088\u308a\u3082\u4eba\u9593\u306b\u3068\u3063\u3066\u4f7f\u3044\u3084\u3059\u3044\u65b9\u6cd5\u3068\u3055\u308c\u308b\u3002\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u6027\u3092\u5b9a\u7fa9\u3057\u3001C++\u3084Python\u306e\u6027\u80fd\u5dee\u3092\u793a\u3059\u3082\u306e\u3082\u3042\u308b\u304c\u3001\u7d50\u8ad6\u306b\u6b20\u9665\u304c\u3042\u308b\u53ef\u80fd\u6027\u3082\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\u3002", "titles": ["\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u306e\u8a55\u4fa1\u306b\u3064\u3044\u3066", "C\u8a00\u8a9e\u306e\u52b9\u7387\u6027\u3068\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u306e\u6bd4\u8f03", "\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8981\u56e0", "\u65b0\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306b\u304a\u3051\u308b\u52b9\u7387\u6027\u306e\u91cd\u8981\u6027", "\u504f\u3063\u305f\u30c7\u30fc\u30bf\u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u52b9\u7387\u6027\u8a55\u4fa1\u306e\u8ab2\u984c"]}