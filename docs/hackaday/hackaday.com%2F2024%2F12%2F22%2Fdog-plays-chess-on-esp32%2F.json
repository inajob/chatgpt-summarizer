{"pubDate": "2024-12-22T12:00:16", "original_title": "Dog Plays Chess on ESP32", "link": "https://hackaday.com/2024/12/22/dog-plays-chess-on-esp32/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/12/dog-chess-main.jpg", "original_content": "The ESP32 is s remarkably powerful microcontroller, where its dual-core processor and relatively high clock speed can do some impressive work. But getting this microcontroller designed for embedded systems to do tasks that would generally be given to a much more powerful PC-type computer takes a little bit more willpower. Inspired by his dog, [Folkert] decided to program an ESP32 to play chess, a famously challenging task for computer scientists in the past. He calls this ESP32 chess system Dog.\nOne of the other major limitations of this platform for a task like this is memory. The ESP32 [Folkert] is using only has 320 kB of RAM, so things like the transposition table have to fit in even less space than that. With modern desktop computers often having 32 or 64 GB, this is a fairly significant challenge, especially for a memory-intensive task like a chess engine. But with the engine running on the microcontroller its ready to play, either in text mode or with something that can use the Universal Chess Interface (UCI). A set of LEDs on the board lets the user know whats going on while gameplay is taking place.\n\nThe UCI also enables Dog to play online at lichess.org, and [Folkert] has included a link on the project page where others can play with his microcontroller chess system this way through the Internet. It has a pretty respectable Elo rating at around 2100 as well, so dont think that just because its a small platform that the wins will come easy. If youd prefer your chess engines to run on retro hardware, take a look at this build, which also uses an ESP32 but puts it to work by running old Commodore chess equipment from the 80s. Of course, you can play chess on even less hardware. It has been done.", "title": "- ESP32\u3067\u5b9f\u73fe\u3057\u305f\u72ac\u3092\u30c6\u30fc\u30de\u306b\u3057\u305f\u30c1\u30a7\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u300cDog\u300d", "body": "ESP32\u3067\u30c1\u30a7\u30b9\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cDog\u300d\u304c\u7d39\u4ecb\u3055\u308c\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u5bfe\u5c40\u3082\u53ef\u80fd\u3002", "titles": ["- ESP32\u3067\u5b9f\u73fe\u3057\u305f\u72ac\u3092\u30c6\u30fc\u30de\u306b\u3057\u305f\u30c1\u30a7\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u300cDog\u300d", "- \u9650\u3089\u308c\u305f320 kB\u306eRAM\u3067\u6311\u3080\u30c1\u30a7\u30b9\u30a8\u30f3\u30b8\u30f3\u306e\u6280\u8853\u7684\u8ab2\u984c", "- \u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306b\u3088\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30c1\u30a7\u30b9\u5bfe\u6226\u306e\u697d\u3057\u307f\u65b9", "- ESP32\u306e\u53ef\u80fd\u6027\u3092\u63a2\u308b\uff01\u5c0f\u578b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u30c1\u30a7\u30b9\u30b7\u30b9\u30c6\u30e0\u958b\u767a", "- \u30ec\u30c8\u30ed\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3067\u904a\u3076\u30c1\u30a7\u30b9\uff1aESP32\u306b\u3088\u308b80\u5e74\u4ee3\u98a8\u306e\u4f53\u9a13"]}