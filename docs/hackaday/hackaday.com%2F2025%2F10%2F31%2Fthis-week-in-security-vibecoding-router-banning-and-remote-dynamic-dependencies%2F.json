{"pubDate": "2025-10-31T20:14:43", "original_title": "This Week in Security: Vibecoding, Router Banning, and Remote Dynamic Dependencies", "link": "https://hackaday.com/2025/10/31/this-week-in-security-vibecoding-router-banning-and-remote-dynamic-dependencies/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Vibecoding. What could possible go wrong? Thats what [Kevin Joensen] of Baldur wondered, and to find out he asked Anthropics Sonnet 4.5 to build a secure login with Two Factor Authentication (2FA). And to the LLMs credit, it builds the app as requested. [Kevin] took a peek under the hood to see how well the security was handled, and it wasnt great.\nUp first, the Flask app doesnt have any rate-limiting for guessing that time-based 2FA code. A 6-digit time-based 2FA only works if you cant try all the possibilities before a given code expires. So what does a vibecoder do, once this has been noticed? Ask the LLM to fix it of course. Here we take a slightly different approach, prompting the AI to double-check its work: Is there any security features missing in 2fa verify step? The answer is an impressive:\nGreat question! Yes, there are several critical security features missing from the 2FA verification step. Let me highlight the most important ones: Critical Security Issues1. No Rate Limiting (MOST CRITICAL)\nBut the critical question, can it properly fix its mistake? The AI adds the flask-limiter library and chooses 10 attempts per minute, which is a bit loose, but not unreasonable. Theres still an issue, that those attempts are limited by IP address instead of user login. All it takes to bypass that rate limiting is a pool of IP addresses.\nThis experiment starts to go off the rails, as [Kevin] continues to prompt the LLM to look for more problems in its code, and it begins to hallucinate vulnerabilities, while not fixing the actual problem. LLMs are not up to writing secure code, even with handholding.\nBut surely the problem of LLMs making security mistakes isnt a real-world problem, right? Right? Researchers at Escape did a survey of 5,600 vibecoded web applications, and found 2,000 vulnerabilities. Caveat Vibetor.\nSecure Enclave\nA few weeks ago we talked about Battering RAM and Wiretap  attacks against Trusted Execution Environments (TEEs). These two attacks defeated trusted computing technologies, but were limited to DDR4 memory. Now were back with TEE-fail, a similar attack that works against DDR5 systems.\nThis is your reminder that very few security solutions hold up against a determined attack with physical access. The Intel, AMD, and Nvidia TEE solutions are explicitly ineffective against such physical access. The problem is that no one seemed to be paying attention to that part of the documentation, with companies ranging from Cloudflare to Signal getting this detail wrong in their marketing.\nBanning TP-Link\nNews has broken that the US government is considering banning the sale of new TP-Link network equipment, calling the devices a national security risk.\nI have experience with TP-Link hardware: Years ago I installed dozens of TL-WR841 WiFi routers in small businesses as they upgraded from DSL to cable internet. Even then, I didnt trust the firmware that shipped on these routers, but flashed OpenWRT to each of them before installing. Fun fact, if you go far enough back in time, you can find my emails on the OpenWRT mailing list, testing and even writing OpenWRT support for new TP-Link hardware revisions.\nFrom that experience, I can tell you that TP-Link isnt special. They have terrible firmware just like every other embedded device manufacturer. For a while, you could run arbitrary code on TP-Link devices by putting it inside backticks when naming the WiFi network. It wasnt an intentional backdoor, it was just sloppy code. Im reasonably certain that this observation still holds true. TP-Link isnt malicious, but their products still have security problems. And at this point theyre the largest vendor of cheap networking gear with a Chinese lineage. Put another way, theyre in the spotlight due to their own success.\nThere is one other element thats important to note here. There is still a significant TP-Link engineering force in China, even though TP-Link Systems is a US company. TP-Link may be subject to the reporting requirements of the Network Product Security legislation. Put simply, this law requires that when companies discover vulnerabilities, they must disclose the details to a particular Chinese government agency. It seems likely that this is the primary concern in the minds of US regulators, that threat actors cooperating with the Chinese government are getting advanced notice of these flaws. The proposed ban is still in proposal stage, and no action has been taken on it yet.\nSandbox Escape\nIn March there was an interesting one-click exploit that was launched via phishing links in emails. Researchers at Kaspersky managed to grab a copy of the malware chain, and discovered the Chrome vulnerability used. And it turns out it involves a rather novel problem. Windows has a pair of APIs to get handles for the current thread and process, and they have a performance hack built-in: Instead of returning a full handle, they can return -1 for the current process and -2 for the current thread.\nNow, when sandboxed code tries to use this pseudo handle, Chrome does check for the -1 value, but no other special values, meaning that the sandboxed code can make a call to the local thread handle, which does allow for running code gadgets and running code outside the sandbox. Google has issued a patch for this particular problem, and not long after Firefox was patched for the same issue.\nNPM and Remote Dynamic Dependencies\nIt seems like hardly a week goes by that we arent talking about another NPM problem. This time its a new way to sneak malware onto the repository, in the form of Remote Dynamic Dependencies (RDD). In a way, that term applies to all NPM dependencies, but in this case it refers to dependencies hosted somewhere else on the web. And thats the hook. NPM can review the package, and it doesnt do anything malicious. And when real users start downloading it, those remote packages are dynamically swapped out with their malicious versions by server-side logic.\nInstalling one of these packages ends with a script scooping up all the data it can, and ex-filtrating it to the attackers command and control system. While there isnt an official response from NPM yet, it seems inevitable that NPM packages will be disallowed from using these arbitrary HTTP/HTTPS dependencies. There are some indicators of compromise available from Koi.\nBits and Bytes\nPython deserialization with Pickle has always been a bit scary. Several times weve covered vulnerabilities that have their root in this particular brand of unsafe deserialization. Theres a new approach that just may achieve safer pickle handling, but its a public challenge at this point. It can be thought of as real-time auditing for anything unsafe during deserialization. Its not ready for prime time, but its great to see the out-of-the-box thinking here.\nThis may be the first time Ive seen remote exploit via a 404 page. But in this case, the 404 includes the page requested, and the back-end code that injects that string into the 404 page is vulnerable to XML injection. While it doesnt directly allow for code execution, this approach can result in data leaks and server side request forgeries.\nAnd finally, there was a sketchy leak, that may be information on which mobile devices the Cellebrite toolkit can successfully compromise. The story is that [rogueFed] sneaked into a Teams meeting to listen in and grab screenshots. The real surprise here is that GrapheneOS is more resistant to the Cellebrite toolkit than even the stock firmware on phones like the Pixel 9. This leak should be taken with a sizable grain of salt, but may turn out to be legitimate.", "title": "- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u5b89\u5168\u6027\uff1aLLM\u306b\u3088\u308b2FA\u30a2\u30d7\u30ea\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c", "body": "Kevin\u304cAI\u306b2\u6bb5\u968e\u8a8d\u8a3c\u30a2\u30d7\u30ea\u3092\u4f9d\u983c\u3057\u305f\u304c\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306b\u554f\u984c\u304c\u591a\u304b\u3063\u305f\u3002", "titles": ["- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u5b89\u5168\u6027\uff1aLLM\u306b\u3088\u308b2FA\u30a2\u30d7\u30ea\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u691c\u8a3c", "- TP-Link\u306e\u88fd\u54c1\u304c\u5f15\u304d\u8d77\u3053\u3059\u56fd\u5bb6\u5b89\u5168\u4fdd\u969c\u4e0a\u306e\u61f8\u5ff5", "- \u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u5916\u9003\u907f\u306e\u65b0\u3057\u3044\u8105\u5a01\uff1aChrome\u306e\u8106\u5f31\u6027", "- NPM\u3067\u306e\u30ea\u30e2\u30fc\u30c8\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u4f9d\u5b58\u95a2\u4fc2\u306b\u3088\u308b\u30de\u30eb\u30a6\u30a7\u30a2\u306e\u4fb5\u5165", "- Python\u306e\u30d4\u30af\u30eb\u51e6\u7406\u3067\u306e\u5b89\u5168\u6027\u5411\u4e0a\u3092\u76ee\u6307\u3059\u6311\u6226"]}