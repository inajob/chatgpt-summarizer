{"pubDate": "2025-05-17T08:00:41", "original_title": "Making Sure the Basement Stays Dry with an ESP8266", "link": "https://hackaday.com/2025/05/17/making-sure-the-basement-stays-dry-with-an-esp8266/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/05/basement-monitor.jpg", "original_content": "The hack we have for you today is among our most favorite types of hack: a good, honest, simple, and well documented implementation that meets a real need. Our hacker [Solo Pilot] has sent in a link to their basement monitor.\nThe documentation is quite good. Its terse but comprehensive with links to related information. It covers the background, requirements, hardware design, sensors, email and SMS alerts, software details, and even has some credits at the end.\nImplementing this project would be a good activity for someone who has already made an LED flash and wants to take their skills to the next level by sourcing and assembling the hardware and then configuring, compiling, deploying, and testing the software for this real-world project.\nTo make this project work you will need to know your way around the Arduino IDE in order to build the software from the src.zip file included with the documentation (hint: extract the files from src.zip into a directory called AHT20_BMP280 before opening AHT20_BMP280.ino and make sure you add necessary boards and libraries).\nOne feature of the basement monitor that we would like to see is a periodic everythings okay signal from the device, just so we can confirm that the reason were not getting an alarm about flooding in the basement is because there is no flood, and not because the battery ran dead or the WiFi went offline.\nIf youve recently started on your journey into where electronics meets software a project such as this one is a really great place to go next. And of course once you are proficient with the ESP8266 there are a thousand such projects here at Hackaday that you can cut your teeth on. Such as this clock and this fault injection device.", "title": "\u5730\u4e0b\u5ba4\u30e2\u30cb\u30bf\u30fc\u81ea\u4f5c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u5168\u8c8c", "body": "\u30b7\u30f3\u30d7\u30eb\u3067\u5b9f\u7528\u7684\u306a\u5730\u4e0b\u5ba4\u30e2\u30cb\u30bf\u30fc\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u89e3\u8aac\u3002Arduino IDE\u4f7f\u7528\u3002", "titles": ["\u5730\u4e0b\u5ba4\u30e2\u30cb\u30bf\u30fc\u81ea\u4f5c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u5168\u8c8c", "Arduino IDE\u3092\u6d3b\u7528\u3057\u305f\u96fb\u5b50\u5de5\u4f5c\u306e\u30b9\u30c6\u30c3\u30d7\u30a2\u30c3\u30d7", "\u7c21\u5358\u3067\u52b9\u679c\u7684\u306a\u5730\u4e0b\u5ba4\u76e3\u8996\u30b7\u30b9\u30c6\u30e0\u306e\u5b9f\u88c5", "\u30bb\u30f3\u30b5\u30fc\u3068\u30a2\u30e9\u30fc\u30c8\u6a5f\u80fd\u3092\u5099\u3048\u305f\u30e2\u30cb\u30bf\u30fc\u306e\u8a2d\u8a08", "\u521d\u5fc3\u8005\u5411\u3051\uff01ESP8266\u3092\u7528\u3044\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3059\u3081"]}