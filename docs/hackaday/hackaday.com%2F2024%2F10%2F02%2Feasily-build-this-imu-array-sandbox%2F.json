{"pubDate": "2024-10-02T08:00:36", "original_title": "Easily Build This IMU Array Sandbox", "link": "https://hackaday.com/2024/10/02/easily-build-this-imu-array-sandbox/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/09/hadimg_imu_array_feat.jpg", "original_content": "These days were used to our devices containing an inertial measurement unit (IMU) that lets it know its position relative to the Earth. Theyre mechanical devices at heart, and so theyre not infallible, with a few well-known failure modes  but we can try and help it. One way thats getting some attention is to put many MEMS IMUs on a single PCB, connect it to an FPGA, then process their data all together to make for a more sensitive IMU or filter out drift. Want to join in? Heres an open source implementation from [will127534].\nWith 32 individual ICM-42688-P SPI-connected IMUs and the beloved ICE40 chip at the center of the board, this PCB is a powerful platform to help you jump onto the new direction of the IMU research world. Theres example Verilog code that tests the boards workings, and you can pair it with a Pi Pico running MicroPython to test out its raw capabilities. After that, the stage is yours.\nThe board is cheap to order online, easy to assemble yourself if you must, or have JLCPCB assemble it  just solder some capacitors on the backside afterwards. Theres a breakout, but its mostly for tests. This board is very much designed to be a module in a bigger system, [will] mentions that hes building a geophone. Clever array-based hacks are en vogue, it would feel  heres a LED array from [mitxela] that uses LEDs as sensors.", "title": "\u5730\u7403\u306e\u4f4d\u7f6e\u3092\u628a\u63e1\u3059\u308bIMU\u30c7\u30d0\u30a4\u30b9\u3092\u4f5c\u308d\u3046\uff01", "body": "\u73fe\u5728\u3001\u591a\u304f\u306e\u30c7\u30d0\u30a4\u30b9\u306b\u6163\u6027\u8a08\u6e2c\u88c5\u7f6e\uff08IMU\uff09\u304c\u5185\u8535\u3055\u308c\u3066\u304a\u308a\u3001\u5730\u7403\u306b\u5bfe\u3059\u308b\u4f4d\u7f6e\u3092\u628a\u63e1\u3067\u304d\u308b\u3002MEMS IMU\u3092\u4f7f\u3063\u3066\u3088\u308a\u611f\u5ea6\u306e\u9ad8\u3044IMU\u3092\u4f5c\u308b\u65b9\u6cd5\u304c\u6ce8\u76ee\u3092\u96c6\u3081\u3066\u3044\u308b\u3002ICM-42688-P\u3084ICE40\u30c1\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u305fPCB\u306f\u3001IMU\u7814\u7a76\u306e\u65b0\u3057\u3044\u65b9\u5411\u6027\u3078\u306e\u53c2\u5165\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3002", "titles": ["\u5730\u7403\u306e\u4f4d\u7f6e\u3092\u628a\u63e1\u3059\u308bIMU\u30c7\u30d0\u30a4\u30b9\u3092\u4f5c\u308d\u3046\uff01", "FPGA\u3068IMU\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u65b0\u3057\u3044IMU\u958b\u767a", "ICE40\u30c1\u30c3\u30d7\u304c\u642d\u8f09\u3055\u308c\u305f\u30d1\u30ef\u30d5\u30eb\u306aIMU\u958b\u767a\u30dc\u30fc\u30c9", "\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u624b\u306b\u5165\u308b\u624b\u9803\u306aIMU\u958b\u767a\u30dc\u30fc\u30c9", "LED\u30a2\u30ec\u30a4\u3092\u4f7f\u3063\u305f\u30bb\u30f3\u30b5\u30fc\u3068\u3057\u3066\u306eIMU\u6280\u8853"]}