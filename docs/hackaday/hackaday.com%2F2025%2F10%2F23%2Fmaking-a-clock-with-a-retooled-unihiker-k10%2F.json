{"pubDate": "2025-10-23T08:00:46", "original_title": "Making a Clock With a Retooled Unihiker K10", "link": "https://hackaday.com/2025/10/23/making-a-clock-with-a-retooled-unihiker-k10/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/Making-a-Retro-Analog-NTP-Clock-with-Unihiker-K10-Arduino-IDE-Tutorial-7-23-screenshot-e1760921220344.png", "original_content": "The Unihiker K10 is intended to be a small single-board solution for light AI and machine learning tasks. However, you dont\u00a0have to use it in that way if you dont want to. [mircemk] figured out how to repurpose the device, and whipped up a simple Internet clock build to demonstrate how its done.\u00a0\nWhile the Unihiker K10 is based on the common ESP32 microcontroller, out of the box, it isnt compatible with standard Arduino libraries. However, [mircemk] had previously figured out how to get the K10 to play nice with the Arduino environment, building a simple light meter as a proof of concept. It just took a little tinkering to get everything playing nicely together, but soon enough, the TFT LCD and a light sensor were playing nicely with the K10 platform.\nMoving forward, [mircemk] wanted to unlock more capability, so set about figuring out how to get WiFi and the onboard buttons working within the Arduino environment. A great way to test this was building a clock\u2014the screen would show an analog clock face, the buttons would be used for control, and the WiFi would be used to query an NTP time server to keep it synced up and accurate.\nIt took a little work, particularly as the buttons are accessed through an external I/O expansion chip, but [mircemk] got there in the end. The clock may not be a particularly advanced project, but the write-up demonstrates how the K10 can readily be used with Arduino libraries for when youre not interested in leveraging its fancier AI/ML capabilities.\nWeve seen a few good builds from [mircemk] before, too, like this neat proximity sensor.\n"}