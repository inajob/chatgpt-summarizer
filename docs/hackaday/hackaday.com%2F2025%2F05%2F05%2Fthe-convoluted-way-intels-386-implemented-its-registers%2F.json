{"pubDate": "2025-05-05T08:00:10", "original_title": "The Convoluted Way Intel\u2019s 386 Implemented its Registers", "link": "https://hackaday.com/2025/05/05/the-convoluted-way-intels-386-implemented-its-registers/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/05/80386_ken_shirriff_registers-labeled.jpg", "original_content": "The fact that modern-day x86 processors still pretty much support the same operating systems and software as their ancestors did is quite a feat. Much of this effort had already been accomplished with the release of the 80386 (later 386) CPU in 1985, which was not only the first 32-bit x86 CPU, but was also backwards compatible with 8- and 16-bit software dating back to the 1970s. Making this work transparently was anything but straightforward, as [Ken Shirriff]s recent analysis of the 80386s main register file shows.\nLabelled Intel 80386 die shot. (Credit: Ken Shirriff)\nUsing die shots of the 386s registers and surrounding silicon, its possible to piece together how backwards compatibility was implemented. The storage cells of the registers are implemented using static memory (SRAM) as is typical, with much of the register file triple-ported (two read, one write).\nMost interestingly is the presence of different circuits (6) to support accessing the register file for 8-, 16- or 32-bit writes and reads. The shuffle network as [Ken] calls it is responsible for handling these distinct writes and reads, which also leads to the finding that the bottom 16 bits in the registers are actually interleaved to make this process work smoother.\nFortunately for Intel (and AMD) engineers, this feat wouldnt have to be repeated again with the arrival of AMD64 and x86_64 many years later, when the 386s mere 275,000 transistors on a 1 \u00b5m process would already be ancient history.\nWant to dive even deeper in to the 386? This isnt the first time [Ken] has looked at the iconic chip.", "title": "- 80386 CPU\u306e\u767b\u5834\u3068\u305d\u306e\u4e92\u63db\u6027\u306e\u79d8\u5bc6", "body": "x86\u30d7\u30ed\u30bb\u30c3\u30b5\u306f80386\u304b\u3089\u4e92\u63db\u6027\u3092\u4fdd\u3064\u9032\u5316\u3092\u9042\u3052\u305f\u3002", "titles": ["- 80386 CPU\u306e\u767b\u5834\u3068\u305d\u306e\u4e92\u63db\u6027\u306e\u79d8\u5bc6", "- 32\u30d3\u30c3\u30c8\u51e6\u7406\u3068\u30ec\u30c8\u30ed\u4e92\u63db\u6027\u3092\u5b9f\u73fe\u3057\u305f80386", "- Ken Shirriff\u304c\u89e3\u660e\u3059\u308b80386\u306e\u30ec\u30b8\u30b9\u30bf\u30d5\u30a1\u30a4\u30eb", "- x86\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u9032\u5316\u306880386\u306e\u5f79\u5272", "- Intel\u3068AMD\u306e\u6b74\u53f2\u7684\u306a\u6280\u8853\u9769\u65b0\uff1a80386\u304b\u3089AMD64\u307e\u3067"]}