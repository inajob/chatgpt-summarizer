{"pubDate": "2025-05-27T05:00:02", "original_title": "Vintage Intel 8080 runs on a Modern FPGA", "link": "https://hackaday.com/2025/05/26/vintage-intel-8080-runs-on-a-modern-fpga/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/05/8080-fpga-1200.jpg", "original_content": "If you\u2019re into retro CPUs and don\u2019t shy away from wiring old-school voltages, [Mark]\u2019s latest Intel 8080 build will surely spark your enthusiasm. [Mark] has built a full system board for the venerable 8080A-1, pushing it to run at a slick 3.125\u202fMHz. Remarkable is that he\u2019s done so using a modern Microchip FPGA, without vendor lock-in or proprietary flashing tools. Every step is open source.\nGetting this vintage setup to work required more than logical tinkering. Mark\u2019s board supplies the \u00b15\u202fV and +12\u202fV rails the 8080 demands, plus clock and memory interfacing via the FPGA. The design is lean: two-layer PCB, basic level-shifters, and a CM32 micro as USB-to-UART fallback. Not everything went smoothly: incorrect footprints, misrouted gate drivers, thermal runaway in the clock section; but he managed to tackle it.\nWhat sets this project apart is the resurrection of a nearly 50-year-old CPU. It\u2019s also, how thoroughly thought-out the modern bridge is\u2014from bitstream loading via OpenOCD to clever debugging of crystal oscillator drift using a scope. [Mark]\u2019s love of the architecture and attention to low-level detail makes this more than a show-off build.\nWatch [Mark]s video here or pull his files from his repo on GitHub. Let us know what purpose it could have for you!\n\n", "title": "- 50\u5e74\u306e\u6b74\u53f2\u3092\u6301\u3064Intel 8080\u306e\u5fa9\u6d3b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "body": "Mark\u304cIntel 8080\u306e\u30b7\u30b9\u30c6\u30e0\u57fa\u677f\u3092\u4f5c\u6210\u3057\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u52d5\u4f5c\u3055\u305b\u305f\u3002\u8a2d\u8a08\u306b\u306f\u591a\u304f\u306e\u5de5\u592b\u304c\u3042\u308b\u3002", "titles": ["- 50\u5e74\u306e\u6b74\u53f2\u3092\u6301\u3064Intel 8080\u306e\u5fa9\u6d3b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "- \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u5b9f\u73fe\u3057\u305f8080A-1\u30b7\u30b9\u30c6\u30e0\u30dc\u30fc\u30c9\u306e\u88fd\u4f5c", "- FPGA\u3092\u4f7f\u3063\u305f\u30ec\u30c8\u30edCPU\u306e\u65b0\u3057\u3044\u6311\u6226", "- \u30af\u30e9\u30b7\u30c3\u30af\u306a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u5fa9\u5143\u3068\u305d\u306e\u82e6\u52b4", "- Mark\u306e8080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff1a\u53e4\u5178\u3068\u73fe\u4ee3\u306e\u878d\u5408"]}