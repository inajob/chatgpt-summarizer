{"pubDate": "2025-06-18T17:00:42", "original_title": "ZPUI Could Be Your Tiny Embedded GUI", "link": "https://hackaday.com/2025/06/18/zpui-could-be-your-tiny-embedded-gui/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/06/hadoc_zpui_4_featured.png", "original_content": "One of the most frustrating things to me is looking at a freshly-flashed and just powered up single board computer. My goal with them is always getting to a shell  installing packages, driving GPIOs, testing my proof of concept code, adjusting the device tree to load peripheral drivers. Before I can do any of that, I need shell access, and getting there can be a real hassle.\nTime after time, Ive struggled trying to get to a shell on an SBC. For best results, youd want to get yourself a keyboard, monitor, and an Ethernet cable. Dont have those, or theres no space to place them? Maybe a UART connection will work for you  unless its broken or misconfigured. Check your pinouts twice. Sure, nowadays you can put WiFi credentials into a text file in /boot/  but good luck figuring out the IP address, or debugging any mistakes you might make formatting the file. Nowadays, Pi 4 and 5 expose a USB gadget connection on the USB-C port, and that helps unless youre already powering the Pi from that port. Theres really no shortage of failure modes here.\nIf you put a Pi on your network and it goes offline, you generally just dont know what happened unless you reboot it, which can make debugging into a living hell. Ive dealt with single-board computers mounted above fiberglass lifted ceilings, fleets of Pi boards at workshops I organized, pocket-carried Pi boards, and at some point, I got tired of it all. A hacker-aimed computer is meant to be accessible, not painful.\n\nServer-Grade Interfaces For All\nThats why, for years now, Ive been working on a cheap and accessible embedded UI, called ZPUI (Zippy UI)  with its help, a cheap I2C screen and a few buttons is all it takes to keep track of your Pi or other Linux device.\nA separate lightweight control interface isnt a new concept. Back in the glorious era of character LCDs and non-standard mounting boxy cute servers, you could get a 162 display and five arrow keys on a Sun machine, and with help of a little bespoke software, you could do basic management actions on your server without having to break out a KVM.\n\n\n\n\n\nOne of my first semi-serious projects, way back in 2014, was a HD44780 library for Raspberry Pi use, universal and lightweight, supporting both direct GPIO access and I2C backpacks with ease. People have had used those for IP address display for a while by then, but it wasnt enough for me. I wanted to easily power off my boards to avoid SD card corruption (which was way worse back in the day), figure out my boards IP addresses without Nmap scans, and connect to WiFi networks without SD card machinations. All throughout, it felt like a piece of software someone shouldve had written years ago. Its a simple concept  if I have physical access to my SBC, I should be able to take control of it.\nSo, with a HD44780, a USB numpad, and a heap of Python code, Ive built the first version of the software I called pyLCI  for Linux Control Interface. I gave it app loading support, then wrote code to parse commands like ip addr, wpa_cli for WiFi connection management, tvservice for HDMI monitor connection debug, reboot and poweroff, as well as an ability to run arbitrary pre-defined scripts from a menu. I made sure itd only require 5 buttons at all times  up, down, left, right, and enter, and that itd work with character LCDs from as small as 162 to as big as 204.\npyLCI quickly became a useful tool in my SBC forays, and Ive built it into a number of my portable devices, most of them Pi-powered. Ive added it to a portable hardware hacking workbench I built for SPI flash and general hardware tinkering, home automation Pi boards Id run, and even a desktop/pocket Pi 2 that served as only computer for almost half a year. When I ran Raspberry Pi workshops in our hackerspace, I bought a few character-LCD-and-button HATs and used them to determine IP addresses of student-issued Pi boards, so that I wouldnt need to drag a monitor around or do USB-UART interventions.\n\n\n\n\nEntering WiFi passwords with arrow keys wasnt ideal, but it was miles ahead of the frustration I used to routinely experience before it, every time I brought a Pi somewhere for a project  only to get effectively locked out of a computer I own.\nBigger Screens, Bigger Ambitions\nWhen I worked on ZeroPhone, an open-source Raspberry Pi Zero-based numpad phone, naturally, I forked pyLCI into a base for the UI, called it ZPUI (for ZeroPhone UI), and decided to target the super common 12864 screens. Initially, I made the color screen imitate a character screen  it worked kind of well as a stopgap but resulted in tiny text. It took a good while to make the screen readable, make apps work passably well and write new better-working ones, implement numpad input in addition to arrow keys input, and Ive ended up learning a ton from building an UI framework where none was intended to be.\nRecently, Ive reignited my portable platform building ambitions, and as part of a hacker collective, Ive been working on a Beepy derivative device  a QWERTY PDA-like Pi Zero-based pocket Linux terminal. Just like many portable Linux devices in this form-factor, its badly missing a low-frills graphical UI, with three or four people having attempted to write one, and one in particular getting pretty far. I ported ZPUI to a larger screen, borrowed a UI layout mockup from one of the more successful Beepy UI projects, and Im now porting ZPUI to larger screens. My goal with ZPUI is making your Linux devices accessible and friendly, and the Beepy community could definitely benefit from a software boost like that.\nMy goal is creating a UI that you can use to make any of your Linux devices accessible  no matter if youre building a home automation panel with a Pi at its heart, or an OpenWRT-powered pocket router, putting together an overpowered Meshtastic node you want to adjust on the fly, or a PWN4Pi device that you want to manually pick RubberDucky scripts for, designing failsafes for a robot with computer vision, or simply organizing workshops where seeing your Pis IP address is important, in circumstances of twenty students who all want your attention during setup. This year, Ive started working on ZPUI again, bringing it up to speed with modern software realities, and I invite you to try it out in your projects.\nHow ZPUI Can Help You\nCheap enough to order a dozen, for $5, only needs an OLED and buttons, and its very JLC-compatible\nAt minimum, you only need a small 12864 OLED screen and give buttons  for instance, if you have a Waveshare Pi Zero hat, it will do just fine. In case youre ordering PCBs anytime soon, Ive also designed a businesscard form-factor Pi shield, which fits on any Pi and even works over QWIIC if you want  throw the board into your next JLC order, solder an OLED and a few jellybean buttons to it, follow the install instructions, and enjoy the extra point of control over your Linux install.\nAs-is, ZPUI can do most of the basic tasks for you  show network info, connect to WiFi networks (and even display known network passwords), manage system services with help of a systemctl API, poweroff/reboot, unmount partitions so you dont have to SSH in to unplug that one flash drive, list USB devices so you know if your favourite device fell off the bus, and do a number of other things (theres even an AVRDUDE app!). It will even let you input console commands through arrow keys in a pinch.\nExample ZPUI apps, complete with instructions, coming soon!\nCurrently, apart from UI improvements, Im working on a heap of mechanisms to make third-party app designs easier. You already can develop ZPUI apps, and you can even distribute ZPUI apps as Python packages, but theres still work to do. If you want to help contribute and tackle goals like, say, a raspi-config app or a Bluetooth config interface, youre most welcome to join in and help  theres even a ZPUI emulator for app development purposes!\nZPUI is a project aimed to make your other projects easier. I invite you to try it out, especially if youve faced the kind of problems Ive told about in the article intro. If it were up to me, SBCs like Raspberry Pi would come with these kinds of interfaces out of the box, simply because of the insanely large amount of problems Ive had it solve and figure out.\nUnexpectedly Cyberpunk\nHeres a cool demo! Ive assembled a ZPUI businesscard into a palm-sized shield, with a QWIIC cable connected to it. On my SBCs, I have QWIIC sockets exposed, with ZPUI installed and configured to expect such a shield. When I plug it in, ZPUI detects it on the I2C bus and shows up on the screen. This palm-sized shield feels surprisingly cyberpunk to use, akin to having a cable in your wrist that lets you tap into any device of your choice. For a while now, all my devices come with QWIIC connectors, because of just how much ZPUI helps me in bringup and development.\n\n\n\n\n\nIf you have any questions, ask away, and I hope ZPUI can help you. If not  let me know! This year, Im aiming to seriously upgrade it, building it into a fully-featured UI it is meant to be, and if theres a feature youre looking for, it could very well get implemented alongside.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}