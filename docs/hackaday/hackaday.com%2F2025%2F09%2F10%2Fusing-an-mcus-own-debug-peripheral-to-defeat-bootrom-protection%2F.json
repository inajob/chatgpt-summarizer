{"pubDate": "2025-09-10T23:00:38", "original_title": "Using an MCU\u2019s Own Debug Peripheral to Defeat Bootrom Protection", "link": "https://hackaday.com/2025/09/10/using-an-mcus-own-debug-peripheral-to-defeat-bootrom-protection/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/09/tamagotchi_paradise_teardown_tamagotchi_center.jpg", "original_content": "The patient hooked up for some reverse-engineering. (Credit: Caralynx, Twitter)\nReleased in July of 2025, the Tamagotchi Paradise may look somewhat like the late 90s toy that terrorized parents and teachers alike for years, but its significantly more complex and powerful hardware-wise. This has led many to dig into its ARM Cortex-M3-powered guts, including [Yukai Li] who recently tripped over a hidden section in the bootrom of the dual-core Sonix SNC73410 MCU that makes up most of the smarts inside this new Tamagotchi toy.\nInterestingly, [Yukai] did see that the visible part of the bootrom image calls into the addresses that make up the hidden part right in the reset handler, which suggests that after reset this hidden bootrom section is accessible, just not when trying to read it via e.g. SWD as the hiding occurs before the SWD interface becomes active. This led [Yukai] to look at a way to make this ROM section not hidden by using the Cortex-M3s standard Flash Patch and Breakpoint (FPB) unit. This approach is covered in the projects source file.\nWith this code running, the FPB successfully unset the responsible ROM hide bit in the\u00a0OSC_CTRL register, allowing the full bootrom to be dumped via SWD and thus defeating this copy protection with relatively little effort.\nHeading image: PCB and other components of a torn-down Tamagotchi Paradise. (Credit: Tamagotchi Center)"}