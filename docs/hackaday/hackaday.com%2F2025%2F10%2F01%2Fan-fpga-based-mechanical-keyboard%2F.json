{"pubDate": "2025-10-01T11:00:52", "original_title": "An FPGA-Based Mechanical Keyboard", "link": "https://hackaday.com/2025/10/01/an-fpga-based-mechanical-keyboard/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/09/clavier-assembled-e1758870204704.jpg", "original_content": "You can buy all kinds of keyboards these days, from basic big-brand stuff to obscure mechanical delicacies from small-time builders. Or, you can go the maker route, and build your own. Thats precisely what [Lambert Sartory] did with their Clavier build.\nThis build goes a bit of a different route to many other DIY keyboards out there, in that [Lambert] was keen to build it around an FPGA instead of an off-the-shelf microcontroller. To that end, the entire USB HID stack was implemented in VHDL on a Lattice ECP5 chip. It was a heavy-duty way to go, but it makes the keyboard quite unique compared to those that just rely on existing HID libraries to do the job. This onboard hardware also allowed [Lambert] to include JTAG, SPI, I2C, and UART interfaces right on the keyboard, as well as a USB hub for good measure.\nAs for the mechanical design, its a full-size 105-key ISO keyboard with one bonus key for good measure. Thats the coffee key, which either locks the attached computer when youre going for a break, or resets the FPGA with a long press just in case its necessary. Its built with Cherry MX compatible switches, has N-key rollover capability, and a mighty 1000 Hz polling rate. If you can exceed that by hand, youre some sort of superhuman.\nThe great thing about building your own keyboard is you can put in whatever features you desire. If youre whipping up your own neat interface devices, dont hesitate to let us know!"}