{"pubDate": "2023-11-10T15:00:44", "original_title": "This Week in Security: Find My Keylogger, Zephyr, and Active Exploitation", "link": "https://hackaday.com/2023/11/10/this-week-in-security-find-my-keylogger-zephyr-and-active-exploitation/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Keyloggers. Such a simple concept  you secretly record all the characters typed on a keyboard, and sort through it later for interesting data. That keyboard sniffer could be done in software, but a really sneaky approach is to implement the keylogger in hardware. Hardware keyloggers present a unique problem. How do you get the data back to whoevers listening? One creative solution is to use Apples Find My tracking system. And if that link wont let you read the story, a creative solution for that issue is to load the page with javascript disabled.\nThis is based on earlier work from [Fabian Br\u00e4unlein], dubbed Send My. As an aside, this is the worst naming paradigm, and Apple should feel bad for it. At the heart of this cleverness is the fact that Apple used the standard Bluetooth Low Energy (BLE) radio protocol, and any BLE device can act like an Apple AirTag. Bits can be encoded into the reported public key of the fake AirTag, and the receiving side can do a lookup for the possible keys.\nA fake AirTag keylogger manages to transfer 26 characters per second over the Find My system, enough to keep up with even the fastest of typists, given that no keyboard is in use all the time. Apple has rolled out anti-tracking protections, and the rolling key used to transmit data also happens to completely defeat those protections.\nZephyr RTOS\n[Marco Ivaldi] has opted to do security research on Open Source projects for a while, following a less than stellar experience trying to report vulnerabilities to Oracle. So to celebrate 20 years of vulnerability hunting, [Marco] is disclosing 12 vulnerabilities in the Zephyr Real-Time Operating System (RTOS).\nOf those, five are rated CVSS 7.0 or more serious, with the top two tying at 7.6. Those are each buffer overflows in the transmit functions of CANbus and IEEE 802.15.4 respectively. As the overflows are on transmit, theyll be much harder to exploit, but there are still clever attacks that make use of such vulnerabilities, so its good to get these cleaned up. Of the twelve vulnerabilities, one was fixed with Zephyr 3.4.0, ten in 3.5.0, and one additional vulnerability that is still pending.\nLooney Tunables Joins the Show\nWe talked about the Looney Tunables vulnerability when it first dropped. For a quick recap, that is a buffer overflow in the glibc dynamic library loader. Proofs of Concept (PoCs) have been published, and the inevitable has happened. The vulnerability is now being used in real attacks, being used by a threat actor known as Kinsing.\nAtlassian Confluence Not To Be Outdone\nThe other serious vulnerability to make it to active exploit is the Atlassion Confluence authentication bypass. Attacks started in mass Saturday night, and at least three discrete IPs were making attempts to use the exploit. At least one of those attacks is a ransomware attempt from an unknown group, C3RB3R.\nPRTG Network Exploitation\nAnd one of the next exploits well likely see in the attacker toolkit is this RCE in the PRTG Network Monitor system. PRTG works by installing sensors to various machines on the network, managed by a central server. The problem is that the server can make live changes to the sensor config, and one of those changes can inject arbitrary parameters. And a valid parameter is the debug flag.\nDebug options left in production should fill the reader with a bit of dread. Here that debug flag allows for file creation with a few caveats. The approach taken by Baldur Security to demonstrate the flaw was to write out a .bat file, which can then be executed as a sensor. Compromise the PRTG machine, and you can push arbitrary code running as SYSTEM to every monitored machine.\nBits and Bytes\nIf you had any doubt, typosquatting  Co are alive and well, with one of the latest reports coming from python-land. Eight packages all claimed to be related to code obfuscation, and each name started with Pyobft. In fact, the code would spy on the developers that were unfortunate enough to install them, steal passwords and files, and then finally encrypt the hard drive. Ouch.\nThere are good responses to disclosure, there are bad responses to disclosure, and then theres this guy. [Eddie Zhang] found a pair of open Amazon S3 buckets that were obviously not intended to be public. Monash University did everything right, and even shared public recognition, as well as rapidly fixing the problem. An unknown CIO took the other road, complaining that this was the third time this month someone had wasted the companys time with news of a breach. [Eddie] has opted to submit through a few third parties, including [Troy Hunt], and leave it at that. I would actually encourage full disclosure after 90 days, as this companies customers absolutely deserve to see how their data is being handled.\nAnd finally, the Industrial and Commercial Bank of China was hit with a ransomware attack in their US offices. Its a reminder just how much the world relies on digital systems, and how bold the ransomware gangs have gotten  attacking one of Chinas largest industrial banks.", "title": "\u300c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ad\u30fc\u30ed\u30ac\u30fc\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97 - Apple\u306eFind My\u30b7\u30b9\u30c6\u30e0\u3092\u5229\u7528\u300d", "body": "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ad\u30fc\u30ed\u30ac\u30fc\u306f\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3088\u308a\u3082\u30b9\u30cb\u30fc\u30ad\u30fc\u306a\u65b9\u6cd5\u3067\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u8a18\u9332\u3057\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Apple\u306eFind My\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u7528\u3057\u305f\u30ad\u30fc\u30ed\u30ac\u30fc\u306f\u300126\u6587\u5b57/\u79d2\u306e\u30c7\u30fc\u30bf\u8ee2\u9001\u304c\u53ef\u80fd\u3067\u3059\u3002Zephyr RTOS\u306b\u306f12\u306e\u8106\u5f31\u6027\u304c\u3042\u308a\u3001Looney Tunables\u3068Atlassian Confluence\u3082\u653b\u6483\u3055\u308c\u3066\u3044\u307e\u3059\u3002PRTG Network Monitor\u306eRCE\u3082\u60aa\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u4e2d\u56fd\u6700\u5927\u306e\u9280\u884c\u306e\u4e00\u3064\u3067\u3042\u308b\u4e2d\u56fd\u5de5\u5546\u9280\u884c\u3082\u30e9\u30f3\u30b5\u30e0\u30a6\u30a7\u30a2\u653b\u6483\u3092\u53d7\u3051\u307e\u3057\u305f\u3002", "titles": ["\u300c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ad\u30fc\u30ed\u30ac\u30fc\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97 - Apple\u306eFind My\u30b7\u30b9\u30c6\u30e0\u3092\u5229\u7528\u300d", "\u300cZephyr Real-Time Operating System (RTOS)\u306b12\u306e\u8106\u5f31\u6027\u304c\u898b\u3064\u304b\u308b\u300d", "\u300cLooney Tunables\u8106\u5f31\u6027\u304c\u5b9f\u969b\u306e\u653b\u6483\u3067\u4f7f\u7528\u3055\u308c\u308b\u300d", "\u300cAtlassian Confluence\u8a8d\u8a3c\u30d0\u30a4\u30d1\u30b9\u306e\u8106\u5f31\u6027\u306b\u3088\u308b\u653b\u6483\u304c\u767a\u751f\u300d", "\u300cPRTG\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30cb\u30bf\u30fc\u306b\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c\u306e\u8106\u5f31\u6027\u300d"]}