{"pubDate": "2023-12-28T18:00:27", "original_title": "Linux Fu: Preprocessing Beyond Code", "link": "https://hackaday.com/2023/12/28/linux-fu-preprocessing-beyond-code/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "If you glanced at the title and thought, I dont care  I dont write C code, then hang on a minute. While it is true that C has a preprocessor and you can notoriously do strange and  depending on your point of view  horrible or wonderful things with it, there are actually other options and you dont have to use any of them with a C program. You can actually use the C preprocessor with almost any kind of text file. And its not the only preprocessor you can abuse this way. For example, the m4 preprocessor is wildly complex, vastly underused, and can handle C source code or anything else you care to send to it.\nDefinitions\nIll define a preprocessor as a program that transforms its input file into an output file, reacting to commands that are probably embedded in the file itself. Most often, that output is then sent to some other program to do the real work. That covers cpp, the C preprocessor. It also covers things like sed. Honestly, you can easily create custom preprocessors using C, awk, Python, Perl, or any other programming language. There are many other standard programs that you could think of as preprocessors, for example, tr. However, one of the most powerful is made to preprocess complex input files called m4. For some reason  maybe because of its complexity  you dont see much m4 in the wild.\n\nWhat Preprocessor?\nIf youve only used modern C compilers, you may wonder where the preprocessor even is. An ordinary system now does the entire compile in  as far as you can tell  one single pass. However, your compiler should offer a cpp executable that does the preprocessor logic externally, if you prefer. For gcc (and many other compilers), the preprocessor is named  unsurprisingly  cpp. The preprocessor has four major tasks:\n\nSubstitute one string for another, including macros that look like a function call.\nEvaluate expressions and include parts of the input or exclude them based on the expressions value.\nStrip out comments.\nRead in other files.\n\nOf course, usually, the input is C source code, and the output is headed for the compiler, but it doesnt have to be that way.\nA Simple Example\nSuppose you have a configuration file of some sort that has messages in it, originally in English. The file looks like this:\nmessage1: Good Morning\nmessage2: Good Night\nmessage3: The cat is white\nWe want to arrange it so we can easily change the messages and build a new configuration file. There are several ways you could do this, each with some advantages and disadvantages.\nImagine you have a file called langs:\n#define ENGLISH 0\n#define SPANISH 1\nObviously, you could add more languages here, and the numbers are arbitrary as long as they are unique.\nNow, we can create a template for the final configuration file:\n#include \"langs\"\n\n#ifndef LANG\n#define LANG ENGLISH\n#endif\n\n#include \"xlat\"\n\nmessage1: GOOD_MORNING\nmessage2: GOOD_NIGHT\nmessage3: CAT(WHITE)\nThere are a few things to notice about this file. First, it includes our language definition file. It then defines LANG as one of those symbols unless something else has already defined it. We will soon see what that might be, but assume this sets LANG to ENGLISH for now.\nThe include of xlat populates the tags like GOODMORNING with the correct string in whatever language we choose. Heres what xlat looks like:\n#if LANG==ENGLISH\n#define WHITE white\n#define GOOD_MORNING Good Morning\n#define GOOD_NIGHT Good Morning\n#define CAT(clr) The cat is clr\n\n#endif\n\n#if LANG==SPANISH\n#define WHITE blanco\n#define GOOD_MORNING Buenos D\u00edas\n#define GOOD_NIGHT Buenas Noches\n#define CAT(clr) El gato es clr\n#endif\nNote that the good morning message has a Unicode character in it. Thats one small issue with using tools like this. The encoding will come out as a C-style escape character. Depending on what you are going to use the output for, that may or may not be acceptable. In fact, there are several things the preprocessor does for the compiler that we probably want to suppress.\nIf you just run:\ncpp template\nYou get:\n# 0 \"template\" \n# 0 \"built-in\" \n# 0 \"command-line\" \n# 1 \"/usr/include/stdc-predef.h\" 1 3 4 \n# 0 \"command-line\" 2 \n# 1 \"template\" \n# 1 \"langs\" 1 \n# 2 \"template\" 2 \n\n\n# 1 \"xlat\" 1 \n# 8 \"template\" 2 \n\nmessage1: Good Morning \nmessage2: Good Night \nmessage3: The cat is white\nWhat we want is at the bottom, true, but theres a lot of stuff to help the compiler generate error messages and other things.\nThe trick is to put a few options on the command line:\ncpp -udef -P template\nThese options are for gccs preprocessor. If you use something else, you may have to make your own decisions.\nCustomizing\nIf you want the Spanish version, you could simply edit the file. But you can also tell the preprocessor to force the LANG symbol, and since the template wont redefine it, youll get the language of your choice:\ncpp -udef -P -D LANG=SPANISH template\nAs I mentioned, the Unicode character will look funny after this, depending on how you look at it.\nAnother Way\nThis isnt the only way to use the preprocessor in this example. You could detect the language and then include a different file  ENGLISH or SPANISH  to get the same result. This would have the advantage of many small independent files you could send to different translators, for example.\nThere are probably dozens of other ways you could do this, too. The preprocessor is like a multitool. There are lots of ways to do almost anything.\nPreprocessor on Steroids\nIf you really want to get fancy with the preprocessor, try m4. It is similar in idea to the C preprocessor but has many superpowers. It isnt specific to C, so theres not much you have to do to coax it to work with your files. Unlike the C preprocessor, m4 doesnt care about lines. For example, consider this input:\nHello!\ndefine(HACKADAY,1)\nTesting our macro:\nHACKADAY\nThe End\nIf you run that through m4, youll notice there is a strange blank line between Hello and the line that says Testing. Why? Because the macro definition only consumes the characters up to the close parenthesis. Everything else is still in the file, including that newline at the end. If you type some text in after the definition, theres no problem, and it will show up in the output.\nIf you want to ignore the rest of the line, you use dnl (delete to new line) like this:\ndefine(HACKADAY,1)dnl\nArguments in m4 use the dollar sign notation, much like the shell. Quoting is strange, too, since you use the back quote to open and the apostrophe to close. Like this:\ndefine(HACKADAY,`eval(10**$1)')\nAs you might expect, this allows you to say HACKADAY(2) and get 100 as the result  the double asterisk is exponentiation.\nA Pleasant Diversion\nOne of the best features of m4 is that it has at least ten different output streams. The default is stream 0 and the rest are numbered from 1 to 9. You can write to any of the streams easily, or write to an out-of-range stream like -1 to discard input. At the end, the output streams are put together in order. Hypothetically, then, you could have a macro that adds an item to a report, for example. The report has a header, a body, and a totals column. You could put all the header code into the first stream (or diversion, in m4-speak). Then put the body code in diversion 2 and the total code in diversion 3.\nAt the end, the generated program would have all the headers, then all the body items, and, finally, the totals and you could write them in any order you find convenient. If you want to throw text away, you should divert to a negative file number. Some m4 programs  including the GNU one  allow larger numbers of diversions than the standard.\nAs a simple example, consider this script:\ndnl These comments will be discarded\ndnl First, we are going to divert to #1\ndnl Then we will print each word along with a count\ndnl incrementing the count (_c)\ndnl At the end, we will switch back to 0 and output the count\ndnl This way, the header of the \"report\" will have the count\ndnl followed by the words we wanted to count\ndivert(1)dnl\ndefine(_c,0)dnl\ndefine(WC,`\ndefine(`_c',incr(_c))dnl\n_c: $1')dnl\nWC(Hello)\nWC(There)\nWC(Hackaday)\nWC(2024)\ndivert(0)dnl\nList of _c words:\nNote that the lines that start with dnl are essentially comments. The rest is cryptic, but the idea is to define a macro to output a list of words with sequence numbers. The header contains a total count which, of course, we dont know until the end. But since the header is put in diversion 0 and the rest in diversion 1, everything comes out in the right order.\nTheres too much about m4 to cover in a single post, but you can read more about it on your own. Honestly, if you really need the power of m4, maybe you should be thinking about awk or Python anyway. Youll probably have to recreate your own version of the divert system, though, so if you really need that functionality, maybe there is something to m4.\nOn the other hand, maybe try awk. Or mix awk, shell script, and the C processor in terrible ways.", "title": "C\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3063\u3066\u30ab\u30b9\u30bf\u30e0\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5", "body": "C\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u9650\u3089\u305a\u3001\u307b\u3068\u3093\u3069\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067C\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002m4\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3001C\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306a\u3069\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u8a00\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u7c21\u5358\u306b\u5909\u66f4\u3059\u308b\u65b9\u6cd5\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002", "titles": ["C\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3063\u3066\u30ab\u30b9\u30bf\u30e0\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5", "C\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u63db\u3059\u308b\u65b9\u6cd5", "C\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3063\u3066\u591a\u8a00\u8a9e\u5bfe\u5fdc\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5", "\u30d1\u30ef\u30d5\u30eb\u306am4\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u63db\u65b9\u6cd5", "m4\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u305f\u8907\u96d1\u306a\u51e6\u7406\u65b9\u6cd5\u306e\u7d39\u4ecb"]}