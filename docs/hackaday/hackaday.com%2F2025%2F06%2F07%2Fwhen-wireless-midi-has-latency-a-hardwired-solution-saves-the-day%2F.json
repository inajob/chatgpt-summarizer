{"pubDate": "2025-06-07T11:00:50", "original_title": "When Wireless MIDI Has Latency, a Hardwired Solution Saves the Day", "link": "https://hackaday.com/2025/06/07/when-wireless-midi-has-latency-a-hardwired-solution-saves-the-day/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/06/budgetmidi_feat.jpg", "youtube": "https://www.youtube.com/watch?v=yeVNayMNu6s", "original_content": "[Moby Pixel] wanted to build a fun MIDI controller. In the end, he didnt build it just once, but twice\u2014with the aim of finding out which microcontroller was most fit for this musical purpose. Pitted against each other? The ESP32 and Raspberry Pi Pico.\nThe MIDI controller itself is quite fetching. Its built with a 4 x 4 array of arcade buttons to act as triggers for MIDI notes or events. Theyre assembled in a nice wooden case with a lovely graphic wrap on it. The buttons themselves are wired to a microcontroller, which is then responsible for sending MIDI data to other devices.\nAt this point, the project diverges. Originally, [Moby Pixel] set the device up to work with an ESP32 using wireless MIDI over Bluetooth. However, he soon found a problem. Musical performance is all about timing, and the ESP32 setup was struggling with intermittent latency spikes that would ruin the performance. Enter the Raspberry Pi Pico using MIDI over USB. The hardwired solution eliminated the latency problems and made the controller far more satisfying to use.\nThere may be solutions to the latency issue with the wireless ESP32 setup, be they in code, hardware configuration, or otherwise. But if you want to play with the most accuracy and the minimum fuss, youll probably prefer the hardwired setup.\nLatency is a vibe killer in music as weve explored previously.\n\n"}