{"pubDate": "2024-07-29T23:00:10", "original_title": "Getting Linux Process List Without Forking Using Just a Bash Script", "link": "https://hackaday.com/2024/07/29/getting-linux-process-list-without-forking-using-just-a-bash-script/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2022/05/tree-fork-featured.jpg", "original_content": "The ps command is extremely useful when you want to get some quick information on active system processes (hence the name), especially followed by piping it into grep and kin for some filtering. One gotcha is of course that ps doesnt run in the current shell process, but is forked off into its own process, so what if everything goes wrong and you absolutely need to run ps aux on a system that is completely and utterly out of fresh process IDs to hand out? In that scenario, you fortunately can write a shell script that does the same, but all within the same shell, as [Isabella Bosia] did, with a Bash shell script.\nThe how and why is mostly covered in the shell script itself, using detailed comments. Initially the hope was to just read out and parse the contents of /proc/pid/status, but that doesnt have details like CPU%. The result is a bit more parsing to get the desired result, as well as a significant amount of cussing in the comments. Even if its not entirely practical, as the odds of ending up on a system with zero free PIDs are probably between zero and NaN, but as an entertaining job interview question and example of all the fun things one can do with shell scripting its definitely highly recommended.", "title": "ps\u30b3\u30de\u30f3\u30c9\u3092\u6d3b\u7528\u3059\u308b\u65b9\u6cd5", "body": "\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30bb\u30b9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306eps\u30b3\u30de\u30f3\u30c9\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3001grep\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3063\u3066\u540c\u3058\u3053\u3068\u3092\u884c\u3046\u65b9\u6cd5\u3082\u7d39\u4ecb\u3055\u308c\u3066\u304a\u308a\u3001\u9762\u767d\u3044\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f8b\u3068\u3057\u3066\u304a\u3059\u3059\u3081\u3002", "titles": ["ps\u30b3\u30de\u30f3\u30c9\u3092\u6d3b\u7528\u3059\u308b\u65b9\u6cd5", "ps\u30b3\u30de\u30f3\u30c9\u306e\u4f7f\u3044\u65b9\u3068\u5fdc\u7528", "\u30d7\u30ed\u30bb\u30b9\u60c5\u5831\u53d6\u5f97\uff1aps\u30b3\u30de\u30f3\u30c9 vs Bash\u30b9\u30af\u30ea\u30d7\u30c8", "ps\u30b3\u30de\u30f3\u30c9\u3092Bash\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u518d\u73fe", "\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306e\u30e6\u30cb\u30fc\u30af\u306a\u30d7\u30ed\u30bb\u30b9\u60c5\u5831\u53d6\u5f97"]}