{"pubDate": "2025-04-24T14:00:40", "original_title": "From PostScript to PDF", "link": "https://hackaday.com/2025/04/24/from-postscript-to-pdf/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/postscript_pdf.png", "original_content": "There was a time when each and every printer and typesetter had its own quirky language. If you had a wordprocessor from a particular company, it worked with the printers from that company, and that was it. That was the situation in the 1970s when some engineers at Xerox Parc  a great place for innovation but a spotty track record for commercialization  realized there should be a better answer.\nThat answer would be Interpress, a language for controlling Xerox laser printers. Keep in mind that in 1980, a laser printer could run anywhere from $10,000 to $100,000 and was a serious investment. John Warnock and his boss, Chuck Geschke, tried for two years to commercialize Interpress. They failed.\nSo the two formed a company: Adobe. Youve heard of them? They started out with the idea of making laser printers, but eventually realized it would be a better idea to sell technology into other peoples laser printers and thats where we get PostScript.\n\nEarly PostScript and the Birth of Desktop Publishing\nPostScript is very much like Forth, with words made specifically for page layout and laser printing. There were several key selling points that made the system successful.\nFirst, you could easily obtain the specifications if you wanted to write a printer driver. Apple decided to use it on their LaserWriter. Of course, that meant the printer had a more powerful computer in it than most of the Macs it connected to, but for $7,000 maybe thats expected.\nSecond, any printer maker could license PostScript for use in their device. Why spend a lot of money making your own when you could just buy PostScript off the shelf?\nFinally, PostScript allowed device independence. If you took a PostScript file and sent it to a 300 DPI laser printer, you got nice output. If you sent it to a 2400 DPI typesetter, you got even nicer output. This was a big draw since a rasterized image was either going to look bad on high-resolution devices or have a huge file system in an era where huge files were painful to deal with. Even a page at 300 DPI is fairly large.\nIf you bought a Mac and a LaserWriter you only needed one other thing: software. But since the PostScript spec was freely available, software was possible. A company named Aldus came out with PageMaker and invented the category of desktop publishing. Adding fuel to the fire, giant Linotype came out with a typesetting machine that accepted PostScript, so you could go from a computer screen to proofs to a finished print job with one file.\nIf you werent alive  or too young to pay attention  during this time, you may not realize what a big deal this was. Prior to the desktop publishing revolution, computer output was terrible. You might mock something up in a text file and print it on a daisy wheel printer, but eventually, someone had to make something that was camera-ready to make real printing plates. The kind of things you can do in a minute in any word processor today took a ton of skilled labor back in those days.\nTake Two\nOf course, you have to innovate. Adobe did try to prompt Display PostScript in the late 1980s as a way to drive screens. The NeXT used this system. It was smart, but a bit slow for the hardware of the day. Also, Adobe wanted licensing fees, which had worked well for printers, but there were cheaper alternatives available for displays by the time Display PostScript arrived.\nIn 1991, Adobe released PostScript Level 2  making the old PostScript into Level 1 retroactively. It had all the improvements you would expect in a second version. It was faster and crashed less. It had better support for things like color separation and handling compressed images. It also worked better with oddball and custom fonts, and the printer could cache fonts and graphics.\nRemember how releasing the spec helped the original PostScript? For Level 2, releasing it early caused a problem. Competitors started releasing features for Level 2 before Adobe. Oops.\nThey finally released PostScript 3. (And dropped the Level.) This allowed for 12-bit colors instead of 8-bit. It also supported PDF files.\nPDF?\nWhile PostScript is a language for controlling a printer, PDF is set up as a page description language. It focuses on what the page looks like and not how to create the page. Of course, this is somewhat semantics. You can think of a PostScript file as a program that drives a Raster Image Processor (RIP) to draw a page. You can think of a PDF as somewhat akin to a compiled version of that program that describes what the program would do.\nUp to PDF 1.4, released in 2001, everything you could do in a PDF file could be done in PostScript. But with PDF 1.4 there were some new things that PostScript didnt have. In particular, PDFs support layers and transparency. Today, PDF rules the roost and PostScript is largely static and fading.\nWhats Inside?\nLike we said, a PostScript file is a lot like a Forth program. Theres a comment at the front (%!PS-Adobe-3.0) that tells you it is a PostScript file and the level. Then theres a prolog that defines functions and fonts. The body section uses words like moveto, lineto, and so on to build up a path that can be stroked, filled, or clipped. You can also do loops and conditionals  PostScript is Turing-complete. A trailer appears at the end of each page and usually has a command to render the page (showpage), which may start a new page.\nA simple PostScript file running in GhostScript\nA PDF file has a similar structure with a %PDF-1.7 comment. The body contains objects that can refer to pages, dictionaries, references, and image or font streams. There is also a cross-reference table to help find the objects and a trailer that points to the root object.\u00a0 That object brings in other objects to form the entire document. Theres no real code execution in a basic PDF file.\nIf you want to play with PostScript, theres a good chance your printer might support it. If not, your printer drivers might. However, you can also grab a copy of GhostScript and write PostScript programs all day. Use GSView to render them on the screen or print them to any printer you can connect to. You can even create PDF files using the tools.\nFor example, try this:\n\n\n%!PS\n% Draw square\n100 100 moveto\n100 0 rlineto\n0 100 rlineto\n-100 0 rlineto\nclosepath\nstroke\n\n% Draw circle\n150 150 50 0 360 arc\nstroke\n\n% Draw text Hackaday centered in the circle\n/Times-Roman findfont 12 scalefont setfont % Choose font and size\n(Hackaday) dup stringwidth pop 2 div % Calculate half text width\n150 exch sub % X = center - half width\n150 % Y = vertical center\nmoveto\n(Hackaday) show\n\nshowpage\n\n\nIf you want to hack on the code or write your own, heres the documentation. Think it isnt really a programming language? [Nicolas] would disagree.", "title": "**\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u51fa\u7248\u306e\u9769\u547d\uff1aPostScript\u306e\u8a95\u751f\u3068\u5f71\u97ff**", "body": "1970\u5e74\u4ee3\u3001\u7279\u5b9a\u306e\u30d7\u30ea\u30f3\u30bf\u30fc\u7528\u8a00\u8a9e\u304c\u5b58\u5728\u3057\u3001Xerox\u306e\u6280\u8853\u8005\u304cInterpress\u3092\u958b\u767a\u3002\u3057\u304b\u3057\u3001\u5546\u696d\u5316\u306f\u5931\u6557\u3002Adobe\u8a2d\u7acb\u5f8c\u3001PostScript\u3092\u767a\u8868\u3057\u3001\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u51fa\u7248\u3092\u9769\u65b0\u3002PDF\u304c\u767b\u5834\u3057\u3001PostScript\u306f\u5f71\u97ff\u529b\u3092\u5931\u3063\u305f\u3002", "titles": ["**\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u51fa\u7248\u306e\u9769\u547d\uff1aPostScript\u306e\u8a95\u751f\u3068\u5f71\u97ff**", "**Adobe\u304c\u751f\u3093\u3060\u6280\u8853\uff1aPostScript\u304b\u3089PDF\u3078**", "**\u5370\u5237\u696d\u754c\u306e\u5909\u9769\u3092\u3082\u305f\u3089\u3057\u305fPostScript\u306e\u6210\u529f\u8981\u56e0**", "**\u96fb\u5b50\u5de5\u4f5c\u3067PostScript\u3092\u6d3b\u7528\u3059\u308b\u65b9\u6cd5\u3068\u5b9f\u7528\u4f8b**", "**PostScript\u30d5\u30a1\u30a4\u30eb\u306e\u57fa\u672c\u69cb\u9020\u3068\u305d\u306e\u5fdc\u7528**"]}