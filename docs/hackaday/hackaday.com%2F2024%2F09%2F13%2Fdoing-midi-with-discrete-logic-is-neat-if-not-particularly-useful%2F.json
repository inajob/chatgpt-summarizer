{"pubDate": "2024-09-13T11:00:02", "original_title": "Doing MIDI With Discrete Logic Is Neat, If Not Particularly Useful", "link": "https://hackaday.com/2024/09/13/doing-midi-with-discrete-logic-is-neat-if-not-particularly-useful/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/09/Screenshot-2024-09-12-194750.png", "original_content": "MIDI is normally baked into the chipset of a synthesizer, or something you use a microcontroller to handle. But thats not the only way to speak the language! [Kevin] decided to have some fun doing MIDI with discrete logic instead, with some pretty neat results.\n[Kevin] had previously built a control voltage step sequencer called the Baby8, which relied on 4017 counter ICs. He later realized he could repurpose three of his old Baby8 PCBs to create something that could generate MIDI using nothing more than discrete logic. The stack of three boards generate a simple MIDI message\u2014in this case, a two-byte Program Change command. At 8 bits per byte, plus a start and stop bit, that comes out to 20 bits in total. The bits to be sent are configured via the switches on the PCBs, and clocked out through the counter ICs via a clock running at the MIDI baud rate of 31,250 Hz.\nObviously, its not very practical to code your MIDI commands manually via DIP switches and then clock them out in this fashion. But\u2014it does work, and you can do it! If you wanted to build an old-school logic circuit that just spits out simple short MIDI commands, this is one way to go about it.\nWeve seen [Kevin]s work before, too, like this neat musical rotary phone build.\n\n", "title": "\u30c7\u30a3\u30b9\u30af\u30ea\u30fc\u30c8\u30ed\u30b8\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066MIDI\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5", "body": "\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u5185\u8535\u306eMIDI\u3078\u306e\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1\u3002Kevin\u306f\u30c7\u30a3\u30b9\u30af\u30ea\u30fc\u30c8\u30ed\u30b8\u30c3\u30af\u3092\u4f7f\u3044\u3001\u53e4\u3044Baby8 PCB\u3092\u518d\u5229\u7528\u3057\u3066MIDI\u4fe1\u53f7\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u8003\u6848\u3002\u30b9\u30a4\u30c3\u30c1\u3068\u30ab\u30a6\u30f3\u30bf\u30fcIC\u3092\u4f7f\u7528\u3057\u30662\u30d0\u30a4\u30c8\u306eProgram Change\u30b3\u30de\u30f3\u30c9\u3092\u751f\u6210\u3057\u300131,250 Hz\u306e\u30af\u30ed\u30c3\u30af\u3067\u9001\u4fe1\u3002", "titles": ["\u30c7\u30a3\u30b9\u30af\u30ea\u30fc\u30c8\u30ed\u30b8\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066MIDI\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5", "Baby8 PCB\u3092\u6d3b\u7528\u3057\u305f\u30c7\u30a3\u30b9\u30af\u30ea\u30fc\u30c8\u30ed\u30b8\u30c3\u30af MIDI \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306e\u69cb\u7bc9", "DIP\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3063\u3066\u624b\u52d5\u3067MIDI\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5", "MIDI\u901a\u4fe1\u306b\u57fa\u3065\u304f\u53e4\u5178\u7684\u306a\u30ed\u30b8\u30c3\u30af\u56de\u8def\u69cb\u7bc9", "\u30ed\u30c8\u30ea\u30fc\u30d5\u30a9\u30f3\u3092\u6d3b\u7528\u3057\u305f\u9762\u767d\u3044\u96fb\u5b50\u97f3\u697d\u30c7\u30d0\u30a4\u30b9\u306e\u88fd\u4f5c"]}