{"pubDate": "2025-04-01T18:30:57", "original_title": "Shrinking Blinky As Far As Possible", "link": "https://hackaday.com/2025/04/01/shrinking-blinky-as-far-as-possible/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/03/I-Shrunk-Blinky-to-0-Bytes-11-4-screenshot.png", "youtube": "https://www.youtube.com/watch?v=9FTUa", "original_content": "Many of us know the basic Blink Arduino sketch, or have coded similar routines on other microcontrollers. Flashing an LED on and off\u2014it doesnt get much simpler than that. But how big should a blink sketch be? Or more importantly, how small could you get it? [Artful Bytes] decided to find out.\nThe specific challenge? Write a program that runs on a microcontroller and blinks an LED. The ON and OFF times should be as close to 1000 ms as possible. The challenge was undertaken using a NUCLEO-L432KC Cortex-M4 with 256 K of flash and 64 K of RAM.\nWe wont spoil the full challenge, but it starts out with an incredibly inefficient AI  cloud solution. [Artful Bytes] then simplifies by switching to an RTOS approach, before slimming down further with C, assembly, and then machine code. The challenge was to shrink the microcontroller code as much as possible. However, you might notice the title of the video is I Shrunk Blinky to 0 Bytes. As it turns out, if you eliminate the digital code-running hardware entirely you can still blink an LED with analog hardware. So, yes. 0 bytes is possible.\nWeve featured the worlds smallest blinky before, too, but in a physical sense rather than with regards to code size.\n\n"}