{"pubDate": "2025-09-20T14:00:05", "original_title": "Computer Has One Instruction, Many Transistors", "link": "https://hackaday.com/2025/09/20/computer-has-one-instruction-many-transistors/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/09/subleq-main.jpg", "original_content": "Theres always some debate around what style of architecture is best for certain computing applications, with some on the RISC side citing performance per watt and some on the CISC side citing performance per line of code. But when looking at instruction sets its actually possible to eliminate every instruction except one and still have a working, Turing-complete computer. This instruction is called subleq or subtract and branch if less-than or equal to zero. [Michael] has built a computer that does this out of discrete components from scratch.\nWell save a lot of the details of the computer science for [Michael] or others to explain, but at its core this is a computer running with a 1 kHz clock with around 700 transistors total. Since the goal of a single-instruction computer like this is simplicity, the tradeoff is that many more instructions need to be executed for equivalent operations. For this computer it takes six clock cycles to execute one instruction, for a total of about 170 instructions per second. [Michael] also created an assembler for this computer, so with an LCD screen connected and mapped to memory he can write and execute a simple hello world program just like any other computer.\n[Michael] does note that since he was building this from Logisim directly he doesnt have a circuit schematic, but due to some intermittent wiring issues might have something in the future if he decides to make PCBs for this instead of using wire on a cardboard substrate. Theres plenty of other information on his GitHub page though. Its a unique project that gets to the core of whats truly needed for a working computer. There are a few programming languages out there that are built on a similar idea.\n\n", "title": "- \u305f\u3063\u305f\u4e00\u3064\u306e\u547d\u4ee4\u3067\u52d5\u4f5c\u3059\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u69cb\u7bc9", "body": "\u4e00\u3064\u306e\u547d\u4ee4\u3067\u52d5\u4f5c\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u305f\u3002\u7d04700\u500b\u306e\u30c8\u30e9\u30f3\u30b8\u30b9\u30bf\u4f7f\u7528\u3002", "titles": ["- \u305f\u3063\u305f\u4e00\u3064\u306e\u547d\u4ee4\u3067\u52d5\u4f5c\u3059\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u69cb\u7bc9", "- \u30b7\u30f3\u30d7\u30eb\u3055\u3092\u8ffd\u6c42\u3057\u305f1 kHz\u306e\u5358\u4e00\u547d\u4ee4\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf", "- 700\u30c8\u30e9\u30f3\u30b8\u30b9\u30bf\u3067\u5b9f\u73fe\u3057\u305f\u30e6\u30cb\u30fc\u30af\u306a\u96fb\u5b50\u5de5\u4f5c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "- \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u5229\u7528\u3057\u305f\u300cHello World\u300d\u5b9f\u884c", "- Logisim\u3092\u4f7f\u3063\u305f\u56de\u8def\u8a2d\u8a08\uff1a\u4eca\u5f8c\u306ePCB\u4f5c\u6210\u306e\u53ef\u80fd\u6027"]}