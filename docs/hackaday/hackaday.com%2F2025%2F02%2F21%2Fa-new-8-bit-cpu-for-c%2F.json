{"pubDate": "2025-02-21T12:00:10", "original_title": "A New 8-bit CPU for C", "link": "https://hackaday.com/2025/02/21/a-new-8-bit-cpu-for-c/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/02/fosdem.png", "original_content": "It is easy to port C compilers to architectures that look like old minicomputers or bigger CPUs. However, as the authors of the Small Device C Compiler (SDCC) found, pushing C into a typical 8-bit CPU is challenging. Lessons learned from SDCC inspired a new 8-bit architecture, F8. This isnt just a theoretical architecture. You can find an example Verilog implementation in the SDDC project and on GitHub. The name choice may turn out to be unfortunate as there was an F8 CPU from Fairchild back in the 1970s that apparently few people remember.\nIn the video from FOSDEM 2025, [Phillip Krause] provides a nice overview of the how and why of F8. While it might seem odd to create a new 8-bit CPU when you can get bigger CPUs for pennies, you have to consider that 8-bit machines are more than enough for many jobs, and if you can squeeze one into an FPGA, it might be a good choice as opposed to having to get a bigger FPGA to hold your design and a 32-bit CPU.\n\nMany 8-bit computers struggle with efficient C code mainly because the data size is smaller than the width of a pointer. Doing things like adding two numbers takes more code, even in common situations. For example, suppose you have a pointer to an array, and each element of the array is four bytes wide. To find the address of the nth element, you need to compute: element_n = base_address + (n *4). On, say, an 8086 with 16-bit pointers and many 16-bit instructions and addressing modes can do the calculation very succinctly.\nOther problems you frequently run into with compiling code for small CPUs include segmented address spaces, dedicated registers for memory indexing, and difficulties putting wider items on a stack (or, for some very small CPUs, even having a stack, at all).\nThe wish list was to include stack-relative addressing, hardware 8-bit multiplication, and BCD support to help support an efficient printf implementation.\nKeep in mind, it isnt that you cant compile C for strange 8-bit architectures. SDDC is proof that you can. The question is how efficient is the generated code. F8 provides features that facilitate efficient binaries for C programs.\nWeve seen other modern 8-bit CPUs use SDCC. Writing C code for the notorious PIC (with its banked memory, lack of stack, and other hardships) was truly a surreal experience.", "title": "8\u30d3\u30c3\u30c8CPU\u306e\u65b0\u6642\u4ee3\uff1aF8\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7d39\u4ecb", "body": "8\u30d3\u30c3\u30c8CPU\u5411\u3051\u306eC\u30b3\u30f3\u30d1\u30a4\u30e9\u79fb\u690d\u306f\u96e3\u3057\u304f\u3001F8\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u8a95\u751f\u3002\u52b9\u7387\u7684\u306a\u30d0\u30a4\u30ca\u30ea\u751f\u6210\u3092\u76ee\u6307\u3059\u3002", "titles": ["8\u30d3\u30c3\u30c8CPU\u306e\u65b0\u6642\u4ee3\uff1aF8\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7d39\u4ecb", "C\u30b3\u30f3\u30d1\u30a4\u30e9\u30688\u30d3\u30c3\u30c8CPU\uff1aSDCC\u304b\u3089\u5b66\u3093\u3060\u6559\u8a13", "FPGA\u30678\u30d3\u30c3\u30c8CPU\u3092\u6d3b\u7528\u3059\u308b\u30e1\u30ea\u30c3\u30c8\u3068\u306f\uff1f", "\u52b9\u7387\u7684\u306aC\u30b3\u30fc\u30c9\u751f\u6210\u3092\u76ee\u6307\u3059F8\u306e\u7279\u5fb4", "\u96fb\u5b50\u5de5\u4f5c\u8005\u5fc5\u898b\uff018\u30d3\u30c3\u30c8\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u53ef\u80fd\u6027\u3068\u8ab2\u984c"]}