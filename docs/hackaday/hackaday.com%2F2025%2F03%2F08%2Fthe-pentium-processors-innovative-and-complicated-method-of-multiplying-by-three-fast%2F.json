{"pubDate": "2025-03-08T12:00:22", "original_title": "The Pentium Processor\u2019s Innovative (and Complicated) Method of Multiplying by Three, Fast", "link": "https://hackaday.com/2025/03/08/the-pentium-processors-innovative-and-complicated-method-of-multiplying-by-three-fast/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/08/turingtapes.jpg", "original_content": "[Ken Shirriff] has been sharing a really low-level look at Intels Pentium (1993) processor. The Pentiums architecture was highly innovative in many ways, and one of [Ken]s most recent discoveries is that it contains a complex circuit  containing around 9,000 transistors  whose sole purpose is to multiply specifically by three. Why does such an apparently simple operation require such a complex circuit? And why this particular operation, and not something else?\nLets back up a little to put this all into context. One of the feathers in the Pentiums cap was its Floating Point Unit (FPU) which was capable of much faster floating point operations than any of its predecessors. [Ken] dove into reverse-engineering the FPU earlier this year and a close-up look at the Pentiums silicon die shows that the FPU occupies a significant chunk of it. Of the FPU, nearly half is dedicated to performing multiplications and a comparatively small but quite significant section of that is specifically for multiplying a number by three. [Ken] calls it the x3 circuit.\nThe x3 circuit, a nontrivial portion of the Pentium processor, is dedicated to multiplying a number by exactly three and contains more transistors than an entire Z80 microprocessor.\nWhy does the multiplier section of the FPU in the Pentium processor have such specialized (and complex) functionality for such an apparently simple operation? It comes down to how the Pentium multiplies numbers.\nMultiplying two 64-bit numbers is done in base-8 (octal), which ultimately requires fewer operations than doing so in base-2 (binary). Instead of handling each bit separately (as in binary multiplication), three bits of the multiplier get handled at a time, requiring fewer shifts and additions overall. But the downside is that multiplying by three must be handled as a special case.\n[Ken] gives an excellent explanation of exactly how all that works (which is also an explanation of the radix-8 Booths algorithm) but it boils down to this: there are numerous shortcuts for multiplying numbers (multiplying by two is the same as shifting left by 1 bit, for example) but multiplying by three is the only one that doesnt have a tidy shortcut. In addition, because the result of multiplying by three is involved in numerous other shortcuts (x5 is really x8 minus x3 for example) it must also be done very quickly to avoid dragging down those other operations. Straightforward binary multiplication is too slow. Hence the reason for giving it so much dedicated attention.\n[Ken] goes into considerable detail on how exactly this is done, and it involves carry lookaheads as a key element to saving time. He also points out that this specific piece of functionality used more transistors than an entire Z80 microprocessor. And if that is not a wild enough idea for you, then how about the fact that the Z80 has a new OS available?", "title": "- \u30da\u30f3\u30c6\u30a3\u30a6\u30e0\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u9769\u65b0\u7684\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u306f\uff1f", "body": "Intel\u306ePentium\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u306f\u30013\u500d\u5c02\u7528\u306e\u8907\u96d1\u306a\u56de\u8def\u304c\u3042\u308a\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u306b\u5bc4\u4e0e\u3057\u3066\u3044\u308b\u3002", "titles": ["- \u30da\u30f3\u30c6\u30a3\u30a6\u30e0\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u9769\u65b0\u7684\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u306f\uff1f", "- \u306a\u305c\u30da\u30f3\u30c6\u30a3\u30a6\u30e0\u306f3\u306e\u4e57\u7b97\u306b\u7279\u5316\u3057\u305f\u56de\u8def\u3092\u6301\u3064\u306e\u304b\uff1f", "- x3\u56de\u8def\uff1a\u30da\u30f3\u30c6\u30a3\u30a6\u30e0\u30d7\u30ed\u30bb\u30c3\u30b5\u5185\u306e\u610f\u5916\u306a\u5c02\u9580\u6a5f\u80fd", "- \u6d6e\u52d5\u5c0f\u6570\u70b9\u30e6\u30cb\u30c3\u30c8\u306e\u79d8\u5bc6\uff1a\u7279\u5225\u306a3\u306e\u4e57\u7b97\u51e6\u7406", "- Z80\u30de\u30a4\u30af\u30ed\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u8d85\u3048\u308b\u30c8\u30e9\u30f3\u30b8\u30b9\u30bf\u6570\u306e\u8b0e"]}