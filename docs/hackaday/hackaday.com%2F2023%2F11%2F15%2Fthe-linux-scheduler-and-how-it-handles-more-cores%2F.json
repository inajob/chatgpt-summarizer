{"pubDate": "2023-11-16T03:00:57", "original_title": "The Linux Scheduler And How It Handles More Cores", "link": "https://hackaday.com/2023/11/15/the-linux-scheduler-and-how-it-handles-more-cores/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2017/01/optimizing-linux-featured.jpg", "original_content": "Sometimes you read an article headline and you find yourself re-reading it a few times before diving into the article. This was definitely the case for a recent blog post by [The HFT Guy], where the claim was made that the Linux kernel has for fifteen years now been hardlocked into not scheduling for more than 8 cores. Obviously this caused a lot of double-checking and context discovery on both Hacker News and the Level 1 Techs forum. So what is going on exactly? Did the Linux developers make an egregious error more than a decade ago that has crippled Linux performance to this day?\nWhere the blog author takes offence is in the claim made in the Linux kernel code and documentation that the base time slice scales with the number of CPUs (or cores), pointing out the commit in which the number of CPUs taken into account was limited to a maximum of 8. So far so good, even if at this point quite a few readers had already jumped to showing that their Linux system could definitely load more than 8 cores to 100%.\nAs pointed out by [sirn] on the Level 1 Techs forum, this limit was intentional, as discussed on the Linux Kernel mailing list (LKML) in November and December of 2009. Essentially  as also pointed out by a few commentators in the Hacker News thread  the granularity of task switching (time slices per second) should be higher with fewer cores, to give the impression of concurrency, which becomes less important with more cores, where diminishing returns  around the 8 CPU mark  mean that task switching overhead becomes more crucial.\nThat means that this hardcoded limit was put in there on purpose back in 2009, based on solid empirical evidence using many-core workstations and servers. It also shows that writing good schedulers is hard, which is why the LKML is famous for its Scheduler Wars and why you can pick alternative schedulers if you compile your own kernel. The current Completely Fair Scheduler (CFS) is also likely going to be replaced in the Linux kernel with the EEVDF scheduler as the default.", "title": "Linux kernel\u306e\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u306f15\u5e74\u9593\u306b\u308f\u305f\u308a8\u30b3\u30a2\u307e\u3067\u306e\u5236\u7d04\u304c\u3042\u3063\u305f\u7406\u7531", "body": "Linux\u30ab\u30fc\u30cd\u30eb\u306f15\u5e74\u4ee5\u4e0a\u306b\u308f\u305f\u308a\u30018\u3064\u4ee5\u4e0a\u306e\u30b3\u30a2\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3057\u306a\u3044\u3088\u3046\u306b\u30cf\u30fc\u30c9\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u4e3b\u5f35\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u610f\u56f3\u7684\u306a\u5236\u9650\u3067\u3042\u308a\u3001\u826f\u3044\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u66f8\u304f\u3053\u3068\u306f\u96e3\u3057\u3044\u3068\u793a\u3057\u3066\u3044\u307e\u3059\u3002", "titles": ["Linux kernel\u306e\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u306f15\u5e74\u9593\u306b\u308f\u305f\u308a8\u30b3\u30a2\u307e\u3067\u306e\u5236\u7d04\u304c\u3042\u3063\u305f\u7406\u7531", "Linux\u306e\u30bf\u30b9\u30af\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u306e\u5236\u7d04\u3068\u305d\u308c\u306b\u95a2\u3059\u308b\u8b70\u8ad6\u306e\u6982\u8981", "Linux\u30ab\u30fc\u30cd\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u30b3\u30a2\u5236\u7d04\u306e\u89e3\u8aac", "Linux\u306e\u30b3\u30a2\u6570\u5236\u7d04\u306e\u610f\u56f3\u3068\u305d\u306e\u80cc\u666f", "Linux kernel\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u5236\u7d04\u306e\u5909\u66f4\u306b\u3064\u3044\u3066\u306e\u8b70\u8ad6\u3068\u6b21\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u5c0e\u5165"]}