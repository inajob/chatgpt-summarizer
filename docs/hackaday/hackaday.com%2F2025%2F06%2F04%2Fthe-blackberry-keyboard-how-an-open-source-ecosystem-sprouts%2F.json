{"pubDate": "2025-06-04T17:00:28", "original_title": "The Blackberry Keyboard: How An Open-Source Ecosystem Sprouts", "link": "https://hackaday.com/2025/06/04/the-blackberry-keyboard-how-an-open-source-ecosystem-sprouts/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/05/hadoc_bbkb1_1.jpg", "original_content": "What could happen when you open-source a hardware project?\nNo, seriously. I hold a fair few radical opinions  one is that projects should be open-source to the highest extent possible. Ive seen this make miracles happen, make hackerdom stronger, and nourish our communities. I think we should be publishing all the projects, even if incomplete, as much as your opsec allows. I would make ritual sacrifices if they resulted in more KiCad projects getting published, and some days I even believe bullying people into open-sourcing their projects can be justified. My ideal universe is one where companies are unable to restrict schematics from people getting their hardware, no human should ever hold an electronics black box, by force if necessary.\nWhy such a strong bias? Ive seen this world change for the better with each open-source project, and worse with closed-source ones, its pretty simple for me. Trust me here  let me tell you a story of how a couple reverse-engineering efforts and a series of open-source PCBs have grown a tree of an ecosystem.\nA Chain Of Blackberry Hackers\n\nA big part of this story has been dutifully documented by [Michael] on his BBKB community website  its a meticulous summary of devices in the BBKB ecosystem. You should click on it and check it out, its a labor of love, aimed at introducing newcomers to the Blackberry keyboard-adorned device ecosystem, with a degree of care for fellow hackers thats worth appreciating. In this article, I am relying on [Michael]s research and interviews, but also on my own experience and research of Blackberry keyboard device community.\nAs [Michael] has found out, it all started in 2015, with a reverse-engineered replacement part keyboard for a Blackberry Q10. [JoeN] on Eevblog forums reverse-engineered the pinout, then posted the pinout and code to Arduino forums  for sufficiently devoted hackers to create with. Three years later, [WooDWorkeR] on our own Hackaday.io picked up the work, reverse-engineered the backlight, and made an Arduino Nano proof-of-concept. Things heated up when Hackaday superfriend [arturo182] picked up the mantle in 2018  starting off with a Q10 keyboard PMOD, then eventually reverse-engineering the touchpad-equipped Q20 keyboard, and as a culmination, building a standalone Q20 keyboard with a USB-C connection and a RP2040 controller.\nIf youve seen a few QWERTY handhelds, youve likely seen one thats downstream of [arturo182]s work. Recently, hes been big on creating castellated stamps  his RP2350 stamps make for great prototyping devices, can heavily recommend. Hes got a hardware company thing going on, called SolderParty, with a good few innovative products like the FlexyPins Ive covered before  I adore castellated modules, and I feel like hes mastered the craft of doing them.\nAlso, have you seen the Tanmatsu, and in particular, its custom QWERTY keyboard? That keyboard is one of his design  as of recent, hes got a side project of hacker-friendly keyboards going on, partly to replace the Q20s as they become more and more scarce on the new-old-stock market.\nBut back to the Blackberry: the Q20 keyboard really hit the news, going beyond the hacker world, if I were to guess, relying upon a fair bit of nostalgy for QWERTY handhelds. My personal belief is the more screen, the less soul, and when reading articles like the ones written about the Q20 keyboard, I can feel that in the air. I wasnt the only one, for sure  looks like Eric Migicovsky, founder of Pebble, felt it too.\nMy favourite theory of Blackberry keyboard device popularity. By [masklayer]Seen the Playdate? Its a handheld games console with a cult following, equipped with a widely beloved Sharp Memory LCD. Its reasonably easy to buy, with a decent 2.7 diagonal, and its got whole 400240 worth of resolution  nothing to write home about, but it very much is enough for a Linux terminal, and it can be comfortably driven a Pi Zeros SPI interface, whats with the whole 1 bit per pixel thing keeping it reasonably low-bandwidth. Youre picking up what Im putting down so far?\nBeep Beep (Watch Out For Trademarks)\nA few prototypes later, the SQFMI group released the Beepberry project, later known as Beepy. It had the essentials of a pocket computer  a Pi Zero, a Sharp LCD, a Q20 keyboard, an RP2040 tying its all together, a 2000 mAh cell and onboard battery management, plus, a few extra niceties like a side button and an RGB LED for notifications. What else? An integration with the Beeper project, a platform putting all your messaging service under a single roof. All files fully published on GitHub, including the KiCad files for the PCB. A Discord server with open invites. Minimum amount of software support. A rubberband and two pieces of double-sided tape keeping the battery, screen, and keyboard attached to the board. I think that was it?\nFirst batch was merely 50 pieces. The pricing did raise my eyebrow  $80 for a PCBA ($10), Pi Zero 2 W ($10-15), Sharp screen ($20), a Blackberry keyboard ($10), and a 2000mAh cell, for a BOM total of around $50-60, all put together and presumably tested? That sure flies in the face of all multiply BOM by three advice. Nevertheless, more and more people started receiving their Beepberries, sharing pictures online, coming together on the Discord and other social media, and playing around with their new cool hardware. It got a good few reviews, too, including a must-read review from our own [Tom Nardi]!\nThe projects journey wasnt seamless, of course, but the problems were few and far between. For instance, the Beepberry project became Beepy  because of Blackberry, legally speaking, raising an eyebrow at the naming decision; its the kind of legal situation weve seen happen with projects like Notkia. If you ever get such a letter, please dont hold any hard feelings towards the company  after all, trademarks can legally be lost if the company doesnt take action to defend them. From what I gather, BlackBerrys demands were low, as it goes with such claims  the project was renamed to Beepy going forward, and thats about it.\nUnity Through Discord\nPeople deride Discord servers as means of community building, and by now, Ive heard it all. I get it. Sadly, these days, youre going to either get on Discord, or be detached from a large chunk of the hacker community  and such a detachment is bad if you want to stay up to date with things. Dislike Discord as much as you want, and I can assure you that all the bad things about it are true, but thats how the game is played. So, if youre not on the Beepy Discord server and you like what Beepy stands for, youre missing out  thankfully, there is a Matrix integration, too.\nBeepy owners and fans alike joined the crowd. Each had something to contribute, with varying degrees of hardware and software competence, modulated by varying degrees of executive function, as it goes. Some people received their own Beepies, a few people got the KiCad project and ordered the files, and an unexpected amount of people breadboarded a Beepy! The barebones software support mightve had deterred people, but at the same time, it became a community obstacle to overcome.\nStarting from [arturo182]s Linux driver work and someone elses Linux drivers for the Sharp screen, a Linux experience started to grow. Initially, just the keyboard and touchpad were supported, but the support grew  both the RP2040 firmware and the Linux driver grew in functionality, changed names, picked up by one developer after another. Different people picked fonts to fit the screens low resolution, mapped extra keycodes to layers built upon the 40-something buttons of the Q20 keyboard and designed on-screen hints, worked on sleep modes (mostly implemented within the RP2040 by powering down the Pi Zero in particular), wrote like a dozen different helper scripts for the GPIO-exposed side button, and the apps, oh were there apps!\nPeople Found Purposes\nBeepy is no X server-carrying device, and you wont be running even LXDE on the Pi Zero and the 400240 mono screen. Under the sheets of a virtual terminal, however, theres heaps to work with. Of course, Linux has plenty of commandline apps  most of them aimed at a 8024 text screen resolution and not a character less, but many worked outright. SSH and email clients? Weather alert UIs? Beeper-compatible messengers? Music players? Games? ChatGPT interfaces? Pico8 and other game emulators? Doom? Of course people ran Doom. There were multiple attempts at lightweight GUIs with apps, too, not to foreshadow too much too early.\n\n\n\n\n\nBeepy became a hackers pocket friend. Maybe not everything was great all the time. The hardware had its sometimes-board-killing flaws, the GPIOs were quite tricky to hack on because of their layout, and the hardware features were pretty barebones. Software achievements and releases were somewhat uncoordinated, too  Discord just isnt great for discoverability; I can only tell you about all this because I went through two years worth of Discord server logs, and found a lot of cool stuff that people published only to be forgotten in the chat logs. If you ask me, this period of the community wouldve been turbocharged by a monthly Beepy newsletter, also published on on a blog so that outsiders could be linked to it, too.\nThe Beepy community has truly made Beepy grow into a veritable pocket device, pushing the limits of the Pi Zero, the screen, and the keyboard alike. By now, theres assortments of software you can run, documentation websites, Debian repositories running on GitHub infrastructure, a few lightweight Buildroot-based distros, dozens of 3D printed cases, and never a shortage of people coming into the Discord server asking when Beepy will be available for sale again.\nJust The Beep-ginning\nIt genuinely fascinates me how a chain of, spanning years, has come from keyboard pinout to a mass-manufactured open-source board with a big community  Q10 keyboard reverse-engineering on Eevblog forums led to wider adoption, which eventually led to Arturos Q20 board and its splash, and that in\u00a0 led to Beepy and its Discord server. Did it end here? Of course it didnt  I did say ecosystems, plural. Next week, youre getting a continuation article about the Beepy derivatives, because the story is just starting here.\nEnough about open-source  next article, you will hear about the phenomenon of closed-open-source, clones of high and low effort alike, and a pretty cool open-source Beepy successor. (Spoilers: Im biased because Im involved.) But for a start, well talk about a mis-used Texas Instruments boost regulator, a mis-calculated resistor, and a few overlooked datasheet parameters."}