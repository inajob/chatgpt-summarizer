{"pubDate": "2025-07-28T08:00:56", "original_title": "Commodore 64 on New FPGA", "link": "https://hackaday.com/2025/07/28/commodore-64-on-new-fpga/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/07/tang-nano-9k-main.jpeg", "original_content": "When it comes to getting retro hardware running again, there are many approaches. On one hand, the easiest path could be to emulate the hardware on something modern, using nothing but software to bring it back to life. On the other, many prefer to restore the original hardware itself and make sure everything is exactly as it was when it was new. A middle way exists, though, thanks to the widespread adoption of FPGAs which allow for programmable hardware emulation and [Jo] has come up with a new implementation of the Commodore 64 by taking this path.\nThe project is called the VIC64-T9K and is meant as a proof-of-concept that can run the Commodore 64\u2019s VIC-II video chip alongside a 6502 CPU on the inexpensive Tang Nano 9k FPGA. Taking inspiration from the C64_MiSTer project, another FPGA implementation of the C64 based on the DE10-Nano FPGA, it doesnt implement everything an original Commodore system would have had, but it does provide most of the core hardware needed to run a system. The project supports HDMI video with a custom kernel, and [Jo] has used it to get a few demos running including sprite animations.\nBuilt with a mix of Verilog and VHDL, it was designed as a learning tool for [Jo] to experiment with the retro hardware, and also brings a more affordable FPGA board to the table for Commodore enthusiasts. If youre in the market for something with more of the original look and feel of the Commodore 64, though, this project uses the original case and keyboard while still using an FPGA recreation for the core of the computer.", "title": "- \u30ec\u30c8\u30ed\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5fa9\u6d3b\u6cd5\uff1a\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u5fa9\u5143\u306e\u9078\u629e\u80a2", "body": "\u30ec\u30c8\u30ed\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5fa9\u6d3b\u306b\u306f\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u5fa9\u5143\u304c\u3042\u308a\u3001FPGA\u3092\u7528\u3044\u305fCommodore 64\u306e\u65b0\u5b9f\u88c5\u304c\u767b\u5834\u3002", "titles": ["- \u30ec\u30c8\u30ed\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5fa9\u6d3b\u6cd5\uff1a\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u5fa9\u5143\u306e\u9078\u629e\u80a2", "- VIC64-T9K\uff1aFPGA\u3067\u518d\u73fe\u3059\u308b\u30b3\u30e2\u30c9\u30fc\u30eb64\u306e\u65b0\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "- \u30b3\u30e2\u30c9\u30fc\u30eb64\u30de\u30cb\u30a2\u5fc5\u898b\uff01\u624b\u9803\u306aFPGA\u30dc\u30fc\u30c9\u306e\u7d39\u4ecb", "- HDMI\u5bfe\u5fdc\uff01\u30b3\u30e2\u30c9\u30fc\u30eb64\u306e\u30b3\u30a2\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092FPGA\u3067\u5b9f\u73fe", "- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5fa9\u5143\u3068\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u30a2\u30d7\u30ed\u30fc\u30c1"]}