{"pubDate": "2024-12-31T18:00:07", "original_title": "Sony Vaio Revived: Power, The Second 80%", "link": "https://hackaday.com/2024/12/31/sony-vaio-revived-power-the-second-80/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/04/PCBdesign.jpg", "original_content": "A bit ago, Ive told you about how the Sony Vaio motherboard replacement started, and all the tricks I used to make it succeed on the first try. How do you plan out the board, what are good things to keep in mind while youre sourcing parts, and how do you ensure you finish the design? This time, I want to tell you my insights about what it takes for your new board revision to stay on your desk until completion, whether its helping it not burn up, or making sure the bringup process is doable.\nUninterrupted, Granular Power\nPower was generally comfortable to design, but I did have to keep some power budgets in mind. A good exercise for safeguarding your regulators is keeping a .txt file where you log consumers and their expected current consumption on each board power rail, making sure all of your power regulators, connectors, and tracks, can handle quite a bit more than that current. Guideline: increase current by 20%-50% when figuring out the specs for switching regulators and inductors, and, multiply by 10-20% when figuring out conversion losses going between downstream and upstream rails.\nI did have a blunder in this department  not accounting for track current early on enough. I laid out the board using 0.5mm wide tracks for power  it looked spacious enough. Then, I put 0.5mm into a track current calculator and saw a harrowing temperature increase for the currents I was expecting. At that point in routing, it took some time to shift tracks around to accomodate the trace width I actually needed, which is to say, I shouldve calculated it all way way earlier. Thankfully, things went well in the end.\n\nApart from this, the power rails are a crucial aspect for bringup. How are you going to bringup your board? Which power rails need to be powered on so that the board can boot? Which signals do you need for every power rail, and what power rails do those signals depend on? What are the minimum required parts for the board to boot, and how quickly can you test every part before getting the next revision? My strategy was: I flash the EC with MicroPython, and hack at the code part by part I go. It worked surprisingly well for lowering the debugging entry level, and I will tell more about it later.\nA lot of bringup preparations are done during design, though. You have to think about typical usecases, and think how your hardware is going to react to them. What kind of state will the board enter after you insert the battery, or apply power from an external charger? Will you need to find a charger after you swap the battery? Is battery hotswap possible? The best way to understand all of it is to look through fundamental blocks of the circuit, and ask questions about their behaviour.\nThe questions can be pretty simple. Is the EC always powered no matter the input source? Can you detect when the power sources are too low, or too high? Whats the default states of the EN pins of every switching regulator, and what are the default state of GPIOs that control your regulator EN pins? Are any of these pins connected to GPIOs that might oscillate during your MCUs boot? Is the input DC-DC enabled by default? What about the battery charger?\nIn the end, I went through all the switching regulator datasheets, taking note of the EN pins. Closer to the end, Ive noticed that Id need to invert the EN pin of the input DC-DC with help of a FET if I wanted that regulator to be powered on by default  otherwise, Id get a chicken-and-egg problem if I were to try and power the board through its charger with missing or fully discharged battery. The FET barely fit on the board, but I massaged the tracks until it did.\nDouble-Sided Assembly\nHeres tips for bringup  you want to make sure you can access your EC at all times. In my case, I decided to mux the EC RP2040s USB onto the external port, allowing for a debug mode with a USB A-A cable  a cool feature, but I have definitely regretted restricting myself with it. Essentially, I locked myself into USB plug-unplug cycle during the early development, and it was hell to solve problems as a result. My advice is  plan for an extra USB-C connector or just USB testpoints on your board, so you can have a permanent unshakeable USB/SWD/UART/etc. link during the period while youre not quite sure how well your board works. In the end, I had to tombstone the two 0402 D+/D- resistors of the RP2040 EC and pull an external debug USB-C connector on three magnet wires  a finicky endeavour, worth avoiding if you can.\nOther than that hurdle, the bringup has been seamless, in no small part because I used the MicroPython REPL to probe through the board as I enabled parts of it. The REPL flow let me enable/disable power rails and query GPIOs dynamically during early bringup, mocking up code on the fly and immediately testing it on my hardware, and dynamically debug features like onboard shift registers, or buttons and LEDs on the Vaios case, wrapping them into code and putting them into the main.py file  the EC firmware grew larger and larger as I experimented. Theres something special about having a list of power rails at your fingertips, switching them off one by one, quickly tying program states into switches/buttons/LEDs as needed  it was a joy of a bringup experience.\nHow do you assemble such a double-sided board  really, how do you even stencil it? I planned for stenciling it from the very beginning, and, I distributed the components in a way that one side had way less components than the other  including more intricate components, like multi-pin ICs. One thing thats really helped, is using the JLCPCB stencil shipping cardboard to make a jig for the board with cutouts in it, letting me stencil the less-populated side once the more-populated side already had components soldered onto it. In a different life, I used to lasercut frames for this kind of endeavour  KiCad SVG export should be all you need.\nThe more-populated side got assembled using one of those tiny $20 hotplate, in the comfort of my home  Id hot air it, but my hot air gun fell and broke. I did have to borrow a hot air gun for assembling the second side, though  and assemble it very carefully. The main problem was the plastic connector on the less-populated side  I had to hot air it from the bottom, through the RP2040 EC and its supporting circuitry.\nLearning, Achievements, Expansion\nIve had some fun failure modes happen on this board. One, the failing 5V boost with subpar layout, which Ive already described in the switching regulator patch board article a couple months ago. Fun fact  its also verified a RPi SD card corruption theory of mine, confirming that noise on the input power rail easily propagates into the 3.3V rail powering the SD card, and results in SD card corruption; if youre getting SD card corruption issues, make sure to check the DC-DCs involved in your project!\nAnother one was specifically the output pin of the 3.3V EC regulator not getting soldered properly  somehow, it had a cold solder joint, and the EC was getting powered with around 1.23V, again, somehow; it mightve been due to my incessant multimeter probing, in hindsight. Im glad that this was the cold solder joint I had to figure out  as far as cold solder joints go, this one was seriously easy to debug, since just moving the probe between the 3.3V reg leg and an EC power capacitor was enough to find the spot the voltage drop happened.\nAgain, any burnt components on such an assembled board get expensive  not just monetarily, its also that you dont want to repeat the assembly effort. So, keep all metal and solder away during bringup, check all the connectors for accidental solder blobs many times over, and be very careful to. Tempted to hotplug internal connectors? Dont do it unless youve designed them to hotplug, or if the original manufacturer has  theres always pinout and connector considerations you have to mind. This goes doubly for high-current and high-voltage connectors.\n\n\n\n\nExpansion slots are wonderful if you can afford them  theres usually leftover GPIOs and some power rail capacity that you might want to later tap, and in my case, theres also heaps of free space inside of the laptop. I managed to fit two FFC sockets on this particular board, which have plenty of high-current power rails and GPIOs  my plan, personally, is to make a board that takes SATA or NVMe SSDs, and maybe even has expansions like GPS or extra WiFi  the case internals are spacious enough for all of those.\nLooking to put a new powerful motherboard into an old lovely chassis? Chances are, you can certainly do it  even if it takes time, trial-and-error, and help from some friends or internet strangers. I hope this project walkthrough can help you lots along the way, especially in being comfortable to take the first steps! Got a project stuck on the mental shelf? Get on with it  you will learn new cool things, and find new tricks to improvise. Me, Im getting a friendly device to carry in my pocket, and that alone is a wonderful experience.", "title": "\u65b0\u3057\u3044\u30de\u30b6\u30fc\u30dc\u30fc\u30c9\u306e\u8a2d\u8a08\u3068\u96fb\u6e90\u7ba1\u7406\u306e\u30dd\u30a4\u30f3\u30c8", "body": "\u30bd\u30cb\u30fc\u306eVaio\u30de\u30b6\u30fc\u30dc\u30fc\u30c9\u4ea4\u63db\u306e\u7d4c\u9a13\u3092\u5171\u6709\u3057\u3001\u8a2d\u8a08\u3084\u96fb\u529b\u7ba1\u7406\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u89e3\u8aac\u3002", "titles": ["\u65b0\u3057\u3044\u30de\u30b6\u30fc\u30dc\u30fc\u30c9\u306e\u8a2d\u8a08\u3068\u96fb\u6e90\u7ba1\u7406\u306e\u30dd\u30a4\u30f3\u30c8", "\u30dc\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u3068\u30c7\u30d0\u30c3\u30b0\u30d7\u30ed\u30bb\u30b9\u3092\u30b9\u30e0\u30fc\u30ba\u306b\u3059\u308b\u65b9\u6cd5", "\u30c0\u30d6\u30eb\u30b5\u30a4\u30c9\u57fa\u677f\u306e\u5b9f\u88c5\u6280\u8853\u3068\u6ce8\u610f\u70b9", "\u96fb\u5b50\u5de5\u4f5c\u306e\u5931\u6557\u4e8b\u4f8b\u3068\u305d\u306e\u89e3\u6c7a\u7b56", "\u62e1\u5f35\u30b9\u30ed\u30c3\u30c8\u6d3b\u7528\u6cd5: GPIO \u3068\u30d1\u30ef\u30fc\u30ec\u30fc\u30eb\u306e\u53ef\u80fd\u6027"]}