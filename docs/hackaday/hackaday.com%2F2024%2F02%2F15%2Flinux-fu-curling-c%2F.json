{"pubDate": "2024-02-15T18:00:46", "original_title": "Linux Fu: Curling C", "link": "https://hackaday.com/2024/02/15/linux-fu-curling-c/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "Sometimes, it pays to read the man pages of commands you use often. There might be a gem hidden in there that you dont know about. Case in point: Ive used curl (technically, cURL, but Im going to stick with curl) many times to grab data from some website or otherwise make a web request. But what happens if you want to do the same thing from a C program? Well, you could be lazy and just spawn a copy of curl. But it turns out curl has a trick up its sleeve that can help you. If only Id read the man page sooner!\nFirst Things\nThe simplest use of curl is to just name a URL on the command line. For example, consider this session:\n\n$ curl http://www.hackaday.com \nhtml\nheadtitle301 Moved Permanently/title/head\nbody\ncenterh1301 Moved Permanently/h1/center\nhrcenternginx/center\n/body\n/html\n\nThis isnt so useful because it is a 301 response (to send you to the https server, in this case). The -L option will make curl go get the page instead of the redirect. Try:\n$ curl -L http://www.hackaday.com\n\nYou probably want to pipe it through less or use the -o option to send the output to a file. If you want to see the details of the redirect, try:\n$ curl -i http://www.hackaday.com\nJack of All\nThats just the very simplest thing you can do with curl. It can do a bewildering array of protocols, including FTP, SMB, POP3, IMAP, SFTP, and many more. It can form different requests and manipulate cookies, certificates, and many other things.\nHowever, it turns out curl doesnt really do any of those things. It just reads your input and manipulates libcurl which is where all the smarts are. If you have done much with Linux, then you realize that means you could use libcurl, too. But how?\nLess Work, More Code\nYou could look up the details of libcurl. It isnt a secret. In fact, there are two ways to use the library. The easy interface is quick to use and great for most things. If you need heavy-duty multiple transfers and other exotica, you might have to use the multi API, which is a bit more complex.\nHowever, you dont even have to start there. The curl program itself will help you. Heres how it works. First, build a command line to get the results you want (just like we did earlier to read the front page of Hackaday). Then, add the libcurl option to the command line along with the name of a C source file (that probably doesnt already exist). The program will then write a skeletal piece of code to do the exact transfer you specified. You can compile in the usual way, just add -lcurl to the compile command.\nYou might have to tweak it a bit, and depending on your application, you might want to make some changes like modifying the URL. But youll get a great start.\nFor example, try:\n$ curl -L -o output.txt http://www.hackaday.com --libcurl hackcurl.c\nThe skeleton will have a main function (you might want to change that if you are adding it to another program). In that main will be code reflecting most of the options you set on the command line.\nThere will also be a comment showing you some things you might want to set that it cant figure out for you. Finally, theres a little driver that just performs the operation, does some cleanup, and then exits with a status code. Here are the options the boilerplate code suggests:\n\n/* Here is a list of options the curl code used that cannot get generated\nas source easily. You may choose to either not use them or implement\nthem yourself.\nCURLOPT_WRITEDATA set to a objectpointer\nCURLOPT_INTERLEAVEDATA set to a objectpointer\nCURLOPT_WRITEFUNCTION set to a functionpointer\nCURLOPT_READDATA set to a objectpointer\nCURLOPT_READFUNCTION set to a functionpointer\nCURLOPT_SEEKDATA set to a objectpointer\nCURLOPT_SEEKFUNCTION set to a functionpointer\nCURLOPT_ERRORBUFFER set to a objectpointer\nCURLOPT_STDERR set to a objectpointer\nCURLOPT_HEADERFUNCTION set to a functionpointer\nCURLOPT_HEADERDATA set to a objectpointer\n*/\n\nAn Example\nThe thing youll most often need to change is what happens to the data you read. The -o option isnt what you wanted, probably, and so curl doesnt build that into your C code. Of course, if you just wanted to send a request, that might be all you need. In my case, I will eventually want to know what the Hackaday server said back, so I have some work to do. Luckily, it isnt much.\nAt the start of the code (available online). I added a section near the top that includes a few headers and defines a BUFFER structure. This is just a string with a length. I also made a simple function to create a buffer and another that libcurl can call to send me data (writefn).\nThat last function is the most complex of the custom code. It looks at how much data curl received, reallocates the buffer, and saves it. I didnt intend this to be general purpose, so theres no provision for fancy editing to the buffer. Things come in. The buffer grows. Stuff gets put on the end of the buffer. Thats all.\nThe next part of the custom code appears near the end. It tells libcurl about the writefn function and asks it to pass the address of buff (the buffer) to that function. Obviously, libcurl doesnt care what that argument is. It just takes whatever you tell it and adds it to the call.\nOnce the boilerplate curl_easy_perform function returns successfully, the buff structure has the web page in it. For this example, I just print it out, which is boring, but you could, obviously, do whatever you wanted here.\nThats it, and youll find that for many tasks, this is sufficient. If it isnt, the comments and the documentation suggest other ways to configure the library similar to how this example sets the write function.\nMore Curl Tricks\nNeed your current IP address (thanks, Amazon):\ncurl checkip.amazonaws.com\nWant to check if a site is up?\ncurl -L -Is http://www.hackaday.com | head -n 1 | cut -d ' ' -f2\nNeed a QR code?\ncurl qrenco.de/www.hackaday.com\nCant remember the definitions for the word inductor?\ncurl dict.org/d:inductor\nOf course, you dont need C code to call these. If you do a quick search, youll find there are tons of services that curl can easily access from the command line or, using libcurl, from your programs, too.\nWant to test your curl chops? Weve looked at grabbing Hackaday automatically before."}