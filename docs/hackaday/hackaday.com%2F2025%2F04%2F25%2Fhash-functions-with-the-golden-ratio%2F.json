{"pubDate": "2025-04-26T02:00:30", "original_title": "Hash Functions with the Golden Ratio", "link": "https://hackaday.com/2025/04/25/hash-functions-with-the-golden-ratio/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/fibbonaci-main.png", "original_content": "In the realm of computer science, its hard to go too far without encountering hashing or hash functions. The concept appears throughout security, from encryption to password storage to crypto, and more generally whenever large or complex data must be efficiently mapped to a smaller, fixed-size set. Hashing makes the process of looking for data much faster for a computer than performing a search and can be incredibly powerful when mastered. [Malte] did some investigation into hash functions and seems to have found a method called Fibonacci hashing that not only seems to have been largely forgotten but which speeds up this lookup process even further.\nIn a typical hashing operation, the data is transformed in some way, with part of this new value used to store it in a specific location. That second step is often done with an integer modulo function. But the problem with any hashing operation is that two different pieces of data end up with the same value after the modulo operation is performed, resulting in these two different pieces of data being placed at the same point. The Fibonacci hash, on the other hand, uses the golden ratio rather than the modulo function to map the final location of the data, resulting in many fewer instances of collisions like these while also being much faster. It also appears to do a better job of using the smaller fixed-size set more evenly as a consequence of being based around Fibonacci numbers, just as long as the input data doesnt have a large number of Fibonacci numbers themselves.\nGoing through the math that [Malte] goes over in his paper shows that, at least as far as performing the mapping part of a hash function, the Fibonacci hash performs much better than integer modulo. Some of the comments mention that its a specific type of a more general method called multiplicative hashing. For those using hash functions in their code it might be worth taking a look at either way, and [Malte] admits to not knowing everything about this branch of computer science as well but still goes into an incredible amount of depth about this specific method. If youre more of a newcomer to this topic, take a look at this person who put an enormous bounty on a bitcoin wallet which shows why reverse-hashing is so hard.", "title": "- \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u30cf\u30c3\u30b7\u30e5\uff1a\u5f93\u6765\u306e\u30cf\u30c3\u30b7\u30e5\u3092\u8d85\u3048\u308b\u9769\u65b0", "body": "\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306f\u30c7\u30fc\u30bf\u691c\u7d22\u3092\u9ad8\u901f\u5316\u3057\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u30cf\u30c3\u30b7\u30e5\u306f\u885d\u7a81\u3092\u6e1b\u5c11\u3055\u305b\u308b\u512a\u308c\u305f\u624b\u6cd5\u3067\u3059\u3002", "titles": ["- \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u30cf\u30c3\u30b7\u30e5\uff1a\u5f93\u6765\u306e\u30cf\u30c3\u30b7\u30e5\u3092\u8d85\u3048\u308b\u9769\u65b0", "- \u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306e\u65b0\u305f\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\uff1a\u885d\u7a81\u3092\u6e1b\u3089\u3059\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u624b\u6cd5", "- \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\uff01\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u30cf\u30c3\u30b7\u30e5\u306e\u6570\u5b66\u7684\u88cf\u4ed8\u3051", "- \u30cf\u30c3\u30b7\u30e5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9032\u5316\uff1a\u30e2\u30b8\u30e5\u30ed\u6cd5\u3068\u306e\u6bd4\u8f03", "- \u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306e\u8b0e\u3092\u89e3\u304f\uff1a\u30ea\u30d0\u30fc\u30b9\u30cf\u30c3\u30b7\u30e5\u306e\u96e3\u3057\u3055\u3068\u306f"]}