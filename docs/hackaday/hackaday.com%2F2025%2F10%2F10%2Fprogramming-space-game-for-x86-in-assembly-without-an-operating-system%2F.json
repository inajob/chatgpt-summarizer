{"pubDate": "2025-10-11T05:00:28", "original_title": "Programming Space Game for x86 in Assembly Without an Operating System", "link": "https://hackaday.com/2025/10/10/programming-space-game-for-x86-in-assembly-without-an-operating-system/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/Space-Game-for-x86-banner.png", "youtube": "https://www.youtube.com/watch?v=ZFHnbozz7b4", "original_content": "In this video our hacker [Inkbox] shows us how to create a computer game that runs directly on computer hardware, without an operating system!\n[Inkbox] briefly explains what BIOS is, then covers how UEFI replaces it. He talks about the genesis of UEFI from Intel in the late 90s. After Intels implementation of UEFI was made open source it got picked up by the TianoCore community who make tools such as the TianoCore EDK II.\n[Inkbox] explains that the UEFI implementation provides boot services and runtime services. Boot services include things such as loading memory management facilities or running other UEFI applications, and runtime services include things like system clock access and system reset. In addition to these services there are many more UEFI protocols that are available.\n\n[Inkbox] tells us that when an x64 CPU boots it jumps to memory address 0xfffffff0 that contains the initialization instructions which will enter protected mode, verify the firmware, initialize the memory, load the storage and graphics drivers, then run the UEFI Boot Manager. The UEFI Boot Manager will in turn load the appropriate EFI application, such as the firmware settings manager application (the BIOS settings), Windows Boot Manager, or GRUB. In this video we make our very own EFI application that the UEFI Boot Manager can be configured to load and run.\nThe system used for development and testing has a AMD Ryzen AI 9 HX 370 CPU and 32GB DDR5 RAM.\nHaving explained how everything gets started [Inkbox] goes on to explain how to write and deploy the assembly language program which will load and play the game. [Inkbox] shows how to read and write to the console and mentions that he did his testing on QEMU with an image on an external USB thumbdrive. He goes on to show how to use the system time and date facilities to get the current month. When trying to read nanoseconds from the system clock he ended up needing to refer to the UEFI Specification Release 2.10 (2.11 is latest as of this writing).\nIn the rest of the video [Inkbox] does some arithmetic for timing, uses LocateProtocol to load the graphics output provider, configures an appropriate video mode, writes to the screen using BLT operations, and makes the program run on multiple CPU cores (the CPU used has 24). At last, with some simple graphics programming and mouse input, [Inkbox] manages to get Space Game for x86 to run.\nIf youre interested in knowing more about UEFI a good place to start is What\u2019s The Deal With UEFI?\n", "title": "- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u76f4\u7d50\uff01OS\u306a\u3057\u3067\u52d5\u4f5c\u3059\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b2\u30fc\u30e0\u306e\u4f5c\u308a\u65b9", "body": "\u30cf\u30c3\u30ab\u30fc\u304cUEFI\u3092\u5229\u7528\u3057\u305f\u30b2\u30fc\u30e0\u5236\u4f5c\u6cd5\u3092\u89e3\u8aac\u3002BIOS\u3068\u306e\u9055\u3044\u3084\u8a73\u7d30\u3092\u7d39\u4ecb\u3002", "titles": ["- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u76f4\u7d50\uff01OS\u306a\u3057\u3067\u52d5\u4f5c\u3059\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b2\u30fc\u30e0\u306e\u4f5c\u308a\u65b9", "- UEFI\u306e\u57fa\u790e\u3068BIOS\u306e\u9032\u5316\u3092\u5b66\u307c\u3046", "- \u81ea\u4f5cEFI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u30b2\u30fc\u30e0\u3092\u8d77\u52d5\u3059\u308b\u65b9\u6cd5", "- \u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067\u30b2\u30fc\u30e0\u3092\u958b\u767a\u3059\u308b\u5b9f\u8df5\u30ac\u30a4\u30c9", "- \u591a\u30b3\u30a2CPU\u3092\u6d3b\u7528\u3057\u305f\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580"]}