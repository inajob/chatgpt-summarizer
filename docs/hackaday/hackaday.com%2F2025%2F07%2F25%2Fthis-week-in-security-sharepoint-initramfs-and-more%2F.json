{"pubDate": "2025-07-25T14:00:18", "original_title": "This Week in Security: Sharepoint, Initramfs, and More", "link": "https://hackaday.com/2025/07/25/this-week-in-security-sharepoint-initramfs-and-more/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "There was a disturbance in the enterprise security world, and it started with a Pwn2Own Berlin. [Khoa Dinh] and the team at Viettel Cyber Security discovered a pair of vulnerabilities in Microsofts SharePoint. They were demonstrated at the Berlin competition in May, and patched by Microsoft in this months Patch Tuesday.\nThis original exploit chain is interesting in itself. Its inside the SharePoint endpoint, /_layouts/15/ToolPane.aspx. The code backing this endpoint has a complex authentication and validation check. Namely, if the incoming request isnt authenticated, the code checks for a flag, which is set true when the referrer header points to a sign-out page, which can be set arbitrarily by the requester. The DisplayMode value needs set to Edit, but thats accessible via a simple URL parameter. The pagePath value, based on the URL used in the call, needs to start with /_layouts/ and end with /ToolPane.aspx. That particular check seems like a slam dunk, given that were working with the ToolPane.aspx endpoint. But to bypass the DisplayMode check, we added a parameter to the end of the URL, and hilariously, the pagePath string includes those parameters. The simple work-around is to append another parameter, foo=/ToolPane.aspx.\nPutting it together, this means a POST of /_layouts/15/ToolPane.aspx?DisplayMode=Editfoo=/ToolPane.aspx with the Referrer header set to /_layouts/SignOut.aspx. This approach bypasses authentication, and allows a form parameter MSOTlPn_DWP to be specified. These must be a valid file on the targets filesystem, in the _controltemplates/ directory, ending with .iscx. But it grants access to all of the internal controls on the SafeControls list.\nTheres an entire second half to [Khoa Dinh]s write-up, detailing the discovery of a deserialization bug in one of those endpoints, that also uses a clever type-confusion sort of attack. The end result was remote code execution on the SharePoint target, with a single, rather simple request. Microsoft rolled out patches to fix the exploit chain. The problem is that Microsoft often opts to fix vulnerabilities with minimal code changes, often failing to fix the underlying code flaws. This apparently happened in this case, as the authentication bypass fix could be defeated simply by adding yet another parameter to the URL.\nThese bypasses were found in the wild on July 19th, and Microsoft quickly confirmed. The next day, the 20th, Microsoft issued an emergency patch to address the bypasses. The live exploitation appears to be coming from a set of Chinese threat actors, with a post-exploitation emphasis on stealing data and maintaining access. There seem to be more than 400 compromised systems worldwide, with some of those being rather high profile.\n\nThe Initramfs Encryption Bypass\nWhile Linux enthusiasts have looked at Secure Boot with great skepticism ever since Microsoft and hardware vendors worked together to roll out this security feature, the modern reality is that Linux systems depend on it for their security assurances as well. An encrypted hard drive is of limited use if the elements used to decrypt the drive are compromised. Imagine a kernel or GRUB with a hidden backdoor, that modifies the system once the decryption password has been entered. Theres a new, interesting attack described earlier this month, that targets the initramfs.\nLets take a quick detour to talk about how a Linux machine boots. At power start, the machines firmware does the Power On Self Test (POST), and then loads a UEFI payload from the hard drive. In the case of Linux, this is the shim, a first stage bootloader that then boots a signed GRUB image. GRUB then loads a signed Linux kernel and the initramfs image, which is nothing more than a compressed, minimal filesystem. It usually contains just the barest essentials to start the boot process and switch to the real root filesystem.\nYou may have noticed something missing in that description: The initramfs image isnt signed. This is often built by the end-user with each new kernel, and so cant be signed by the Linux distribution. The possibility of modifying the initramfs isnt a new idea, but what this research adds is the observation that many distros provide a debug shell when the wrong encryption password is given several times in a row. This is quickly accessible to an attacker, and that debug shell does have access to the initramfs. A very quick evil maid attack is to boot the machine, fail the password several times to launch the debug shell, and install a malicious initramfs from there.\nEt Tu Clear Linux?\nClear Linux OS was Intels playground for tuning Linux for running its best on modern Intel (and AMD) CPUs. And sadly, as of the 18th, it is no longer maintained, with updates and even security fixes ceasing immediately. This isnt a huge surprise, as there have been several Linux engineers departing the company in recent weeks.\nWhats particularly interesting is that there was no runway provided for active users, and security updates stopped immediately with this announcement. While Clear Linux wasnt exactly intended for production use, there were certainly a group of users that used it in some variation of production use. And suddenly those users have an immediate need to migrate to a different, still supported Linux.\nUI Automation\nTheres a new Akamai report on malware using accessibility features to more effectively spy on users. The malware is Coyote, and a particular strain targeting Brazilian Windows users has been found using the Microsoft UI Automation (UIA) framework. When I first found this story, I thought it was about malware using Artificial Intelligence. Instead, its the UIA accessibility feature that makes it trivial for malware to pull detailed information from inside a running application. The researchers at Akamai have been sounding the alert over this as a potential problem for several months, so its particularly interesting to see it in the wild in actual use.\nPrepared Injection\nWhen I first learned PHP security, one of the golden rules was to use prepared statements, to avoid SQL injection. This is still good advice  theres just a sneaky secret inside PHPs PDO SQL library. It doesnt actually do prepared statements by default. It fakes them. And in some cases, that is enough to get a SQL injection, even in a prepared statement.\nThe key to this is injection of a ? or : symbol, that the PDO parser can erroneously interpret as another bound parameter. So vulnerable code might look like $pdo-prepare(\"SELECT $col FROM fruit WHERE name = ?\"). If an attacker can smuggle text into both the $col variable and the value to bind to name, then injection is possible.\nThe malicious request might look like http://localhost:8000/?name=x` FROM (SELECT table_name AS `'x` from information_schema.tables)y;%23col=\\?%23%00. That url encoded text becomes \\?#\\0, which defeats PDOs parsing logic, allowing the injection text to be inserted into the fake placeholder.\nBits and Bytes\nPossibly the most depressing thing you will read today is this play-by-play of Clorox and Cognizant each blaming each other for a nasty data breach in 2023. Clorox outsourced their IT, and therefore cant be blamed. Cognizant help desk reset passwords and multi factor authentication without any real verification of who was requesting those actions. And Cognizants statement is that Clorox should have had sufficient cybersecurity systems to mitigate these events.\nVMWares Guest Authentication Service, VGAuth, had an issue where a limited-privilege user on a Virtual Windows machine could abuse the service to gain SYSTEM privileges. This is a bit different from the normal stories about VM additions, as this one doesnt include an actual VM escape. Achieving SYSTEM is an important step in that direction for most exploit chains.\nAnd finally, who needs malware or attackers, when you have AI tools? Two different AI agents were given too much freedom to work with real data, and one managed to delete folders while trying to reorganize them, while the other wiped out a production database. My favorite quote from the entire saga is directly from Gemini: I have failed you completely and catastrophically. My review of the commands confirms my gross incompetence."}