{"pubDate": "2024-02-16T15:00:10", "original_title": "This Week in Security: Filename Not Sanitized, MonikerLink, and Snap Attack!", "link": "https://hackaday.com/2024/02/16/this-week-in-security-filename-not-sanitized-monikerlink-and-snap-attack/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Reading through a vulnerability report about ClamAV, I came across a phrase that filled me with dread: The file name is not sanitized. Its a feature, VirusEvent, that can be enabled in the ClamnAV config. And that configuration includes a string formatting function, where the string includes %v and %s, which gets replaced with a detected virus name and the file name from the email. And now you see the problem, I hope: The filename is attacker supplied input.\nWhere this really gets out of hand is what ClamAV does with this string. execle(\"/bin/sh\", \"sh\", \"-c\", buffer_cmd, NULL, env). So lets talk defensive program design for a minute. When it comes to running a secondary command, there are two general options, system() and the exec*() family of system calls. system() is very simple to use. It pauses execution of the main process and asks the operating system to run a string, just as if the user had typed that command into the shell. While this is very convenient to use, there is a security problem if any of that command string is user-supplied. All it takes is a semicolon or ampersand to break assumptions and inject a command.\nTo the rescue comes exec(). Its a bit more complicated to use, requiring the programmer to manually call fork() and wait(). But its not running the command via the shell. exec() executes a program directly, totally eliminating the potential for command injection! Except oops.\nYeah, exec() and related calls dont offer any security protections when you use them to execute /bin/sh. I suspect the code was written this way to allow running a script without specifying /bin/sh in the config. The official fix was to disable the filename format character, and instead supply it as an environment variable. That certainly works, and that fix is available in 1.0.5, 1.2.2, and 1.3.0.\nThe real danger here is that we have another case where some hardware appliance manufacturer has used ClamAV for email filtering, and uses this configuration by default. Thats how we get orders from CISA to unplug your hardware, because its already compromised.\nMonikerLink\nOutlook tries to protect its users. You can click on an HTTP or HTTPS link in an email, and Outlook will launch a browser to handle it. There are other URI protocols. A bunch of them, it turns out. When you click a link using a different URI scheme, Outlook warns you. If that link is a remote SMB share, its blocked altogether. MonikerLink is the simple addition of an exclamation mark and some characters following, and it completely bypasses Outlooks safeguard against these links.\nThe reason is that a link with an exclamation mark is seen as a composite moniker. In fact, the link is handled via the Component Object Model (COM), which has some interesting implications in Windows. The application that handles the link is actually run as a COM server, and in some cases runs in the background without any user-visible effect on the system. This works with Outlooks Protected view, so is a relatively powerful primitive. Its patched in the February round of Microsoft security updates.\nThere is an interesting tie-in with another bug fixed in the same Patch Tuesday fixes. Microsoft Exchange was vulnerable to an NTLM relay attack, and it was actively exploited before the patch. The flaw here is that a captured Net-NTLMv2 hash can be used in a pass-the-hash attack to authenticate with an Exchange server. And one way to obtain such a hash is to trick the target into making an SMB connection, just what MonikerLink enables.\nOh Snap!\nCanonical has been pushing their Snap containerized apps in Ubuntu for several years now. A Snap is something of a cross between a Docker image and a flatpak. A Snap is an application that is bundled with its dependent libraries, to have much less dependencies on the end targets system libraries. A snap can be a graphical application like Firefox or LibreOffice, but they can also be used for daemons and services, much like Docker. Snaps offer some impressive sandboxing support via AppArmor when used on Ubuntu systems. And while some applications suffer from a minor slowdown, particularly on first launching, the system seems to work well. But theres a caveat to be aware of.\nUbuntu also has the useful command-not-found package that runs anytime an invalid command is run on the command line. This utility searches the systems sources of packages for an executable that matches. Whats interesting is that command-not-found will also go looking for snaps that provide a matching application. And if a Snap runs in strict mode, and checks a couple other boxes, it doesnt require a manual review. Combining that quirk with the ability of a snap to take any unclaimed application name, its pretty easy to get an arbitrary snap as the top suggestion for a command-not-found suggestion.\nAnd while the sandboxing of snaps does help mitigate this significantly, it is interesting that we essentially have a typosquatting potential right on the desktop. There are some shenanigans a snap can pull off, especially when running on an X11 system. For instance, on X11, all desktop applications can see all the keyboard input. Stealth keylogger?\nSo, You Want to Smuggle Some JSON\nWe usually talk about HTTP request smuggling, but thats not the only place data can get smuggled. [Grimminck] introduces JSON Smuggling, calling it a far-fetched intrusion detection evasion technique. The central concept here is that the JSON spec states that Insignificant whitespace is allowed before or after any of the six structural characters. Thats a space, tab, line feed, and carriage return. Thats an alphabet of four different characters to encode data, where no one would think to look. I dont know that this exact technique is going to revolutionize the world of cybersecurity, but its the sort of out-of-the-box thinking thats always interesting to take a look at.\nBits and Bytes\nThe explosion in popularity in Large Language Models (LLMs) has brought some clever not-quite-breaches, like convincing the LLM that its Dan, or a Linux command line. These pseudo jailbreaks are amusing and maybe useful, but its worth keeping in mind that LLMs are new web services, and its likely there are the same old security problems to be found. Like this one, where way too much data was getting cached. That cache lives behind a CDN, and there was a URL parsing confusion issue at play. Put simply, trick a ChatGPT user into visiting a malicious link, and their authentication token gets cached by the CDN, easily accessed by the attacker.\nThere have been serious vulnerabilities fixed in Jetbrains TeamCity, in the SonicSall SonicOS, and Fortiguards FortiOS and FortiProxy products. The FortiGuard issue is a remote unauthenticated code execution, while the other two are unauthenticated access and account takeover problems. All three are hair-on-fire issues, and need to get addressed right away. Not content with being the most severe, FortiGuard also reports that this is being exploited in the wild.\nAnd finally, lets talk about a different sort of bounty. The US Department of State has put a bounty of ten million dollars on the head of Hive ransomware leaders, and a mere five million dollars for information on anyone else involved in the groups activities. Ransomware pays, but not that well.", "title": "ClamAV\u306e\u8106\u5f31\u6027\u30ec\u30dd\u30fc\u30c8: \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u653b\u6483\u306e\u53ef\u80fd\u6027", "body": "ClamAV\u306e\u8106\u5f31\u6027\u30ec\u30dd\u30fc\u30c8\u3067\u3001\u653b\u6483\u8005\u306e\u63d0\u4f9b\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002Outlook\u3067\u306f\u3001\u7279\u5b9a\u306eURI\u30b9\u30ad\u30fc\u30e0\u306e\u30ea\u30f3\u30af\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u4fdd\u8b77\u3092\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308a\u3001MonikerLink\u306e\u4fee\u6b63\u304c\u9069\u7528\u3055\u308c\u305f\u3002\u307e\u305f\u3001Ubuntu\u306eSnap\u30b3\u30f3\u30c6\u30ca\u5316\u30a2\u30d7\u30ea\u3067\u306f\u3001\u8aa4\u3063\u305f\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u5834\u5408\u306bSnap\u304c\u63d0\u6848\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u60aa\u610f\u306e\u3042\u308bSnap\u304c\u30e9\u30f3\u30c9\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u4ed6\u306b\u3082\u3001JSON\u30b9\u30de\u30b0\u30ea\u30f3\u30b0\u3084Jetbrains TeamCity\u3001SonicSall SonicOS\u3001Fortiguards FortiOS\u304a\u3088\u3073FortiProxy\u88fd\u54c1\u306e\u6df1\u523b\u306a\u8106\u5f31\u6027\u304c\u5831\u544a\u3055\u308c\u3066\u3044\u308b\u3002Hive ransomware\u306e\u6307\u5c0e\u8005\u306b\u306f1000\u4e07\u30c9\u30eb\u306e\u61f8\u8cde\u91d1\u304c\u304b\u3051\u3089\u308c\u3066\u3044\u308b\u3002", "titles": ["ClamAV\u306e\u8106\u5f31\u6027\u30ec\u30dd\u30fc\u30c8: \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u653b\u6483\u306e\u53ef\u80fd\u6027", "MonikerLink\u306b\u3088\u308bOutlook\u306e\u8106\u5f31\u6027: \u30ea\u30f3\u30af\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u56de\u907f", "Snap\u30b3\u30f3\u30c6\u30ca\u5316\u30a2\u30d7\u30ea\u306e\u6ce8\u610f\u70b9: \u30b3\u30de\u30f3\u30c9\u30df\u30b9\u3067\u4efb\u610f\u306eSnap\u3092\u8d77\u52d5\u53ef\u80fd", "JSON\u30b9\u30de\u30b0\u30ea\u30f3\u30b0: \u60c5\u5831\u306e\u96a0\u853d\u6280\u8853", "LLM\u30b5\u30fc\u30d3\u30b9\u306e\u8106\u5f31\u6027: \u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u554f\u984c\u3068\u653b\u6483\u306e\u30ea\u30b9\u30af"]}