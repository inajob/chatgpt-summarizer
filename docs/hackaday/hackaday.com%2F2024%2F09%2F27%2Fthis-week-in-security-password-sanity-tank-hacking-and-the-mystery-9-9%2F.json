{"pubDate": "2024-09-27T14:00:40", "original_title": "This Week in Security: Password Sanity, Tank Hacking, And The Mystery 9.9", "link": "https://hackaday.com/2024/09/27/this-week-in-security-password-sanity-tank-hacking-and-the-mystery-9-9/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "It looks like theres finally hope for sane password policies. The US National Institue of Standards and Technology, NIST, has released a draft of SP 800-63-4, the Digital Identity Guideline.\nTheres password guidance in there, like SHALL NOT impose other composition rules (e.g., requiring mixtures of different character types) for passwords and SHALL NOT require users to change passwords periodically. NIST approved passwords must be at least 8 characters long, with a weaker recommendation of at least 15 characters. Security questions like name of first pet get the axe. And its strongly recommended that all ASCII and Unicode characters should be acceptable for passwords.\nThis is definitely moving in the right direction. NIST guidelines are only binding for government services and contractors, though they do eventually get picked up by banks and other industries. So theres hope for sane password policies eventually.\nTank Hacking\nResearchers at Bitsight are interested in infrastructure security, and they opted to take a closer look at Automatic Tank Gauging (ATG) systems. Those are found at gas stations, as well as any other facility that needs automated monitoring of liquids or gasses in a tank. There is an actual ATG message format, originally designed for RS-232 serial, and woefully unprepared for the interconnected present. The protocol allows for an optional security code, but it maxes out at only six alpha-numeric characters.\nAmong the vulnerabilities getting announced today, we have a pair of CVSS 10 command injection flaws, a quartet of 9.8 authentication bypass flaws, with one of those being a hardcoded credential  AKA a backdoor. The other CVSS9+ flaw is a SQL injection, with a trio of slightly less serious flaws.\nThe really interesting question is what could theoretically be done with admin access and escape to shellcode in one of these systems? Theres the obvious path of Denial of Service. Once you have root, just delete files, flash random noise over the firmware, and walk away. The more interesting approach is to make changes that have physical consequences. If a fuel tank is reprogrammed to indicate that holds twice the volume, will it overflow? Researchers realized that relays have a maximum operation rate, and driving them on and off at faster rates has interesting effects  glowing and letting the magic smoke out.\nMore Tank Hacking?\nAlso this week is the story of a Kansas water treatment plant that has gone to manual mode after a cyberattack. Its not clear whether this was actually an aimed attack at infrastructure, or just a ransomware attack that is impacting the water treatment facility as a side-effect.\nThe Linux Mystery 9.9 CVE\nThis week weve been watching a story develop after [Simone Margaritelli] sounded the warning about a very serious GNU/Linux vulnerabiltiy on Twitter/X. The claim was a CVSS 9.9 in all Linux systems. Well apparently its time, because the details have dropped, and its a wild ride.\n\n* Unauthenticated RCE vs all GNU/Linux systems (plus others) disclosed 3 weeks ago.* Full disclosure happening in less than 2 weeks (as agreed with devs).* Still no CVE assigned (there should be at least 3, possibly 4, ideally 6).* Still no working fix.* Canonical, RedHat and\u2026 pic.twitter.com/N2d1rm2VeR\n Simone Margaritelli (@evilsocket) September 23, 2024\n\nSo first, the actual vulnerabilities: Part of the Common Unix Printing System (now just CUPS) is cups-browsed, a helper daemon that automatically installs printers discovered on the local network. This binds to all IP addresses on UDP port 631, and an incoming UDP packet will trigger a printer install. The quirk here is that this incoming request can include an arbitrary URL as the source of the IPP printer driver information. That IPP data isnt sanitized, allowing for arbitrary information upload and subsequent file creation with that arbitrary data. The cherry on top is the foomatic-rip driver that includes the helpful feature of running a shell command as part of the printing process. Oh, and to be clear, the CVSS 9.9 isnt strictly accurate, because it does require a user interaction to print to the malicious printer, to trigger the code execution.\nNow heres the tricky question: How many of those quirks are vulnerabilities? Cups-browsed seems obviously architected without an authentication layer, and therefore not at all intended to be exposed to the Internet. Downloading an arbitrary IPP file seems to be working as intended, and the FoomaticRIPCommandLine is a documented feature, not a vulnerability.\nAnd yet, pretty obviously, a printer on the local network shouldnt be able to trigger arbitrary code execution when printing to it, especially when its so easy for any computer to fake being a printer. Its very surprising that there are over 100,000 systems that expose UDP port 631 and the cups-browsed service to the Internet. I look forward to other researchers double-checking that claim. If it wasnt obvious, dont expose CUPS to the Internet. It shouldnt have taken a CVE to make that abundantly clear. That is probably why it was so hard for [Simone] to get the CUPS developers to take this seriously.\nAs per the Red Hat notice, you can check your Linux systems for this issue by running sudo systemctl status cups-browsed and check a remote machine using sudo nmap -sU -p 631 -v ip.address.of.machine watching for 631/udp open|filtered ipp in the output. There is already a Proof of Concept that has leaked, so do check and pull the plug on any systems that expose this service.\nThe Other One\nThe 9.9 CVE was just a bit of a letdown, but we do have CVE-2024-20017, a confirmed high severity vulnerability in MediaTeks wappd daemon that seems to weigh in at 9.8.\nThe vulnerability is specifically in the handling of the Security Block message thats part of WiFi roaming handoffs. wappd allocates a fixed-size buffer, and doesnt validate the actual message size before copying that data. This can overflow by up to 1433 bytes, and thats certainly enough to trigger full RCE. Theres Proof of Concept code available, so watch for updates for Wireless gear.\nBits and Bytes\nKaspersky has done something unexpected, pulling a switcheroo. Users who still had Kaspersky installed have found UltraAV now automatically installed on their machines. Its reported that Kaspersky was sending email notices out earlier this month that the update was coming.\nTheres a really impressive chain of tricks that redirects from a Youtube URL to an arbitrary Google Docs URL. That may not sound particularly interesting, but the whole chain of redirects means that a page that looks like a Google Form with a simple poll could actually grant permissions to arbitrary Google Drive files on submit. Google paid a juicy $4133.70 for the find, and rolled the fix out on the same day.\nChatGPT has a new feature, long-term memory. The idea is that your conversations with the LLM can become part of the training data, making the model even more useful as you use it. There is a really powerful feature available in ChatGPT now, that the LLM can pull data from the Internet in real time. Turns out if you can get one of these instances to pull some manipulated data, the model can keep it in long term storage. The real trick is that this injection can convince the model to keep revisiting an arbitrary URL, leaking data. Impressive.\nAnd finally, the Kia dealer and owners websites leak a bit too much data. With nothing more than the cars VIN, an attacker can generate a fake dealer token, and demote and replace the previous owner. From there, its trivial to remote start, honk, or otherwise mess with the vehicle. It wasnt great, but Kia got it fixed over a month ago.", "title": "NIST\u306e\u65b0\u3057\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u306b\u3064\u3044\u3066", "body": "\u7c73\u56fd\u56fd\u7acb\u6a19\u6e96\u6280\u8853\u7814\u7a76\u6240\uff08NIST\uff09\u304cSP 800-63-4\u306e\u8349\u6848\u3092\u516c\u958b\u3057\u3001\u5065\u5168\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u306e\u5e0c\u671b\u304c\u3042\u308b\u30028\u6587\u5b57\u4ee5\u4e0a\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001ASCII\u3068Unicode\u306e\u6587\u5b57\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002\u9280\u884c\u306a\u3069\u4ed6\u306e\u7523\u696d\u3082NIST\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u3092\u63a1\u7528\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002", "titles": ["NIST\u306e\u65b0\u3057\u3044\u30d1\u30b9\u30ef\u30fc\u30c9\u30dd\u30ea\u30b7\u30fc\u306b\u3064\u3044\u3066", "\u30ac\u30b9\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u306eATG\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u30cf\u30c3\u30ad\u30f3\u30b0", "\u30ab\u30f3\u30b6\u30b9\u5dde\u306e\u6c34\u51e6\u7406\u30d7\u30e9\u30f3\u30c8\u306e\u30b5\u30a4\u30d0\u30fc\u653b\u6483", "Linux\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3059\u308b\u6df1\u523b\u306a\u8106\u5f31\u6027\u3068\u305d\u306e\u5371\u967a\u6027", "Kaspersky\u306e\u4e88\u671f\u305b\u306c\u52d5\u304d\u3068Google Docs\u3078\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8"]}