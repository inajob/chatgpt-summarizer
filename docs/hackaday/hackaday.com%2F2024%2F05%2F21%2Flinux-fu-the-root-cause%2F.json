{"pubDate": "2024-05-21T17:00:07", "original_title": "Linux Fu: The Root Cause", "link": "https://hackaday.com/2024/05/21/linux-fu-the-root-cause/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "There was a time when real system administrators just logged into Unix systems as root. But as we all know  with great power comes great responsibility. Its too easy to do terrible things when you are really just trying to do normal work, and, on top of that, malicious software or scripts can do naughty things without you noticing. So common practice quickly changed to where an administrator had a personal account but then had a way to run certain programs as root which means you had to deliberately decide to wield your power.\nBefore long, people realized you dont even need a root login account. That way, an attacker cant try to log into root at all. Sure, they could still compromise your account, but a random hacker knows you might have a root user, but it is harder to guess that your login ID is JTKirkJr or whatever.\nThere are other ways to control what users can do, but many Linux and Unix installations still use this model. The root can do everything but login, and specific users get the privilege to do certain things.\n\nsudo\nXKCD #149 (CC by SA 2.5)\nIn the Linux world, sudo is very common. It is a bit difficult to setup, but once configured, it is simple enough from a users point of view. If you want to, say, copy a file to a system directory, you prefix the command with sudo:\nsudo cp x.txt /usr/share/wherever\nThe sudo program will validate your password (not the root password) or otherwise log you in (e.g., using a camera or smart key or whatever you have set up for PAM). Once you validate, you will stay validated for a short period of time so you dont have to log in every time, although the time period is adjustable and can be turned off.\nWhere this is not simple is when you want to use redirection. For example, a common mistake is to write:\nsudo echo y /sys/option/made-up-option\nThis fails because sudo only runs echo as root. Your shell, the program that is interpreting the redirect, is still just you, and you cant write to the/sys/option directory. There are many workarounds for this. For example:\necho y | sudo tee /sys/option/made-up-option\nThere are a few options to sudo that you dont often use, but probably should:\n\n-l  List. Shows what you can do\n-v  Validate. This refreshes the expiration time without running a command.\n-k  Kill. Ends the validation period now, so youll have to authenticate again when you use sudo.\n-u  User. Normally root, but you can impersonate other users with this option.\n-i  Interactive. Run a shell as though youve logged in as the user.\n-e  Edit. Edit a file as the specified user.\n-g  Group. Run as a group.\n\nConfiguration is a bit tricky. Also, if you screw it up too badly, you could prevent yourself from running root commands which is disastrous. Because of that, you shouldnt edit the /etc/sudoers file directly. Instead, you should use visudo, which checks for sanity before overwriting your original file.\nIt isnt a bad idea to open a root shell (sudo -i) before you make any changes in another shell. You can also make a backup of sudoers until you are sure your changes work.\nInfrequently, youll want to change /etc/sudo.conf, which allows plugins to change how sudo works. But, usually, the default with your distribution is what you want, and all the changes youd like to make are in /etc/sudoers.\nThe sudoers file has a series of sections, many that set options or aliases. The lines you are mostly interested in look like this:\nJTKirkJr ALL = (root) /usr/bin/ls\nThis means that the user JTKirkJr on any host (ALL) can run /usr/bin/ls as the root user. One way to think of the structure is:\nwho where = as_user[:as_group]program...\nSometimes, you want the who part to be a group. Thats easy:\n%sudo ALL=(ALL:ALL) ALL\nThat means that anyone in the sudo group on any host can impersonate any user or any group for all commands. Easy! Sometimes, you want to run a trusted program as root without authenticating. This is very dangerous, so think hard before you do something like this:\nJTKirtJr ALL=(root) NOPASSWD: /usr/bin/smidump\nYou may be able to add fragments to files inside /etc/sudoers.d, depending on your distribution. You can find the entire manual for sudo online.\nXKCD #838 (CC by SA 2.5)\nIf you try to do something you are not approved for, the incident is reported. Contrary to popular belief, the alert doesnt go to the North Pole, but it is logged in /var/log/auth.log.\nsu\nHistorically, many people used su (which may mean substitute user, switch user, or super user) to gain a shell as another user (including root). That works, but it doesnt have nearly as much control as sudo. You get a shell, or you dont. And if you do, you can do everything.\nOne difference between su and sudo is that sudo wants your password. The su command wants the password for the user you want to be.\nrun0/systemd-run\nOf course, systemd wants to achieve world domination, so it has a way to do the same thing. Originally called systemd-run and, as of, systemd v256, invokable as run0 to save a little typing and to set some default options to make it work more like sudo. However, internally, it is different and leverages things like polkit and systemd, of course.\npkexec\nSpeaking of polkit, it also has a way  rarely used  to do a similar job. The pkexec command lets you execute code as another user. As with all of these programs, there is a danger that allowing users to run programs as other users can open up security holes. Of course, you configuration is one source of these vulnerabilities, but in some cases, bugs in the program can create serious security holes.\nThe main use of pkexec is to allow certain GUI programs to gain higher privileges when needed. Before that, kdesu and gksu however, you may find these programs still in use on older systems. There are also sudo wrappers like kdesudo. You dont see any of these in most newer distributions, though.\ndoas\nIf you dont like sudos configuration file, you might want to borrow a program from FreeBSD called doas. It also has a configuration file, but it is much easier to work with. The file to set up is /etc/doas.conf. Some distributions include vidoas to help with the editing.\nThe rule format is simple. Lines start with permit or deny, depending on what you want to accomplish. Then, you can name a user or group (with a colon prefix). You can add an as clause to specify a target user and a cmd keyword to specify a specific command.\nFor example, to let anyone in the sudo group do anything:\npermit :sudo\nThats it. You can use options like nopass, persist, and others to manipulate the environment. So to get the persistent password, you might prefer to write\npermit persist :sudo as root\nRooting it Out\nYou should be very careful changing anything related to how normal users can run programs as root. The potential for bad behavior is high. However, you do have to have something. Since run0 isnt really widely available yet, we arent sure how useful it will be. We rarely see pkexec in the wild. While sudo is fantastically flexible, we do appreciate the simplicity of doas.\nUltimately, they all do the same job. As usual with Linux, the choice is yours."}