{"pubDate": "2025-08-11T14:00:33", "original_title": "Smartphone Hackability, or, A Pocket Computer That Isn\u2019t", "link": "https://hackaday.com/2025/08/11/smartphone-hackability-or-a-pocket-computer-that-isnt/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/07/SmartphoneHack.jpg", "original_content": "Smartphones boggle my mind a whole lot  theyre pocket computers, with heaps of power to spare, and yet they feel like the furthest from it. As far as personal computers go, smartphones are surprisingly user-hostile.\nIn the last years time, even my YouTube recommendations are full of people, mostly millennials, talking about technology these days being uninspiring. In many of those videos, people will talk about phones and the ecosystems that they create, and even if they mostly talk about the symptoms rather than root causes, the overall mood is pretty clear  tech got bland, even the kinds of pocket tech youd consider marvellous in abstract. It goes deeper than cell phones all looking alike, though. They all behave alike, to our detriment.\nA thought-provoking exercise is to try to compare smartphone development timelines to those of home PCs, and see just in which ways the timelines diverged, which forces acted upon which aspect of the tech at what points, and how that impacted the alienation people feel when interacting with either of these devices long-term. Youll see some major trends  lack of standardization through proprietary technology calling the shots, stifling of innovation both knowingly and unknowingly, and finance-first development as opposed to long-term investments.\nLets start with a fun aspect, and that is hackability. Its not perceived to be a significant driver of change, but I do believe it to be severely decreasing chances of regular people tinkering with their phones to any amount of success. In other words, if you cant hack it in small ways, you cant really make it yours.\n\nCant Tinker, Dont Own\nIn order to tinker with your personal computer, you need just that, the computer itself. Generally, you need a whole another computer to hack on your smartphone; sometimes you even need a custom cable, and its not rare you cant do it at all. Phone tinkering is a path you explicitly set out to do, whereas computer-based hacking is something you can do idly.\nA Nokia N900 in hands of a user (by Victorgrigas, CC BY-SA 3.0)\nTheres good reasons for this, of course  first, a phone was generally always a subservient device not meant or able to be used as a development bench unto itself. Then  phones started really growing in an age and an environment where proprietary technology reigned supreme, with NDAs and utter secrecy (particularly for GSM modems with their inordinate amount of IP) being an especially prominent fixture in the industries surrounding phones. Even Androids open-source technology was mostly for manufacturers benefit rather than a design advantage for users, as demonstrated by the ever-worsening non-open-source driver situation.\nOnly a few phones ever bucked these trends, and those that did, developed pretty devoted followings if the hardware was worthwhile. Just look at the Nokia N900 with its hardware capability and alt OS support combo, Pixel phones with their mainline kernel support letting alternative OSes flourish, or old keypad Motorolas with leaked baseband+OS source code. Theyre remembered pretty fondly, and its because they facilitated hacking, on-device or even off-device.\nHacking starts by probing at a devices inner workings, deducing how things work, and testing the boundaries, but it doesnt happen when boundaries are well-protected and hidden away from your eyes. A typical app, even on Android, is surprisingly non-explorable, and unlike with PCs, again, if you want to explore it, you need a whole another device. Does it benefit app developers? For sure. I also have a strong hunch it doesnt benefit users that we could otherwise see become developers.\nPart of it is the need to provide a polished user experience, a respectable standard to have, especially so for producing pocket computers to be used by millions of people at once. However, Id argue that modern phones are suffocating, and that the lack of transparency is more akin to encasing an already reliable device in epoxy for no reason. A device designed to never ever challenge you, is a device that cant help you grow, and its not really a device you can grow attached to, either.\nOf course, complaints are one thing, and actionable suggestions is another.\nWhat Do?\nIf I were asked how to fix this, I wouldnt limit myself to opening filesystems back up to a users exploration habits, beyond the way they were open even in early Android days. I think modern phones could use a pre-installed Python interpreter, with a healthy amount of graphics libraries, a decent amount of control over the system, snappy well-configured autocomplete, and a library of example scripts you could edit in place; essentially, an Arduino IDE-like environment.\nIn other words, let people easily program phones to flash the screen every time an SMS from a specific person is received, or start audio recording when the user taps the touchscreen three times as the phones locked, or send accelerometer movements into a network socket as fast as the OS can receive them. Then, let them wrap those programs into apps, share apps easily with each other, and, since the trend of fast obsolescence requires regular collectie infusions of cash, transfer them from phone to phone quickly.\nBy the way, if days of Bluetooth and IrDA transfers evaded you, you missed out. We used to stand next to each other and transfer things from one phone to another, a field previously handled, but nowadays these things are somehow relegated to proprietary technologies like Airdrop. This isnt a problem for personal computers, in fact, they somehow keep getting better and better at it; just recently, I transferred some movies between two laptops using a Thunderbolt cable during a flight, and somehow, this was one of the few wow moments that Ive had recently with consumer-grade tech.\nThe idea is pretty simple on its own  if phones are to be personal computers, they should be very easy to program.\nThe Doohickey Port\nWhat about a bonus suggestion, for hardware customization? USB-C ports are really cool and powerful, but theyre relatively bespoke, and you only ever get one, to be unplugged every time you need to charge or sync. Plus, even if you have OTG, all that 5V step-up action isnt great for the battery, and neither are USB hardware/firmware stacks.\nI like I2C. Do you like I2C? I know most of you do. I enjoy I2C a lot, and I like how its decently well standardized, to the point things tend to just work. Its not as great at as many things as USB can be, but its also comparably low-frills, you dont need a software stack or a hefty bespoke board. For the most part, with I2C, you can just send bytes back and forth. Its a low-bandwidth yet high-impact bus, with a healthy amount of devices you can attach to it. Also, CPUs tend to have plenty of I2C ports to go around, often leaving a good few to spare.\nWhat else? Keeping up with the times, these days, you can manufacture flex PCBs decently quickly, with stiffener at no extra cost, and for dirt cheap, too. On a physical level, phones tend to come with cases, overwhelmingly so. In a way, theres suddenly plenty of free space on the back of a phone, for those with the eyes to see, and thats after accounting for the ever-increasing camera bump, too.\nMy bonus idea to make phones more customizable at low entry level, would be an I2C accessory port. In effect, a latch-less FFC socket with exposed I2C, and some 3.3V at non-negligible power. Of course, protect all lines electrically, current-limit the 3.3V and make its power switchable. With modern tech, you dont need to compromise waterproofing, either, and you can add a whole bunch of protection to such a port.\nFrom there, you can get GPIOs, you can get PWM, and so much more. You could have a reasonably simple GPIO expansion, but also a fully-fledged board with DACs and ADCs bolted on, or a servo control board, or an extra display of the kind phone designers like to add once in a generation, only to find it never be used by third-party apps as sales numbers never really reach the point of wider adoption. Experimental chording keyboards, touch surfaces, thermal pixel sensors,\nDoes it feel like youve seen that implemented? Of course, this resembles the PinePhone addon scheme, with FPCs wedged between the back cover and a set of pogo pins. Notably though, this kind of standard is about having compatibility between models and even manufacturers. You also shed a lot of Bluetooth cruft generally required when developing accessories for modern phones. It requires a flex PCB, sure, but so do pogopin schemes, and theres barely any mechanics compared to a pogopin array. Is it more fragile than a pogopin array? Yes, but its fragile addon-side, not as much phone-side, whereas pogopin arrays tend to be the opposite.\nA Sketch And A Dream\nOf course, this also relies on the aforementioned Python interpreter, and a decent exposed I2C API. If the only way to tinker with yours and others accessories is through bespoke intransparent apps you need a whole different device to make (or modify, if youre lucky), the hackability aspect wanes quick. In essence, what Im proposing is a phone-contained sandbox, not in a security sense, but in an educational sense. Personal computers have been serving as sandboxes for decades now, and yet, phones could never really fulfill such a niche.\nI think one of the big problems with modern phones is that a phone is barely ever a sandbox, all for mostly historic reasons. Now, if thats the case, we should make it one. If its a sandbox, then it can be molded to your needs through hacking and tinkering. If it can be molded to your needs, then it belongs to you in a whole different way. Will this happen? Quite unlikely, though, I do feel like making some prototypes. Instead, its about highlighting a significant aspect that contributes to tech alienation, and imagining how we could solve it given enough market buy-in.", "title": "- \u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30cf\u30c3\u30ab\u30d3\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5", "body": "\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306f\u4f7f\u3044\u306b\u304f\u304f\u3001\u9769\u65b0\u304c\u4e4f\u3057\u3044\u3002\u500b\u4eba\u5229\u7528\u3084\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u6027\u304c\u6c42\u3081\u3089\u308c\u308b\u3002", "titles": ["- \u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30cf\u30c3\u30ab\u30d3\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5", "- \u500b\u4eba\u7528\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3068\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u9032\u5316\u306e\u9055\u3044", "- \u6280\u8853\u7684\u306a\u900f\u660e\u6027\u3068\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30e6\u30fc\u30b6\u30fc\u4f53\u9a13", "- \u9589\u3056\u3055\u308c\u305f\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u3092\u6253\u7834\u3059\u308b\u63d0\u6848", "- \u6559\u80b2\u7684\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u306e\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u53ef\u80fd\u6027"]}