{"pubDate": "2023-07-04T02:00:10", "original_title": "Pratt Parsing for Algebraic Expressions", "link": "https://hackaday.com/2023/07/03/pratt-parsing-for-algebraic-expressions/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/pratt.png", "original_content": "Parsing algebraic expressions is always a pain. If you need to compute, say, 2+4*2, the answer should be the same as (2 + (4 *2)), not ((2 + 4) * 2)  in other words, the right answer is 10, not 12. The classic way to do this is to use two stacks and a table of precedences for the operators. However, [Martin Janiczek] prefers to use Pratt Parsers and wants to show you how they work.\nThe parser is named after [Vaughn Pratt]. The algorithm works with a table of precedence where operators with higher precedence have higher numbers. It then builds a left and right portion of a string, using recursion. So if you consider 2+4*2, you wind up, on the first pass, with (2+ parse(4*2)). The second parse returns a full expression to produce: (2+(4*2)).\n\nIf that was too fast, read the post which has a nice flowchart and an example step-by-step parse of 1+2-3*4+5/6^7-8*9.\u00a0 Towards the bottom, theres a nice animated flow chart that you can step through, almost like a debugger.\nThere are a few details left for the end. For example, there is a way to allow right-associative operators (e.g., 2^3^4 is actually ((2^(3^4)). You can also make some easy modifications to get things like unary negation and parenthesis.\nOf course, there are other ways to go. You could stick with RPN. Or use the traditional method.", "title": "\u96fb\u5b50\u5de5\u4f5c\u306b\u95a2\u3059\u308b\u8a18\u4e8b\uff1a\u52b9\u7387\u7684\u306a\u6570\u5f0f\u89e3\u6790\u624b\u6cd5\u3001Pratt\u30d1\u30fc\u30b5\u30fc\u306e\u7d39\u4ecb", "body": "\u6570\u5f0f\u89e3\u6790\u306f\u5e38\u306b\u8f9b\u3044\u3082\u306e\u3067\u3059\u30022+4*2\u3092\u8a08\u7b97\u3059\u308b\u5834\u5408\u3001\u6b63\u3057\u3044\u7b54\u3048\u306f(2+(4*2))\u3067\u3042\u308a\u3001((2+4)*2)\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Pratt\u30d1\u30fc\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002", "titles": ["\u96fb\u5b50\u5de5\u4f5c\u306b\u95a2\u3059\u308b\u8a18\u4e8b\uff1a\u52b9\u7387\u7684\u306a\u6570\u5f0f\u89e3\u6790\u624b\u6cd5\u3001Pratt\u30d1\u30fc\u30b5\u30fc\u306e\u7d39\u4ecb", "\u4e2d\u7f6e\u8a18\u6cd5\u306e\u6570\u5f0f\u306e\u89e3\u6790\uff1a2+4*2\u306e\u89e3\u6790\u65b9\u6cd5\u3068Pratt\u30d1\u30fc\u30b5\u30fc\u306e\u6d3b\u7528\u6cd5", "\u6570\u5f0f\u306e\u512a\u5148\u9806\u4f4d\u306b\u57fa\u3065\u304f\u89e3\u6790\u65b9\u6cd5\uff1aPratt\u30d1\u30fc\u30b5\u30fc\u3092\u4f7f\u3063\u305f\u8a08\u7b97\u624b\u6cd5\u306e\u7d39\u4ecb", "\u5f0f\u306e\u89e3\u6790\u306b\u304a\u3051\u308bPratt\u30d1\u30fc\u30b5\u30fc\u306e\u5229\u70b9\u3068\u4f75\u7528\u6cd5\uff1a\u4f8b\u3048\u3070\u3001\u53f3\u9023\u7d50\u6f14\u7b97\u5b50\u306e\u6d3b\u7528", "\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u3068\u540c\u69d8\u306b\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u6570\u5f0f\u89e3\u6790\u3092\u5b66\u3076\u305f\u3081\u306e\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8\u306e\u6d3b\u7528"]}