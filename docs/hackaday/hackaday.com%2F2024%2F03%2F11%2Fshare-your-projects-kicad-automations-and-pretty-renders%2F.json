{"pubDate": "2024-03-11T17:00:13", "original_title": "Share Your Projects: KiCad Automations And Pretty Renders", "link": "https://hackaday.com/2024/03/11/share-your-projects-kicad-automations-and-pretty-renders/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2018/04/circuitvr.jpg", "original_content": "I have a pretty large GitHub repository, with all of my boards open-sourced there. Now, Im finally facing the major problem it has  it can be uncomfortable for others to work with. I dont store Gerber files in the repository because that will interfere with how Git functions  youre supposed to only have source files in the repo. Yet, when someone needs Gerbers for my PCB, or a schematic PDF, or just to see how the board looks before they clone the entire repository, I often dont have a good option for them.\nIn my experience as a hacker, being able to find others PCBs on GitHub is simply wonderful, but a PCB repository without a README feels barren, and a PCB README without pictures makes me sad. On the other hand, not having these files autogenerate is uncomfortable  updating a picture every time is a major drawback in particular.\nLets take a look at some KiCad Git integrations, and see what they have to offer.\nkicad_cli\nWeve mentioned kicad_cli back when Kicad 7 got released, and in the recently released KiCad 8, its only become more powerful. Before, it could do gerbers and schematic PDFs, but now, it can even do DRC checks  which is ideal if you want to add a hook for any pull requests you might encounter.\n\nWhen you update to KiCad 8, you will get a few new cool commands in this list!\nThe benefit of kicad_cli is that its extremely simple to add  all you need to do is to install KiCad from a PPA in your workflow, then run kicad_cli on your files. How quick? Well, heres a KiCad makefile that lets you run make pcb\u00a0in your commandline  you dont even have to open KiCad anymore if all you want is Gerbers! Its also reasonably quick.\nHowever, there are limitations. For one, it cannot generate images  in KiCAD v8, it has gained the ability to export 3D models, but those have neither copper nor silkscreen. Plus, kicad_cli is quite limited in which options it supports  if you want to tweak 3D model export settings, you might just find that the necessary checkbox isnt exported as commandline option.\nSo, for my own purposes, pure kicad_cli wont do  I want people to have board images, preferably, the same way theyd get one if they were to open a 3D viewer. Also, I want to be able to customize the output. Thankfully, theres a KiCad integration juggernaut we can use, that you might even have already seen\nKiKit\nYou might have seen KiKit be used for panelization as PCB editor plugin with a nice toolbar button, but did you know it can also generate manufacturer-tailored files for you? Or that you can run it from commandline? Or that it can even help you generate board images, either SVG, or exported 3D viewer screenshots?\nI first realized that KiKit could be used for integration when I stumbled upon a tweet showing how the epdiy project makes its KiCad outputs accessible on an autogenerated webpage  generating gerber files, and even exporting the STEP model. This looked ideal, and I started looking into whats up. Ive found great things, and horrible things, lets start with the great ones.\n\nThis is how simple it is to generate things automatically for your repository  its a ready-to-go GitHub workflow. You can likely get the relevant workflow files from this repo into your repo right now and have nice exports automatically generated with every commit within an hours time. Gerbers are wonderful, so are PDFs and STEPs, but in particular, again, Im interested in images  those must be present, and theyre the most pain to regenerate.\nPcbdraw\nThere are two ways to generate images, both of them are through a Pcbdraw tool written by KiKits creator. One of them is more diagram-ish but requires some effort on your part, and another way creates a perfect 3D viewer render jpeg but requires a blood sacrifice. Lets start with the first one, the pcbdraw plot method.\nThis rendering method creates an SVG file for your board, complete with silkscreen, traces and pads  way nicer than digitizing a 3D model from kicad_cli output. However, any components you might expect, will be missing  you need to have SVGs for your components too, they wont just be present. There are SVG libraries, but in general, expect yourself to have to work in Inkscape if you want the diagram to look anything like the most bare board you get from the factory.\nHowever, I have to say that you must not sway from the path of light and you really should consider investing effort into `pcbdraw plot` generation. For one, its very nice  SVGs are low-footprint, theyre easy to embed, render, modify and convert. The `pcbdraw plot` even has a command to generate an assembly manual for you, how cool is that? And surely, you could also add pinout diagram nice arrows to it with a bit of SVG modification?\nThe most important thing, however, is that your other option is `pcbdraw render`, and its not quite easy. Its the one that creates 3D viewer 1:1 images, and given that kicad_cli has no such export option, you might guess that this involves black magic  your main hint being that the images take anywhere from 30 to 150 seconds to generate.\nYes, the black bars are sometimes (randomly) part of the exported image. Still, I love that this method exists.\nTheres no good way to say this  `pcbdraw render` opens the KiCad PCB editor in a virtual display window, analyzes open window headers to figure out whether the PCB Editor has loaded the PCB yet, blindly sends keyboard/mouse movements with xdotool, then exports the picture of the 3D viewer window, cropped used Pillow magic.\nIf you encounter a problem, I hope you are of strong enough spirit to debug it. For me, this is the only viable way, because my repository has about 200 boards and counting, and sitting in front of Inkscape is time I dont have.\nMe and my friend, who is a Docker witch, are currently hacking at creating a monorepo-viable integration for generating PCB output files, and we hope to release it soon  whenever we do, you too will be able to push all your boards into a single repository and have pretty pictures magically appear in your READMEs.\nIn the meantime, I hope that this summary and the integration and script links can help you in your own board publishing. You now know what it takes to auto-generate a board image or a Gerber .zip each time you make a commit into your repository, and now is possibly the best time to take a look at making your PCB repository more approachable."}