{"pubDate": "2024-01-17T12:00:25", "original_title": "Compute the Mandelbrot Set With a Custom RISC-V CPU", "link": "https://hackaday.com/2024/01/17/compute-the-mandelbrot-set-with-a-custom-risc-v-cpu/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/01/mikes-fpga.png", "original_content": "When faced with an FPGA, some people might use it to visualize the Mandelbrot set. Others might use it to make CPUs. But what happens if you combine the two? [Michael Kohn] shows us what happens with his RISC-V CPU with an instruction specially made for computing the Mandelbrot set.\n[Michael] takes us through the unusual process of turning his 8008 into a RISC-V CPU. Re-using bits of logic here and replacing other logic there leaves him with a functional RISC-V core. Not finished, [Michael] takes it upon himself to also create a custom instruction just for computing a point for the Mandelbrot set, accelerating the demo from twenty-three seconds to merely one!\nStill not finished, [Michael] also creates an implementation of the long gone F100-L CPU, once again with added Mandelbrot set flair, simultaneously with the RISC-V project. Finally, he ports his Java Grinder Java bytecode compiler to both RISC-V and the F100-L, because Java runs on 1 Billion devicesTM.\n\n", "title": "FPGA\u3067Mandelbrot\u30bb\u30c3\u30c8\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306eRISC-V CPU\u306e\u4f5c\u6210\u65b9\u6cd5", "body": "\u4eba\u3005\u304cFPGA\u3092\u4f7f\u7528\u3057\u3066Mandelbrot\u96c6\u5408\u3092\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3082\u3042\u308c\u3070\u3001CPU\u3092\u4f5c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e2\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\uff1f[Michael Kohn]\u306f\u3001Mandelbrot\u96c6\u5408\u306e\u8a08\u7b97\u306e\u305f\u3081\u306b\u7279\u5225\u306b\u4f5c\u3089\u308c\u305f\u547d\u4ee4\u3092\u6301\u3064\u5f7c\u306eRISC-V CPU\u3067\u305d\u308c\u3092\u5b9f\u8a3c\u3057\u3066\u3044\u307e\u3059\u30028008\u3092RISC-V CPU\u306b\u5909\u63db\u3059\u308b\u904e\u7a0b\u3092\u8a73\u3057\u304f\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u3002\u30ab\u30b9\u30bf\u30e0\u547d\u4ee4\u306b\u3088\u308b\u9ad8\u901f\u5316\u3082\u3042\u308a\u3001\u5b9f\u884c\u6642\u9593\u309223\u79d2\u304b\u3089\u308f\u305a\u304b1\u79d2\u306b\u77ed\u7e2e\u3057\u307e\u3057\u305f\u3002\u5f7c\u306f\u307e\u305f\u3001F100-L CPU\u306e\u5b9f\u88c5\u3068Java Grinder Java\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u79fb\u690d\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002", "titles": ["FPGA\u3067Mandelbrot\u30bb\u30c3\u30c8\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306eRISC-V CPU\u306e\u4f5c\u6210\u65b9\u6cd5", "8008 CPU\u3092RISC-V CPU\u306b\u5909\u63db\u3059\u308b\u975e\u5e38\u306b\u30e6\u30cb\u30fc\u30af\u306a\u30d7\u30ed\u30bb\u30b9", "Mandelbrot\u30bb\u30c3\u30c8\u8a08\u7b97\u7528\u306e\u30ab\u30b9\u30bf\u30e0\u547d\u4ee4\u3092\u642d\u8f09\u3057\u305fRISC-V CPU\u306e\u4f5c\u6210", "F100-L CPU\u306e\u5b9f\u88c5\u3068Mandelbrot set\u306e\u30a2\u30af\u30bb\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8", "Java Grinder Java bytecode\u30b3\u30f3\u30d1\u30a4\u30e9\u306eRISC-V\u3068F100-L\u3078\u306e\u30dd\u30fc\u30c8"]}