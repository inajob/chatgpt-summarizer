{"pubDate": "2025-08-02T02:00:36", "original_title": "AI Code Review the Right Way", "link": "https://hackaday.com/2025/08/01/ai-code-review-the-right-way/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/07/pr.png", "original_content": "Do you use a spell checker? Well guess you do. Would you use a button that just said correct all spelling errors in document? Hopefully not. Your word processor probably doesnt even offer that as an option. Why? Because a spellchecker will reject things not in its dictionary (like Hackaday, maybe). It may guess the wrong word as the correct word. Of course, it also may miss things like too vs. two. So why would you just blindly accept AI code review? You wouldnt, and thats [Bill Mills] point with his recent tool made to help him do better code reviews.\nHe points out that he ignores most of the suggestions the tool outputs, but that it has saved him from some errors. Like a spellcheck, sometimes you just hit ignore. But at least you dont have to check every single word.\n\nThe basic use case is to evaluate PRs (pull requests) before sending them or when receiving them. He does mention that it would be rude to simply dump the tools comments into your comments on a PR. This really just flags places a human should look at with more discernment.\nThe program uses a command-line interface to your choice of LLM. You can use local models or select among remote models if you have a key. For example, you can get a free key for Google Gemini and set it up according to the instructions for the llm program. Of course, many people will be more interested in running it locally so you dont share your code with the AIs corporate overlords. Of course, too, if you dont mind sharing, there are plenty of tools like GitHub Copilot that will happily do the same thing for you.\nThe review tool is just a bash script, so it is easy to change, including the system prompt, which you could tweak to your liking:\nPlease review this PR as if you were a senior engineer.\n## Focus Areas\n Architecture and design decisions\n Potential bugs and edge cases\n Performance considerations\n Security implications\n Code maintainability and best practices\n Test coverage\n## Review Format\n Start with a brief summary of the PR purpose and changes\n List strengths of the implementation\n Identify issues and improvement opportunities (ordered by priority)\n Provide specific code examples for suggested changes where applicable\nPlease be specific, constructive, and actionable in your feedback. Output the review in markdown format.\nWill you use a tool like this? Will you change the prompt? Let us know in the comments. If you want to play more with local LLMs (and you have a big graphics card), check out msty.", "title": "- AI\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\uff1a\u81ea\u52d5\u5316\u30c4\u30fc\u30eb\u306e\u9650\u754c\u3068\u6d3b\u7528\u6cd5", "body": "AI\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u30c4\u30fc\u30eb\u306f\u4eba\u9593\u306e\u5224\u65ad\u3092\u88dc\u52a9\u3057\u3001\u30a8\u30e9\u30fc\u3092\u898b\u9003\u3055\u306a\u3044\u305f\u3081\u306b\u4f7f\u3046\u3079\u304d\u3002", "titles": ["- AI\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\uff1a\u81ea\u52d5\u5316\u30c4\u30fc\u30eb\u306e\u9650\u754c\u3068\u6d3b\u7528\u6cd5", "- \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4e8b\u524d\u8a55\u4fa1\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u65b0\u3057\u3044\u30c4\u30fc\u30eb", "- \u4eba\u9593\u306e\u5224\u65ad\u3092\u91cd\u8996\u3057\u305fAI\u306b\u3088\u308b\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u306e\u30a2\u30d7\u30ed\u30fc\u30c1", "- \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3063\u305f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd\u306a\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u30b7\u30b9\u30c6\u30e0", "- \u30ed\u30fc\u30ab\u30eb\u30e2\u30c7\u30eb\u3068\u30ea\u30e2\u30fc\u30c8\u30e2\u30c7\u30eb\u3067\u5b9f\u884c\u3059\u308bLLM\u306e\u6d3b\u7528\u65b9\u6cd5"]}