{"pubDate": "2023-05-11T14:00:17", "original_title": "Linux Fu: C on Jupyter", "link": "https://hackaday.com/2023/05/11/linux-fu-c-on-jupyter/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/05/LinuxFu.jpg", "original_content": "If you are a Pythonista or a data scientist, youve probably used Jupyter. If you havent, it is an interesting way to work with Python by placing it in a Markdown document in a web browser. Part spreadsheet, part web page, part Python program, you create notebooks that can contain data, programs, graphics, and widgets. You can run it locally and attach to it via a local port with a browser or, of course, run it in the cloud if you like. But you dont have to use Python.\nYou can, however, use things with Jupyter other than Python with varying degrees of success. If you are brave enough, you can use C. And if you look at this list, youll see you can use things ranging from Javascript, APL, Fortran, Bash, Rust, Smalltalk, and even MicroPython.\n\nThere are a few reasons I use the term varying degrees of success. First, not all of these kernels are official, so you never know how old some of them are until you try them. But whats more, Jupyter works better with scripting-type languages that can run little snippets without a lot of effort. Not all of these languages fit that description. One of the worst offenders in this department is C. So naturally, I decided I wanted a C-language notebook. This is the story of how that went.\nWhy?\nYou may have many reasons for using C from a notebook. Maybe you are more adept at C than Python, and you are in a hurry. Perhaps you have some strange and wonderful library that really doesnt want to work with Python.\nYou can modify those arguments to fit any of the languages you can use. However, as usual, we dont have to figure out why to want to know how to do something. I will, however, show you a bit later that there are other options to use both Python and C in the same notebook  sort of. But first, lets look at the actual kernel.\nHow?\nUnder Linux, at least, you have a few choices about installing Juypter. Using the repo is often unsatisfying because things arent there or are out of date. But if you install using the normal methods, it tends to stomp over other things you may use that have Python requirements. Ideally, this wouldnt be the case, and sometimes everything works out, but I can tell you what has worked for me.\nThe first thing I do is load Anaconda, which allows you to set virtual Python environments easily. In fact, it starts with a base environment. Then I promptly turn that environment off by default. When I want to work with something like Juypter, I turn on that environment, but for normal day-to-day work, I just leave it turned off.\nTo do that, follow the instructions from the Anaconda website. I suggest not using sudo to install. Everything will install fine locally for your user, and theres less chance of screwing up system software by doing it that way. As part of the installation, youll get a change to your .bashrc file that activates everything by default. Or you can tell it not to do that and issue a command like this to turn it on later:\n. ~/my-conda-dir/bin/activate\nBut I just let it add a bit to my .bashrc. You need to start a new shell after you install so it will take. Then I immediately issue this command:\nconda config --set auto_activate_base False\nThis wont work if you didnt start a new shell, by the way, so if you get an error, thats a likely culprit. Now when you want to use the Anaconda environment for something like Jupyter, you can simply enter:\nconda activate base\nObviously, if you make up different environments later, you would activate them instead. The default install has Jupyter and a lot of other things, too. However, if you want to do exotic kernels, you have some more installing to do.\nFor C, you want to ensure the conda environment is activated (presumably base, as I showed above). Then do the following commands:\npip install jupyter-c-kernel\ninstall_c_kernel --user\nYou might get a warning, but if all goes well, you are in business.\nIn Practice\nRun jupyter-notebook, and youll see a start-up screen in your browser. Pick New from the right-hand side of the page and select C as the notebook type. Thats all there is to it.\nA C Example\nOf course, now, you need to populate a program. Whatever C code you have in a cell stands alone, so you cant really distribute it around to different cells. It also has to be a complete compilable unit. Heres a really simple example.\nExecute in the usual way (from the menu or Control+Enter).\nIf you need options sent to the compiler, you can do that with a line at the top of the cell:\n//%cflags:-lm\nIn this case, it passes the -lm option to the compiler so you can use the math library.\nOther Ways\nIf you dont like working in the browser, some IDEs will let you work in Jupyter notebooks. VS Code, for example, works well. Another option is to keep using the Python kernel, but compile and run your C code via the operating system. This will often even work in cloud environments that dont support the C kernel. Naturally, too, it will work with just about anything you can do from the command line like C++, awk, or whatever.\nThe trick is that, when using the Python kernel, you can use a ! to execute shell commands and a %% to specify that a particular cell lives in a file. So consider this notebook from Google Collab:\n\nWe make a directory, put a C file in it, compile it and run it. Later, we use awk to filter the directory listing. Nothing amazing, but you can see how you could do nearly anything with this method.\nWrap Up\nHonestly, if you really want a Jupyter Notebook, C might not be your best choice for a kernel. But it is a choice, and sometimes, you really need to use some odd language from the kernel list. Maybe you have that 50-year-old Fortran code.\nWe looked at Jupyter, in general, a few years ago. If you prefer Fortran, we got you.", "title": "Jupyter Notebook\u3067C\u8a00\u8a9e\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5", "body": "Jupyter notebooks allow data scientists and Python users to run programs, create graphics and use widgets. Although Jupyter is mainly designed for Python, it can also be used with other languages, including C. The process of setting up Jupyter for use with C involves installing Anaconda and the Jupyter-C-Kernel package. Once setup, users can use browser-based IDEs or use Python to compile and run C code via the operating system.", "titles": ["Jupyter Notebook\u3067C\u8a00\u8a9e\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5", "Jupyter Notebook\u3067Python\u4ee5\u5916\u306e\u8a00\u8a9e\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5", "Anaconda\u3092\u4f7f\u7528\u3057\u305fJupyter\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5", "Python\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u306a\u304c\u3089C\u8a00\u8a9e\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u65b9\u6cd5", "Jupyter Notebook\u3067C\u8a00\u8a9e\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u4ed6\u306e\u65b9\u6cd5"]}