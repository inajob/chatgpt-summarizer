{"pubDate": "2023-07-10T11:00:21", "original_title": "Kim-1: Memory Problem Resolved", "link": "https://hackaday.com/2023/07/10/kim-1-memory-problem-resolved/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/kim.png", "original_content": "At the very start of the personal computer revolution, there were relatively inexpensive boards with little more than a CPU, some memory, a display, and switches or a keypad. Some of these had expansion ports meant to allow you to build up, and some were just trainers to learn about computers. While you could argue that the Altair fell into this category, it had a case and a proper bus. The computers we are thinking about were usually just on a single board and  with luck  had an edge connector for expansion. Perhaps the most famous of these was the KIM-1 and [Old VCR] shows us how he brought one back to life.\nThese were highly popular mainly because of the low price of $245 back in 1976. For that price you got a calculator-style keyboard and LED display, 1K of RAM, and 2K of ROM. [Old VCR] has several and noticed that one was developing memory problems.\n\nSome basic troubleshooting found the culprit to be the memory chip at U10 on the schematic. Piggybacking a good RAM chip proved the chip was at fault, and, of course, there was no socket, so surgery ensued!\nOn the old boards, it is hard to remove a part without damaging traces and this was no exception. Silver conductive ink fixed the trace, but the repair was unsuccessful. Thats when the diagnostic board  a design from [Dwight Elvey] makes an appearance.\nSpoiler alert: the culprit was a solder bridge, also easy to do on these old boards. Removing the short put the old computer back in tip-top shape.\nIf you want your own KIM-1, you can do a modern build one pretty easily and save most of the $5,000 or so that a real one would cost. Or grab an Arduino. If you do the latter, you can also make it into a passable COSMAC Elf.", "title": "1976\u5e74\u306b\u8a95\u751f\u3057\u305fKIM-1\u3092\u5fa9\u6d3b\u3055\u305b\u308b\u65b9\u6cd5", "body": "\u30d1\u30fc\u30bd\u30ca\u30eb\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u9769\u547d\u306e\u521d\u671f\u306b\u306f\u3001CPU\u3084\u30e1\u30e2\u30ea\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3001\u30b9\u30a4\u30c3\u30c1\u307e\u305f\u306f\u30ad\u30fc\u30d1\u30c3\u30c9\u306a\u3069\u304c\u5c11\u306a\u3044\u6bd4\u8f03\u7684\u5b89\u4fa1\u306a\u30dc\u30fc\u30c9\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3044\u304f\u3064\u304b\u306f\u62e1\u5f35\u30dd\u30fc\u30c8\u3082\u5099\u3048\u3066\u304a\u308a\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u5b66\u7fd2\u7528\u306e\u30c8\u30ec\u30fc\u30ca\u30fc\u3067\u3057\u305f\u3002KIM-1\u306f\u6700\u3082\u6709\u540d\u306a\u3082\u306e\u3067\u3001RAM\u306e\u554f\u984c\u3092\u4fee\u7406\u3059\u308b\u305f\u3081\u306b\u8a3a\u65ad\u30dc\u30fc\u30c9\u304c\u4f7f\u7528\u3055\u308c\u307e\u3057\u305f\u3002\u5f8c\u306b\u306f\u3001\u73fe\u4ee3\u306e\u30d3\u30eb\u30c9\u3084Arduino\u3067\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002", "titles": ["1976\u5e74\u306b\u8a95\u751f\u3057\u305fKIM-1\u3092\u5fa9\u6d3b\u3055\u305b\u308b\u65b9\u6cd5", "\u4f4e\u4fa1\u683c\u306e\u30dc\u30fc\u30c9\u3067\u81ea\u5206\u3067\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u4f5c\u308d\u3046\uff01", "\u30e1\u30e2\u30ea\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0", "\u9762\u767d\u3044\u96fb\u5b50\u5de5\u4f5c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff1aKIM-1\u306e\u30e2\u30c0\u30f3\u30d3\u30eb\u30c9", "Arduino\u3092\u4f7f\u7528\u3057\u3066\u81ea\u4f5c\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf COSMAC Elf\u3092\u4f5c\u308d\u3046\uff01"]}