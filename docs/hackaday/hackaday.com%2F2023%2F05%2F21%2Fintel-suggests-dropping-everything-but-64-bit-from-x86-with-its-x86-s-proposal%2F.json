{"pubDate": "2023-05-21T14:00:07", "original_title": "Intel Suggests Dropping Everything But 64-Bit From X86 With Its X86-S Proposal", "link": "https://hackaday.com/2023/05/21/intel-suggests-dropping-everything-but-64-bit-from-x86-with-its-x86-s-proposal/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2018/01/intel.jpg", "original_content": "In a move that has a significant part of the internet flashing back to the innocent days of 2001 when Intel launched its Itanium architecture as a replacement for the then 32-bit only x86 architecture  before it getting bludgeoned by AMDs competing x86_64 architecture  Intel has now released a whitepaper with associated X86-S specification that seeks to probe the communitys thoughts on it essentially removing all pre-x86_64 features out of x86 CPUs.\nWhile today you can essentially still install your copy of MSDOS 6.11 on a brand-new Intel Core i7 system, with some caveats, its undeniable that to most users of PCs the removal of 16 and 32-bit mode would likely go by unnoticed, as well as the suggested removal of rings 1 and 2, as well as range of other low-level (I/O) features. Rather than the boot process going from real-mode 16-bit to protected mode, and from 32- to 64-bit mode, the system would boot straight into the 64-bit mode which Intel figures is what everyone uses anyway.\nWhere things get a bit hazy is that on this theoretical X86-S you cannot just install and boot your current 64-bit operating systems, as they have no concept of this new boot procedure, or the other low-level features that got dropped. This is where the Itanium comparison seems most apt, as it was Intels attempt at a clean cut with its x86 legacy, only for literally everything about the concept (VLIW) and legacy software support to go horribly wrong.\nAlthough X86-S seems much less ambitious than Itanium, it would nevertheless be interesting to hear AMDs thoughts on the matter.", "title": "1.\u300cIntel\u304cX86 CPU\u304b\u308916\u30d3\u30c3\u30c8\u304a\u3088\u307332\u30d3\u30c3\u30c8\u3092\u524a\u9664\uff1f\u300d", "body": "\u30a4\u30f3\u30c6\u30eb\u304c\u3001x86 CPU\u304b\u308916\u30d3\u30c3\u30c8\u30e2\u30fc\u30c9\u308432\u30d3\u30c3\u30c8\u30e2\u30fc\u30c9\u3092\u9664\u53bb\u3057\u300164\u30d3\u30c3\u30c8\u30e2\u30fc\u30c9\u3092\u8d77\u52d5\u72b6\u614b\u3068\u3059\u308b\u65b0\u3057\u3044\u8d77\u52d5\u624b\u9806\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3092\u4fc3\u3059\u305f\u3081\u306eX86-S\u4ed5\u69d8\u66f8\u3092\u767a\u884c\u3057\u305f\u3002\u305f\u3060\u3001\u65e2\u5b58\u306e64\u30d3\u30c3\u30c8OS\u306b\u306f\u5bfe\u5fdc\u305b\u305a\u3001\u5bfe\u5fdc\u3059\u308b\u306b\u306f\u5927\u5e45\u306a\u8abf\u6574\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002Itanium\u3068\u6bd4\u8f03\u3055\u308c\u308bX86-S\u306b\u3064\u3044\u3066\u3001AMD\u306e\u53cd\u5fdc\u304c\u6ce8\u76ee\u3055\u308c\u308b\u3002", "titles": ["1.\u300cIntel\u304cX86 CPU\u304b\u308916\u30d3\u30c3\u30c8\u304a\u3088\u307332\u30d3\u30c3\u30c8\u3092\u524a\u9664\uff1f\u300d", "\u300cIntel\u304cX86 CPU\u304b\u3089\u4f4e\u30ec\u30d9\u30eb\uff08I/O\uff09\u6a5f\u80fd\u3092\u524a\u9664\uff1f\u300d", "\u300cX86-S\uff1aIntel\u304c\u5168\u3066\u306epre-x86_64\u6a5f\u80fd\u3092\u9664\u53bb\u3059\u308b\u300d\u3068\u306f\uff1f\u300d", "\u300cItanium\u306e\u5f8c\u7d9a\uff1fX86-S\u306bAMD\u304c\u53cd\u5fdc\u3057\u305d\u3046\uff1f\u300d", "\u300c64\u30d3\u30c3\u30c8\u30e2\u30fc\u30c9\u3060\u3051\u3067\u8d77\u52d5\uff1fIntel\u304cX86 CPU\u306b\u5909\u66f4\u3092\u52a0\u3048\u308b\u7406\u7531\u300d"]}