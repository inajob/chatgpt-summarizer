{"pubDate": "2024-02-28T06:00:59", "original_title": "Wire Wrap Odyssey: a 7400-series Homebrew 8-bit Computer", "link": "https://hackaday.com/2024/02/27/wire-wrap-odyssey-a-7400-series-homebrew-8-bit-computer/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/wire_wrap_odyssey_desktop_web.jpg", "original_content": "The Wire Wrap Odysseys first Hello World from the CPU module, here hooked up to a logic analyzer in July of 2020. (Credit: Paul Krizak)\nAs part of his computer science curriculum at Texas AM University in the early 2000s, [Paul Krizak] took a computer architecture course on the basics of their functioning. This and being exposed to dozens of homebuilt computer projects inspired him to begin building his own 8-bit computer in 2010, which eventually grew into the Wire Wire Odyssey. This name covers both the primary construction method chosen around 2019 in the form of wire-wrapped connections, as well the harrowing journey to reach this point with a functioning computer system despite many choices and setbacks.\nThe Odyssey CPU is an 8-bit microcoded design with 16-bit address bus, using mostly 74HC-series logic. A VGA graphics card is also part of the design, which can output a 640480 text display, with character glyphs read from the system ROM (32 kB AT28C256). As for the RAM, this is an extravagant 32 kB dual-port SRAM (Renesas 7007), which also allows both the CPU and video card to use the same SRAM. Currently the system has four peripherals: a PS/2 keyboard controller, an RTC and timer (DS1511Y+), 82C52 UART and 1 MB of extended RAM, but an ATA port and parallel port are in development.\nPerhaps the most impressive part about this product is the level of documentation, from the early stages including paper doodles to the current state of the system, including the GitHub repository for the software. [Paul] was also an exhibitor at the Vintage Computing Festival (VCF) SoCal recently with his Wire Wrap Odyssey, where he was able to show off the progress so far. Next year he hopes to visit VCF SoCal again, with the remaining planned peripherals implemented.", "title": "\u30ef\u30a4\u30e4\u30fc\u30e9\u30c3\u30d4\u30f3\u30b0\u3067\u69cb\u7bc9\u3055\u308c\u305f8\u30d3\u30c3\u30c8\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306e\u958b\u767a", "body": "\u30dd\u30fc\u30eb\u30fb\u30af\u30ea\u30b6\u30c3\u30af\u306f\u3001\u81ea\u4f5c8\u30d3\u30c3\u30c8\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u300cWire Wrap Odyssey\u300d\u3092\u69cb\u7bc9\u3002 CPU\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30b5\u30a4\u30a8\u30f3\u30b9\u30ab\u30ea\u30ad\u30e5\u30e9\u30e0\u306e\u4e00\u74b0\u3068\u3057\u3066\u8a2d\u8a08\u30022020\u5e74\u306b\u306f\u6a5f\u80fd\u3059\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u4e0a\u3052\u3001VCF SoCal\u3067\u5c55\u793a\u3002", "titles": ["\u30ef\u30a4\u30e4\u30fc\u30e9\u30c3\u30d4\u30f3\u30b0\u3067\u69cb\u7bc9\u3055\u308c\u305f8\u30d3\u30c3\u30c8\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306e\u958b\u767a", "\u30aa\u30c7\u30c3\u30bb\u30a4CPU\uff1a74HC\u30b7\u30ea\u30fc\u30ba\u30ed\u30b8\u30c3\u30af\u3092\u4f7f\u7528\u3057\u305f8\u30d3\u30c3\u30c8\u8a2d\u8a08", "VGA\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30ab\u30fc\u30c9\u306832 kB\u30c7\u30e5\u30a2\u30eb\u30dd\u30fc\u30c8SRAM\u3092\u542b\u3080\u81ea\u4f5c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30b7\u30b9\u30c6\u30e0", "\u30ef\u30a4\u30e4\u30fc\u30e9\u30c3\u30d4\u30f3\u30b0\u30aa\u30c7\u30c3\u30bb\u30a4\uff1a\u30f4\u30a3\u30f3\u30c6\u30fc\u30b8\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30d5\u30a7\u30b9\u30c6\u30a3\u30d0\u30eb\u306b\u5c55\u793a", "\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff1aGitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u8a73\u7d30\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8"]}