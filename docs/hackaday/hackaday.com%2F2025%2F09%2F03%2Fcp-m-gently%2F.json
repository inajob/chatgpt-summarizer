{"pubDate": "2025-09-04T02:00:00", "original_title": "CP/M Gently", "link": "https://hackaday.com/2025/09/03/cp-m-gently/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/09/cpm.png", "original_content": "If you are interested in retrocomputers, you might be like us and old enough to remember the old systems and still have some of the books. But what if you arent? No one is born knowing how to copy a file with PIP, for example, so [Kraileth] has the answer: A Gentle Introduction to CP/M.\nOf course, by modern standards, CP/M isnt very hard. You had disks and they had a single level of files in them. No subdirectories. We did eventually get user areas, and the post covers that near the end. It was a common mod to treat user 0 as a global user, but by default, no.\n\nThat leads to one of the classic dragon and egg problems. PIP copies files, among other things. It knows about user areas, too, but only for source files. You can copy from user 3, for example, but you cant copy to user 3. But that leads to a problem.\nSuppose you switch to user 3 for the first time. The disk is empty. So theres no PIP command. To get it, youll need to copy it from user 0, but you cant without PIP. The solution is either genius or madness. You essentially load PIP into memory as user 0, switch users, then dump memory out to the disk. Who wouldnt think of that?\nSome people would load PIP with the debugger instead, but it is the same idea. But this is why you need some kind of help to use this important but archaic operating system.\nOf course, this just gets you started. Formatting disks and adapting software to your terminal were always a challenge with CP/M. But at least this gives you a start.\nCant afford a vintage CP/M machine? Build one. Or just emulate it."}