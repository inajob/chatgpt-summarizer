{"pubDate": "2023-09-01T14:00:31", "original_title": "This Week in Security: Not a Vulnerability, BGP Bug Propogation, and Press Enter to Hack", "link": "https://hackaday.com/2023/09/01/this-week-in-security-not-a-vulnerability-bgp-bug-propogation-and-press-enter-to-hack/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "Curl was recently notified of a CVE, CVE-2020-19909, rated at a hair-raising 9.8 on the CVSS scale. And PostgreSQL has CVE-2020-21469, clocking in with a 7.5 severity. You may notice something odd about those two vulnerabilities, but I promise the 2020 date is only the tip of the iceberg here.\nLets start with PostgreSQL. That vulnerability was only present in version 12.2, which released in February of 2020, and was fixed with the 12.3 release in May of that same year. The problem is a stack buffer overflow, which doesnt seem to enable code execution, but does cause a denial of service situation. To trigger the bug? Repeatedly send the PostgreSQL daemon the SIGHUP signal.\nIf youre familiar with Linux signals, that might sound odd. See, the SIGHUP signal technically indicates the end of a user session, but most daemons use it to indicate a restart or reload request. And to send this signal, a user has to have elevated privileges  elevated enough to simply stop the daemon altogether. Put simply, its not a security vulnerability, just a minor bug.\nAnd now on to curl  This one is just bizarre. The issue is a integer overflow in the --retry-delay argument, which specifies in seconds how often curl should retry a failing download. The value is multiplied by 1000 to convert to milliseconds, resulting in an overflow for very large values. The result of that overflow? A smaller value for the retry delay.\n[Daniel Stenberg] makes the point that this tale is a wonderful demonstration of the brokenness of the CVE system and NVDs handling of it. And in this case, its hard not to see this as negligence. We have to work really hard to construct a theoretical scenario where this bug could actually be exploited. The best Ive been able to come up with is an online download tool, where the user can specify part of the target name and a timeout. If that tool had a check to ensure that the timeout was large enough to avoid excess traffic, this bug could bypass that check. Should we be assigning CVEs for that sort of convoluted, theoretical attack?\nBut heres the thing, that attack scenario should rate something like a CVSS of 4.8 at absolute worst. NVD assigned this a 9.8. Theres no way you can squint at this bug hard enough to legitimately rank it that severe. At the time of writing, the NVD lists this as UNDERGOING REANALYSIS.\n\nBGP Allergies\nIn early June, a Border Gateway Protocol (BGP) route started announcing from a small network in Brazil. That route had a BGP Entropy Label Capability Attribute as part of the attribute fields, but the length of that field set to zero. Most other BGP routers have no idea what this attribute means, so its ignored but passed on.\nJuniper routers, however, are quite well aware of what that attribute is, and are quite opinionated on how it should be formatted. And this route got it wrong. The old response to a decoding error is to trigger a BGP session shutdown, dropping the router from the wider Internet temporarily. Because the route that caused the problem is still being announced, that process can continue to iterate, keeping the affected routers offline until someone steps in to fix the problem. RFC 7606 fixes this problem, by specifying that only the bad routes are to be dropped. But rollout on this RFC has been slow.\nWhich leads to the actual research of this story. [Benjojo] decided to set some BGP routers up on a testbench, and fuzz some BGP packets. Theres an impressive list of vendors that didnt fall to the attack, but Juniper, Nokia, FRR, OpenBSD, and Extreme Networks all had somewhat unexpected results. Of those, the OpenBSD security team stood out for taking the report seriously, and rapidly preparing a patch to address it. The other vendors were less responsive, to put it mildly.\nTPM Hacking Made Easy\nHere on Hackaday, weve covered a couple different Trusted Platform Module (TPM) attacks, where an encryption key can be sniffed off a physical trace on the motherboard. It turns out, those attacks way over-complicate the matter, and you can just mash the enter key like a 6-year-old playing street fighter.\n\nThis attack works on Linux machines that use the TPM to power unattended unlocking for LUKS disk encryption. This sounds odd at first, but its the solution to doing disk encryption for the server in the network closet, without having to walk over and type a password in for every reboot. The TPM supplies the encryption key, and the OS takes over security. The trick is to shoot that gap, hitting enter multiple times before the TPM unlocks the disk, each counting as a password entry attempt. Rate limiting kicks in, preventing the normal boot flow, and eventually the system fails to boot and drops the user to a root privileged shell.\nThe hard drive is still locked, but its easy enough to use the boot-time tools to ask the TPM to unlock the disk. Its apparently possible to rapid-fire the enter key fast enough by hand to hit this issue. The solution is actually a bit complicated. You can add rd.shell=0 and rd.emergency=reboot to the kernel command line, and it closes the gap, but that might not be the best option for most users.\nBits and Bytes\nRemember Wardriving? Where you could take a laptop and WiFi card, and drive around looking for vulnerable wireless networks? Chances are, you have a more powerful computer in your pocket, so why not put it to work? The entire mobile-hacker series is about the Kali NetHunter Android toolkit, and walks us through installation, picking some peripherals, and getting to work auditing WiFi. Enjoy responsibly!\nOne of our favorite tools in the anti-malware toolkit, Malwarebytes, is prepping for some big changes. Sadly, about 100 employees were let go as part of the groundwork for splitting the business into consumer and enterprise arms. No work yet on how the flagship anti-malware product will be affected.\nAn new malware strain, Infamous Chisel, has been found apparently targeting Ukrainian Android devices. The malware permanently installs itself over the netd daemon, and uses the TOR network for communications. It even includes Dropbear SSH for remote access. With the permanent installation and file replacement, this malware doesnt seem to be intended for stealth installs.", "title": "\u300cCurl\u3068PostgreSQL\u306b\u91cd\u5927\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027 - CVE-2020-19909\u3068CVE-2020-21469\u300d", "body": "Curl\u3068PostgreSQL\u306b\u306f\u91cd\u8981\u306a\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u6df1\u523b\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002BGP\u30eb\u30fc\u30bf\u30fc\u306e\u30a8\u30e9\u30fc\u3068TPM\u306e\u653b\u6483\u3082\u8a71\u984c\u3067\u3059\u3002", "titles": ["\u300cCurl\u3068PostgreSQL\u306b\u91cd\u5927\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027 - CVE-2020-19909\u3068CVE-2020-21469\u300d", "\u300cBGP\u306e\u554f\u984c\u304c\u30aa\u30d5\u30e9\u30a4\u30f3\u306b\u306a\u308b - Juniper\u3068\u4ed6\u306e\u30d9\u30f3\u30c0\u30fc\u306b\u5f71\u97ff\u300d", "\u300cTPM\u30cf\u30c3\u30ad\u30f3\u30b0\u304c\u7c21\u5358\u306b? Linux\u30de\u30b7\u30f3\u3092\u72d9\u3046\u65b0\u305f\u306a\u653b\u6483\u624b\u6cd5\u300d", "\u300c\u30e2\u30d0\u30a4\u30eb\u30cf\u30c3\u30ab\u30fc\u306e\u305f\u3081\u306eKali NetHunter Android\u30c4\u30fc\u30eb\u30ad\u30c3\u30c8\u300d", "\u300c\u30a6\u30af\u30e9\u30a4\u30ca\u306eAndroid\u30c7\u30d0\u30a4\u30b9\u3092\u72d9\u3046\u65b0\u305f\u306a\u30de\u30eb\u30a6\u30a7\u30a2 'Infamous Chisel'\u300d"]}