{"pubDate": "2025-05-01T17:00:57", "original_title": "libogc Allegations Rock Wii Homebrew Community", "link": "https://hackaday.com/2025/05/01/libogc-allegations-rock-wii-homebrew-community/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/04/OGC.jpg", "original_content": "Historically, efforts to create original games and tools, port over open source emulators, and explore a game consoles hardware and software have been generally lumped together under the banner of homebrew. While not the intended outcome, its often the case that exploring a console in this manner unlocks methods to run pirated games. For example, if a bug is found in the systems firmware that enables a clever developer to run Hello World, you can bet that the next thing somebody tries to write is a loader that exploits that same bug to play a ripped commercial game.\nBut for those who are passionate about being able to develop software for their favorite game consoles, and the developers who create the libraries and toolchains that make that possible, the line between homebrew and piracy is a critical boundary. The general belief has always been that keeping piracy at arms length made it less likely that the homebrew community would draw the ire of the console manufacturers.\nAs such, homebrew libraries and tools are held to a particularly high standard. Homebrew can only thrive if developed transparently, and every effort must be taken to avoid tainting the code with proprietary information or code. Any deviation could be the justification a company like Nintendo or Sony needs to swoop in.\nUnfortunately, there are fears that covenant has been broken in light of multiple allegations of impropriety against the developers of libogc, the C library used by nearly all homebrew software for the Wii and GameCube. From potential license violations to uncomfortable questions about the origins of the project, theres mounting evidence that calls the viability of the library into question. Some of these allegations, if true, would\u00a0effectively mean the distribution and use of the vast majority of community-developed software for both consoles is now illegal.\n\nHomebrew Channel Blows the Whistle\nFor those unfamiliar, the Wii Homebrew Channel (HBC) is a front-end used to load homebrew games and programs on the Nintendo Wii, and is one of the very first things anyone whos modded their console will install. Its not an exaggeration to say that essentially anyone whos run homebrew software on their Wii has done it through HBC.\nBut as of a few days ago, the GitHub repository for the project was archived, and lead developer Hector Martin added a long explanation to the top of its README that serves as an overview of the allegations being made against the team behind libogc.\nSomewhat surprisingly, Martin starts by admitting that hes believed libogc contained ill-gotten code since at least 2008. He accuses the developers of decompiling commercial games to get access to the C code, as well as copying from leaked documentation from the official Nintendo software development kit (SDK).\nFor many, that would have been enough to stop using the library altogether. In his defense, Martin claims that he and the other developers of the HBC didnt realize the full extent to which libogc copied code from other sources. Had they realized, Martin says they would have launched an effort to create a new low-level library for the Wii.\nBut as the popularity of the Homebrew Channel increased, Martin and his team felt they had no choice but to reluctantly accept the murky situation with libogc for the good of the Wii homebrew scene, and left the issue alone. That is, until new information came to light.\nInspiration Versus Copying\nThe story then fast-forwards to the present day, and new claims from others in the community that large chunks of libogc were actually copied from the Real-Time Executive for Multiprocessor Systems (RTEMS) project  a real-time operating system that was originally designed for military applications but that these days finds itself used in a wide-range of embedded systems. Martin links to a GitHub repository maintained by a user known as derek57 that supposedly reversed the obfuscation done by the libogc developers to try and hide the fact they had merged in code from RTEMS.\nNow, it should be pointed out that RTEMS is actually an open source project. As you might expect from a codebase that dates back to 1993, these days it includes several licenses that were inherited from bits of code added over the years. But the primary and preferred license is BSD 2-Clause, which Hackaday readers may know is a permissive license that gives other projects the right to copy and reuse the code more or less however they chose. All it asks in return is attribution, that is, for the redistributed code to retain the copyright notice which credits the original authors.\nIn other words, if the libogc developers did indeed copy code from RTEMS, all they had to do was properly credit the original authors. Instead, its alleged that they superficially refactored the code to make it appear different, presumably so they would not have to acknowledge where they sourced it from. Martin points to the following function as an example of RTEMS code being rewritten for libogc:\n\nWhile this isolated function doesnt necessarily represent the entirety of the story, it does seem hard to believe that the libogc implementation could be so similar to the RTEMS version by mere happenstance. Even if the code was not literally copy and pasted from RTEMS, its undeniable that it was used as direct inspiration.\nlibogc Developers Respond\nAt the time of this writing, there doesnt appear to be an official response to the allegations raised by Martin and others in the community. But individual developers involved with libogc have attempted to explain their side of the story through social media, comments on GitHub issues, and personal blog posts.\nThe most detailed comes from Alberto Mardegan, a relatively new contributor to libogc. While the code in question was added before his time with the project, he directly addresses the claim that functions were lifted from RTEMS in a blog post from April 28th. While he defends the libogc developers against the accusations of outright code theft, his conclusions are not exactly a ringing endorsement for how the situation was handled:\n\nIn short, Mardegan admits that some of the code is so similar that it must have been at least inspired by reading the relevant functions from RTEMS, but that he believes this falls short of outright copyright infringement. As to why the libogc developers didnt simply credit the RTEMS developers anyway, he theorizes that they may have wanted to avoid any association with a project originally developed for military use.\nAs for claims that libogc was based on stolen Nintendo code, the libogc developers seem to consider it irrelevant at this point. When presented with evidence that the library was built on proprietary code, Dave [WinterMute] Murphy, who maintains the devkitPro project that libogc is a component of, responded that The official stance of the project is that we have no interest in litigating something that occurred 21 years ago.\nIn posts to Mastodon, Murphy acknowledges that some of the code may have been produced by reverse engineering parts of the official Nintendo SDK, but then goes on to say that There was no reading of source code or tools to turn assembly into C.\n\nFrom his comments, its clear that Murphy believes that the benefit of having libogc available to the community outweighs concerns over its origins. Further, he feels that enough time has passed since its introduction that the issue is now moot. In comparison, when other developers in the homebrew and emulator community have found themselves in similar situations, theyve gone to great lengths to avoid tainting their projects with leaked materials.\nDoing the Right Thing?\nThe Wii Homebrew Channel itself had not seen any significant updates in several years, so Martin archiving the project was somewhat performative to begin with. This would seem to track with his reputation  in addition to clashes with the libogc developers, Martin has also recently left Asahi Linux after a multi-bag-of-popcorn spat within the kernel development community that ended with Linus Torvalds declaring that the problem is you.\nBut that doesnt mean there isnt merit to some of his claims. At least part of the debate could be settled by simply acknowledging that RTEMS was an inspiration for libogc in the librarys code or documentation. The fact that the developers seem reluctant to make this concession in light of the evidence is troubling. If not an outright license violation, its at least a clear disregard for the courtesy and norms of the open source community.\n\nAs for how the leaked Nintendo SDK factors in, there probably isnt enough evidence one way or another to ever determine what really happened. Martin says code was copied verbatim, the libogc team says it was reverse engineered.\nThe key takeaway here is that both parties agree that the leaked information existed, and that it played some part in the origins of the library. The debate therefore isnt so much about if the leaked information was used, but how it was used. For some developers, that alone would be enough to pass on libogc and look for an alternative.\nOf course, in the end, thats the core of the problem. There is no alternative, and nearly 20 years after the Wii was released, theres little chance of another group having the time or energy to create a new low-level C library for the system. Especially without good reason.\nThe reality is that whatever interaction there was with the Nintendo SDK happened decades ago, and if anyone was terribly concerned about it there would have been repercussions by now. By extension, it seems unlikely that any projects that rely on libogc will draw the attention of Nintendos legal department at this point.\nIn short, life will go on for those still creating and using homebrew on the Wii. But for those who develop and maintain open source code, consider this to be a cautionary tale  even if we cant be completely sure of whats fact or fiction in this case.", "title": "**\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u63a2\u6c42\u306e\u6b74\u53f2\u3068\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fc\u306e\u5883\u754c\u7dda**", "body": "\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fc\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u958b\u767a\u8005\u304c\u30e9\u30a4\u30bb\u30f3\u30b9\u9055\u53cd\u306e\u7591\u3044\u306b\u76f4\u9762\u3002", "titles": ["**\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u63a2\u6c42\u306e\u6b74\u53f2\u3068\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fc\u306e\u5883\u754c\u7dda**", "**libogc\u306e\u554f\u984c\u3068Wii\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u4e0e\u3048\u308b\u5f71\u97ff**", "**\u8457\u4f5c\u6a29\u3068\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\uff1alibogc\u958b\u767a\u8005\u306e\u53cd\u5fdc\u3068\u8b70\u8ad6**", "**Wii\u306e\u30db\u30fc\u30e0\u30d6\u30ea\u30e5\u30fc\u306b\u6f5c\u3080\u8457\u4f5c\u6a29\u30ea\u30b9\u30af\u3068\u305d\u306e\u5f71\u97ff**", "**\u96fb\u5b50\u5de5\u4f5c\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u8b66\u544a\uff1a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3068\u502b\u7406\u306e\u91cd\u8981\u6027**"]}