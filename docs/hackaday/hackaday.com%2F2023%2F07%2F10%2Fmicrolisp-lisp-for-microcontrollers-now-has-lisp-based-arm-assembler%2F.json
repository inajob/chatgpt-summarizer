{"pubDate": "2023-07-11T05:00:46", "original_title": "MicroLisp: Lisp For Microcontrollers Now Has Lisp-Based ARM Assembler", "link": "https://hackaday.com/2023/07/10/microlisp-lisp-for-microcontrollers-now-has-lisp-based-arm-assembler/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/ulisp_infograph.gif", "original_content": "In a way it feels somewhat silly to market a version of Lisp as targeting resource-constrained platforms, considering the systems it ran on back in the 1960s, but as time goes on, what would have given 1970s Big Iron a run for its money is now a sub-$5 microcontroller that you can run uLisp (MicroLisp) on. This particular project now even has an ARM assembler that is written in Lisp whose source code (GitHub) fits on a mere two A4-sized pages.\nULisp currently supports five platforms, being AVR-nano (ATmega328 and similar low-cost AVRs), AVR, ARM, ESP (8266 and 32), as well as RISC-V. The purpose of this assembler is to execute native ARM instructions when running on an ARM board, since uLisp itself runs a Lisp interpreter on the platform. When executed natively like this, a considerable speed-up of the task can be expected, as illustrated by a number of ARM assembler examples in the documentation.\nRunning a Fibonacci sequence that takes 24.6 seconds with the Lisp version on an Adafruit Metro M4 is reduced to a mere 61 ms when ARM assembly is used instead. This shouldnt be too shocking, since this assembler essentially bypasses the Lisp runtime, coming closer to what would be the performance of firmware written in e.g. C. However, it also demonstrates that with this ARM assembler it is possible to have your Lisp and still get native performance when you want it, all using Lisp code.", "title": "\u300c$5\u4ee5\u4e0b\u306e\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3067\u52d5\u4f5c\u3059\u308buLisp\u300d", "body": "1960\u5e74\u4ee3\u306b\u306f\u5927\u578b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u4e0a\u3067\u52d5\u4f5c\u3057\u3066\u3044\u305fLisp\u3092\u73fe\u5728\u306f5\u30c9\u30eb\u4ee5\u4e0b\u306e\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002ARM\u30a2\u30bb\u30f3\u30d6\u30e9\u3082Lisp\u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001GitHub\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fA4\u7528\u7d192\u679a\u3060\u3002ULisp\u306fAVR-nano\u3001AVR\u3001ARM\u3001ESP\u3001RISC-V\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3001ARM\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u4f7f\u7528\u306b\u3088\u308a\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u308b\u3002\u4f8b\u3048\u3070\u3001Adafruit Metro M4\u4e0a\u3067\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u8a08\u7b97\u306fLisp\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f24.6\u79d2\u304b\u304b\u308b\u304c\u3001ARM\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u4f7f\u7528\u3059\u308b\u3068\u305f\u3063\u305f\u306e61\u30df\u30ea\u79d2\u3067\u5b9f\u884c\u3067\u304d\u308b\u3002", "titles": ["\u300c$5\u4ee5\u4e0b\u306e\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3067\u52d5\u4f5c\u3059\u308buLisp\u300d", "\u300cLisp\u3067\u66f8\u304b\u308c\u305fARM\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u958b\u767a\u300d", "\u300cAVR\u3001ARM\u3001ESP\u3001RISC-V\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308buLisp\u300d", "\u300cLisp\u306e\u5b9f\u884c\u901f\u5ea6\u3092\u98db\u8e8d\u7684\u306b\u5411\u4e0a\u3055\u305b\u308bARM\u30a2\u30bb\u30f3\u30d6\u30e9\u300d", "\u300cLisp\u3068\u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u878d\u5408\u3055\u305b\u308bARM\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u6d3b\u7528\u300d"]}