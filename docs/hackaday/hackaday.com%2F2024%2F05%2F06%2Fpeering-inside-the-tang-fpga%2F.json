{"pubDate": "2024-05-07T02:00:22", "original_title": "Peering Inside the Tang FPGA", "link": "https://hackaday.com/2024/05/06/peering-inside-the-tang-fpga/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/05/fpga.png", "youtube": "https://www.youtube.com/watch?v=j7pyvmNUNWc", "original_content": "[Greg] has been working with the Tang Nano 9K FPGA board. He wanted to use the Gowin Analysis Oscilloscope (GAO) to build an internal monitor into the device for probing internal points. The problem is that the documentation is a bit lacking, so he made a video showing how to make it work to help us all out.\nThe idea for this isnt unique, although for some vendors, getting this capability requires you to buy a license or the free versions are limited. We were disappointed, as was [Greg], that he had to run Windows to get the software to work.\n\nThe software seems capable, although we were interested in how much of the chips resources the integrated logic analyzer uses. We know from experience that being able to have a birds eye view of the signals inside the FPGA greatly simplifies debugging.\nThe Tang boards contain GWIN-1 FPGAs with different gate counts. We assume this software will work with any of the devices, regardless of the size. Wed love to know how to make this work on Linux, even if it takes a VM or WINE. In addition, the program has a number of options and features that either dont work or arent clear what they are supposed to do. If you have any insight on any of this, be sure to share it with [Greg] and the rest of us.\nWeve rolled our own version of this that is portable. Weve looked at this FPGA before and it is dirt cheap.\n", "title": "\"Tang Nano 9K FPGA\u30dc\u30fc\u30c9\u3092\u6d3b\u7528\uff1aGowin Analysis Oscilloscope\u306e\u8a2d\u5b9a\u65b9\u6cd5\"  ", "body": "[Greg]\u306fTang Nano 9K FPGA\u30dc\u30fc\u30c9\u3067\u4f5c\u696d\u3092\u884c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u5185\u90e8\u76e3\u8996\u88c5\u7f6e\u3092\u69cb\u7bc9\u3057\u305f\u3044\u304c\u3001\u554f\u984c\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u52d5\u753b\u3092\u4f5c\u6210\u3057\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3057\u305f\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f\u6709\u80fd\u3067\u3059\u304c\u3001Linux\u3067\u306e\u52d5\u4f5c\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3082\u77e5\u308a\u305f\u3044\u3002", "titles": ["\"Tang Nano 9K FPGA\u30dc\u30fc\u30c9\u3092\u6d3b\u7528\uff1aGowin Analysis Oscilloscope\u306e\u8a2d\u5b9a\u65b9\u6cd5\"  ", "\"Tang\u30dc\u30fc\u30c9\u5185\u306e\u4fe1\u53f7\u306e\u30c7\u30d0\u30c3\u30b0\u3092\u7c21\u7d20\u5316\u3059\u308b\u65b9\u6cd5\"  ", "\"FPGA\u5185\u90e8\u306e\u4fe1\u53f7\u3092\u76e3\u8996\u3059\u308b\u305f\u3081\u306e\u30ed\u30b8\u30c3\u30af\u30a2\u30ca\u30e9\u30a4\u30b6\u30fc\u6d3b\u7528\u8853\"  ", "\"Linux\u3067\u306eGowin Analysis Oscilloscope\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u8a2d\u5b9a\u65b9\u6cd5\"  ", "\"\u624b\u9803\u306a\u4fa1\u683c\u306eFPGA\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u305f\u8a2d\u8a08\u306e\u9032\u5316\"  "]}