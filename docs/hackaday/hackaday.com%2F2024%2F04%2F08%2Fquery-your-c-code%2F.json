{"pubDate": "2024-04-09T02:00:21", "original_title": "Query Your C Code", "link": "https://hackaday.com/2024/04/08/query-your-c-code/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/04/cdb.png", "original_content": "If youve ever worked on a large project  your own or a group effort  you know it can be difficult to find exactly where you want to be in the source code. Sure, you can use ctags and most other editors have some way of searching for things. But ClangQL from [AmrDeveloper] lets you treat your code base like a database.\nHonestly, weve often thought about writing something that parses C code and stuffs it into a SQL database. This tool leverages the CLang parser and lets you write queries like:\nSELECT * FROM functions\nThat may not seem like the best example, but how about:\nSELECT COUNT(name) FROM functions WHERE return_type=\"int\"\nThats a bit more interesting. The functions table provides each functions name, signature, a count of arguments, a return type, and a flag to indicate methods. We hope the system will grow to let you query on other things, too, like variables, templates, preprocessor defines, and data types. The tool can handle C or C++ and could probably work with other CLang front ends with a little work.\n\nThis would be great for estimating the difficulty of tasks. Imagine asking for how many functions return a float when trying to decide how long it would take to switch to fixed point. We plan to try it on a source tree for the Linux kernel and give it a spin.\nTruthfully, weve long been surprised databases havent taken over as file systems and source code anyway. A lot of what we do in git could be done in a database. And vice-versa.", "title": "\u96fb\u5b50\u5de5\u4f5c\u306b\u5f79\u7acb\u3064\uff01ClangQL\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30af\u30a8\u30ea", "body": "ClangQL\u306f\u3001C\u30b3\u30fc\u30c9\u3092SQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3057\u3001\u30af\u30a8\u30ea\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3067\u304d\u308b\u30c4\u30fc\u30eb\u3002\u95a2\u6570\u306e\u540d\u524d\u3084\u623b\u308a\u5024\u306a\u3069\u3092\u691c\u7d22\u53ef\u80fd\u3002Linux\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u3067\u4f7f\u7528\u3059\u308b\u8a08\u753b\u3002", "titles": ["\u96fb\u5b50\u5de5\u4f5c\u306b\u5f79\u7acb\u3064\uff01ClangQL\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30af\u30a8\u30ea", "CLang\u30d1\u30fc\u30b5\u30fc\u3092\u5229\u7528\u3057\u305f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5316\uff01ClangQL\u306b\u3088\u308b\u30b3\u30fc\u30c9\u691c\u7d22", "\u95a2\u6570\u3084\u5909\u6570\u306a\u3069\u3001\u30b3\u30fc\u30c9\u3092SQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3059\u308b\u65b9\u6cd5", "ClangQL\u3092\u6d3b\u7528\u3057\u3066\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3092\u52b9\u7387\u7684\u306b\u691c\u7d22\u3057\u3088\u3046", "\u95a2\u6570\u306e\u623b\u308a\u5024\u3084\u5f15\u6570\u306e\u6570\u3092\u7c21\u5358\u306b\u8abf\u67fb\uff01ClangQL\u306e\u6d3b\u7528\u6cd5"]}