{"pubDate": "2025-10-22T11:00:00", "original_title": "World\u2019s Cheapest ARM Debugger Is Actually RISC-V", "link": "https://hackaday.com/2025/10/22/worlds-cheapest-arm-debugger-is-actually-risc-v/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/CMSIS_DAP_INTERFACE-featured.png", "original_content": "[bogdanthegeek] has a lot of experience with the ARM platform, and their latest escapade into working with cheap ARM chips recovered from disposable vapes involved a realization that it was just plain wrong to debug such recovered silicon with something as expensive as a Pi Pico. No, they needed to build a debugger using the super cheap CH32V003.\nWhat follows is an interesting tour around ARM Debug Access Probe (DAP) programmers and creating a practical USB-connected device that actually works with modern toolchains. The first problem to be solved was that of host connectivity. These days, its USB or go home, which immediately limits the microcontrollers you can choose. Luckily for [Bogdan], they were aware of the excellent work by [cnlohr] on wedging low-speed USB support onto the RISC-V CH32v003 with the software-only bit-banging rv003usb, which provided a starting point. The next issue was to check for interrupt-driven endpoint support (needed for low-speed USB) in the Mac OS X kernel, which they knew was being dropped at an alarming rate (well, at least for full-speed). Luckily, the CMSIS-DAP standard required support for interrupt-driven USB endpoints, so kernel support was likely intact.\nNext, [Bogdan] noticed that the DAPLink project had been ported to the bigger, native-USB WCH chips like the CH32V203, so it was a matter of porting this code to the diminutive CH32V003 using the rv003usb stack for the USB support using [cnlohr]s ch32fun toolchain. There were a few bumps along the way with a lack of clarity in the DAPLink code, and some inconsistencies (across platforms) with the USB library dependencies of the upstream tool pyOCD, but they did get some tools working on at least Mac OS and some others on Linux. Which was nice.\nWeve covered the CH32V003 a fair bit, with people trying to give it all kinds of big-CPU tricks, such as speech recognition (of sorts) or even building a supercluster.", "title": "\u5b89\u4fa1\u306aCH32V003\u3092\u4f7f\u7528\u3057\u305fARM\u30c7\u30d0\u30c3\u30ac\u306e\u69cb\u7bc9", "body": "Bogdan\u6c0f\u306f\u5b89\u4fa1\u306aARM\u30c1\u30c3\u30d7\u3092\u4f7f\u3044\u3001USB\u63a5\u7d9a\u306e\u30c7\u30d0\u30c3\u30ac\u3092\u4f5c\u6210\u3002CH32V003\u3067\u306e\u958b\u767a\u304c\u9032\u3080\u3002", "titles": ["\u5b89\u4fa1\u306aCH32V003\u3092\u4f7f\u7528\u3057\u305fARM\u30c7\u30d0\u30c3\u30ac\u306e\u69cb\u7bc9", "USB\u63a5\u7d9a\u3092\u652f\u3048\u308b\u30de\u30a4\u30b3\u30f3\u9078\u3073\u306e\u91cd\u8981\u6027", "RISC-V CH32V003\u3067\u306e\u4f4e\u901fUSB\u30b5\u30dd\u30fc\u30c8\u306e\u5b9f\u73fe", "DAPLink\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eCH32V003\u3078\u306e\u79fb\u690d", "Mac\u304a\u3088\u3073Linux\u3067\u306e\u30c7\u30d0\u30c3\u30b0\u30c4\u30fc\u30eb\u306e\u958b\u767a\u7d4c\u9a13"]}