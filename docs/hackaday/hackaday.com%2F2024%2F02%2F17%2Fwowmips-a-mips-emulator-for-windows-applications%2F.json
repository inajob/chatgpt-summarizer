{"pubDate": "2024-02-17T12:00:48", "original_title": "WoWMIPS: A MIPS Emulator for Windows Applications", "link": "https://hackaday.com/2024/02/17/wowmips-a-mips-emulator-for-windows-applications/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/mips_pbrush.png", "original_content": "When Windows NT originally launched it had ports to a wide variety of platforms, ranging from Intels x86 and i860 to DECs Alpha as well as the MIPS architecture. Running Windows applications written for many of these platforms is a bit tricky these days, which [x86matthew] saw as a good reason to write a MIPS emulator. This isnt just any old emulator, though. It maps 32-bit Windows applications targeted at the MIPS R4000 CPU to an x86 CPU instead. Since both platforms run in a little-endian, 32-bit mode, this theoretically should be a walk in the park.\nThe use of the Windows PE executable format is also the same, so the first task was to figure out how to load the MIPS PE binary in a way that made sense for an x86 platform. This involved some reverse-engineering of the MIPS ntdll.dll file to figure out how relocations on that platform were handled. Following this, the mapping of the instructions of the R4000 CPU to the (CISC) x86 ISA was pretty easy. Only Floating Point Unit (FPU) support was left as a future challenge. Memory access was left as direct access, meaning no sandboxing or isolation, for simplicitys sake.\nThe final task was mapping the native API calls, which call almost directly into the underlying host Windows OSs API, with a bit of glue logic. With all of this done, Windows NT applications originally written for 1990s MIPS ran just fine on a modern-day x86_64 PC running Windows  as long as you dont need an FPU (for now).", "title": "Windows NT\u7528MIPS\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306e\u4f5c\u6210", "body": "Windows NT\u304c\u6700\u521d\u306b\u30ed\u30fc\u30f3\u30c1\u3055\u308c\u305f\u5f53\u521d\u3001\u69d8\u3005\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3078\u306e\u30dd\u30fc\u30c8\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u73fe\u5728\u306f\u3053\u308c\u3089\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5411\u3051\u306b\u66f8\u304b\u308c\u305fWindows\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u306e\u304c\u5c11\u3057\u96e3\u3057\u3044\u305f\u3081\u3001MIPS\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u305f[x86matthew]\u3002MIPS R4000 CPU\u5411\u3051\u306e32\u30d3\u30c3\u30c8Windows\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092x86 CPU\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3001MIPS PE\u30d0\u30a4\u30ca\u30ea\u3092x86\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u9069\u5207\u306b\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u89e3\u660e\u3059\u308b\u4f5c\u696d\u3092\u884c\u3044\u3001\u305d\u306e\u5f8c\u3001R4000 CPU\u306e\u547d\u4ee4\u3092x86 ISA\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\u6700\u7d42\u7684\u306b\u306f\u30011990\u5e74\u4ee3\u306bMIPS\u5411\u3051\u306b\u66f8\u304b\u308c\u305fWindows NT\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3001FPU\u3092\u9664\u3044\u3066\u73fe\u4ee3\u306ex86_64 PC\u4e0a\u306eWindows\u3067\u554f\u984c\u306a\u304f\u5b9f\u884c\u3055\u308c\u305f\u3002", "titles": ["Windows NT\u7528MIPS\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306e\u4f5c\u6210", "MIPS R4000 CPU\u5411\u3051Windows\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306ex86\u4e92\u63db\u5b9f\u884c", "Windows PE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5229\u7528\u3057\u305f\u8de8\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u30a8\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3", "1990\u5e74\u4ee3\u306eMIPS\u5411\u3051Windows NT\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u73fe\u4ee3PC\u3067\u306e\u5b9f\u884c", "\u30cd\u30a4\u30c6\u30a3\u30d6API\u30b3\u30fc\u30eb\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u3088\u308b\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5b9f\u884c"]}