{"pubDate": "2024-06-18T23:00:29", "original_title": "Programming Robots is Hard, Figuring out How to Make it Easier is Harder", "link": "https://hackaday.com/2024/06/18/programming-robots-is-hard-figuring-out-how-to-make-it-easier-is-harder/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2018/05/ros1.jpg", "original_content": "[Benjie Holson] is an experienced roboticist and wrote an interesting article published on IEEE Spectrum about how the idea most people have of non-roboticists is a myth, and efforts to target this group with simplified robotic frameworks tend to be doomed.\nNow, lets make a couple things absolutely clear right up front: He is not saying robots shouldnt be easier to program, nor is he saying that non-roboticists literally do not exist (of course they do.) The issues hes highlighting really come down to product design.\n[Benjie] points out that programming robots is super hard, but its also hard in more than one way and for more than one reason. And when people try to create a product to make it easier, they tend to commit two big product design no-nos: they focus on the wrong hard parts, and they design their product for a vaguely-defined audience that doesnt really exist. That group is the mythical non-roboticist.\nThese are actually very solid points to make in terms of product design in general. Designing a product that solves the wrong problems for a poorly-defined group isnt exactly a recipe for success. [Benjie]s advice on making a truly effective and useful API framework that genuinely lowers the bar of complexity in a useful way is similarly applicable to product design in general.\nHis first piece of advice is not to design for poorly-defined amorphous groups. Your product should serve actual needs of actual users. If you cannot name three people you have actually spoken to who would be helped by your product, you are designing for an amorphous (and possibly imaginary) group.\nThe second is to design as though your users are just as smart as you are, just less tolerant of problems stemming from rough edges like compatibility and configuration issues. Remove those so that your users can get useful work done without having to re-invent the wheel, or resort to workarounds.\nRobotic frameworks like ROS are useful and extensible, but whenever someone attempts to focus on creating a simplified framework, [Benjie] says they tend to step on the same rakes. Its a mistake [Benjie] has committed himself, and see repeated by others. We think his advice is good product design advice in general, whether for designing APIs or something else."}