{"pubDate": "2025-02-18T15:00:50", "original_title": "Hack On Self: One Minute Blitz", "link": "https://hackaday.com/2025/02/18/hack-on-self-one-minute-blitz/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/08/HackSelf.jpg", "original_content": "Have you yet stumbled upon the principle of consistently applied small amounts of work can guarantee completion of large projects? I have, and its worked out well for me  on days when I could pay attention to them, that is.\nA couple times, Ive successfully completed long-term projects by making sure to do only a little bit of it, but I do it every day. It helps a lot with the feeling you get when you approach a large project  say, cleaning up your desk after a few days of heavy-duty hacking. If youre multi-discipline, and especially if you happen to use multiple desks like me, a desk can stay occupied for a while.\nCan you do one minute of desk cleaning today? Sure doesnt feel like much time, or much effort. In a weeks time, however, you might just have a clean desk. Cleaning discrete messes is where this concept applies pretty well  you couldnt wash floors like this, but you could wipe off the dust from a few surfaces for sure.\nNow, I want to make this a habit  use it on like, seven different things a day. I wrote a script to make it possible  heres how it works for me right now.\nBuilding Upon The Seen-Before\nI relied on a few previously-discussed things for this one. Main one is the Headphone Friend project  a pocketable Linux device, streaming audio from my laptop as I walk around my room. As a reminder, the headphones also have a button that emits HID events when pressed/released, and I have a small piece of software that can map actions to combinations of short-medium-long presses of that button.\nAnother necessity was a bit of software  dodging my questing system away from laptop = system breaks mistake, I wanted to put everything into my headphones, even the task names, trying to reach a flow through a series of 1-minute tasks. Of course, I reused the old sound library, but I also needed TTS generation on the fly! I went for PicoTTS with a simple wrapper  its not the best TTS system, but its damn fast, and perfectly suited for a prototype.\nFor the button-to-action mapping script, I had to expose some sort of API, to avoid merging the button scanning code and the task switching code. After a little deliberation, I picked websockets  they work decently well, and theyre quite portable, so I could run the button monitoring itself on the Headphone Friend device, and the main software on my laptop, for prototyping purposes.\nNow, the more interesting question  how do I build the algorithm?\n\nCan Be More, Cant Be Less\nThe main thing about the one-minute timers like these is that you can spend longer on the task if you really get into it, you just cant spend less than one minute. So, the one-minute upper bound is not enforced  only the lower bound is, really, which means that a next task button is a requirement.\nAt the scripts core, I wrote a little state machine describing the sprints, and tied my tiny notification-sound-playback library into it. It goes through the five tasks Ive defined, making a little beep after a minute has passed, and waiting for me to press the next keypress signaling that Im done with the task. After five tasks are done, it stops, and waits for the start magic keypress sequence  maybe the next sprint is tomorrow, maybe its a couple days later, but I get there eventually.\nSo far, Ive only had to modify the code a little bit  each task now has a name in the system, but also an actually TTS-pronounceable string, since the picoTTS model does mis-pronounce here and there. Other than that, the very simple prototype works. Ive tried to upgrade it from picoTTS, compiling piper that can do a good few different voices and languages, but Ive been firmly stuck on cmake intricacies so far.\nMiddle-Of-Project Lull\nCurrently, Im starting with five tasks  kitchen counter cleaning, hardware desk cleaning, sorting the clothes (in whichever way they need sorting), and cleaning the floors in two rooms. That makes for five minutes minimum, and oftentimes, its really just five minutes  to me, feels like its important not to get into the flow too much, otherwise the five-minute blitz might become a twenty-minute one, and it gets into kind a bother to do mental territory.\nThe result is, my cooking and hacking surfaces are a little more cleaner and more ready to go on average, and its easier to get clothes washing done if there isnt an unsorted pile to deal with already. I think I most enjoy the movement of it  its become a nice way to spend 5-10 minutes moving around the house, breaking the rut. I do need to add some sort of stop/pause mechanism  sometimes I get too involved in a particular task and could really use a break. My state machine isnt yet involved enough for this, and maybe soon this might need an overhaul.\nAt the moment, Im also looking to tie this into my questing system  I havent attached logging to this one yet, but since the questing system includes that, itd be two-birds-with-one-stone approach. For the questing system, Im still using the text file backend, which does limit things, but Ive been meaning to add external action support to it anyway  tying task completion to quest progression is a no-brainer!\nCurrently, this script and I are in the honeymoon phase: its working but Im waiting for it to fail in more ways, and seeing whether it survives long-term. Based on lessons Ive been trying to pull from the questing system, Im trying not to overstretch it  five tasks is enough. For now, its pretty nice to be on the island of success in a sea of older solutions that withered away. This time, Im writing before the full end-conclusion phase, because its nice and reassuring when projects work out, and Id just like to share in that a little bit.", "title": "\u300c\u5c0f\u3055\u306a\u4f5c\u696d\u3067\u5927\u304d\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b8c\u9042\u3059\u308b\u65b9\u6cd5\u300d", "body": "\u5c0f\u3055\u306a\u4f5c\u696d\u3092\u65e5\u3005\u884c\u3046\u3053\u3068\u3067\u5927\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u6210\u529f\u3055\u305b\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u3044\u307e\u3059\u3002", "titles": ["\u300c\u5c0f\u3055\u306a\u4f5c\u696d\u3067\u5927\u304d\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b8c\u9042\u3059\u308b\u65b9\u6cd5\u300d", "\u300c1\u65e51\u5206\u306e\u30c7\u30b9\u30af\u6e05\u6383\u3067\u7247\u4ed8\u3051\u308b\u7fd2\u6163\u3092\u8eab\u306b\u3064\u3051\u308b\u300d", "\u300c\u30dd\u30fc\u30bf\u30d6\u30ebLinux\u30c7\u30d0\u30a4\u30b9\u3092\u4f7f\u3063\u305f\u30bf\u30b9\u30af\u7ba1\u7406\u306e\u8a66\u307f\u300d", "\u300c\u30bf\u30b9\u30af\u5b8c\u4e86\u3068\u30af\u30a8\u30b9\u30c8\u9032\u884c\u3092\u7d50\u3073\u3064\u3051\u308b\u30a2\u30a4\u30c7\u30a2\u300d", "\u300c\u96fb\u5b50\u5de5\u4f5c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6210\u529f\u4f53\u9a13\u3092\u632f\u308a\u8fd4\u308b\u300d"]}