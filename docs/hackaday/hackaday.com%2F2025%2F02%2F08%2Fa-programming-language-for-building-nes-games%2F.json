{"pubDate": "2025-02-08T12:00:00", "original_title": "A Programming Language for Building NES Games", "link": "https://hackaday.com/2025/02/08/a-programming-language-for-building-nes-games/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/02/nesfab_feat.jpg", "original_content": "Generally speaking, writing your own games for retro consoles starts with C code. Youll need to feed that through a console-specific tool-chain, and theres certainly going to be some hoops to jump through, but if everything goes as expected, you should end up with a ROM file that can be run in an emulator or played on real hardware if youve got the necessary gadgetry to load it.\nBut NESFab takes things in a slightly different direction. While the code might look like C, its actually a language specifically tailored for developing games on the Nintendo Entertainment System (NES). The documentation claims that this targeted language not only compiles into considerably faster 6502 assembly than plain C on GCC or LLVM, but is designed to work around the strengths (and weaknesses) of the NES hardware.\nLooking deeper into the example programs and documentation, NESFab offers quite a few quality of life features that should make developing NES games easier. For one thing, theres integrated asset loading which automatically converts your image files into something the console can understand. One just needs to drop the image file into the source directory, open it in the code with the file function, and the build system will take care of converting it on the fly as the ROM is built. The nuances of bank switching  the organization of code and assets so they fit onto the physical ROM chips on the NES cartridge  are similarly abstracted away.\nThe obvious downside of NESFab is that, as with something like GB Studio, youre going to end up putting effort into learning a programming environment that works for just one system. So before you get started, you really need to decide what your goals are. If youre a diehard NES fan that has no interest in working on other systems, learning a language and build environment specifically geared to that console might make a certain degree of sense. But if youd like to see your masterpiece running on more than just one system, working in straight C is still going to be your best bet.", "title": "NES\u5c02\u7528\u30b2\u30fc\u30e0\u958b\u767a\u306b\u6700\u9069\u306aNESFab\u306e\u9b45\u529b", "body": "NES\u30b2\u30fc\u30e0\u958b\u767a\u306b\u306fNESFab\u3068\u3044\u3046\u7279\u5316\u8a00\u8a9e\u304c\u3042\u308a\u3001\u7c21\u4fbf\u3055\u3068\u52b9\u7387\u6027\u3092\u63d0\u4f9b\u3002", "titles": ["NES\u5c02\u7528\u30b2\u30fc\u30e0\u958b\u767a\u306b\u6700\u9069\u306aNESFab\u306e\u9b45\u529b", "NESFab\u3067\u7c21\u5358\u306b\u30ec\u30c8\u30ed\u30b2\u30fc\u30e0\u3092\u5236\u4f5c\u3059\u308b\u65b9\u6cd5", "C\u8a00\u8a9e\u3068NES\u306b\u7279\u5316\u3057\u305f\u8a00\u8a9e\u306e\u9055\u3044", "NES\u30b2\u30fc\u30e0\u958b\u767a\u306e\u305f\u3081\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3068\u306f\uff1f", "NESFab\u3092\u4f7f\u3063\u305f\u30b2\u30fc\u30e0\u958b\u767a\u306e\u5229\u70b9\u3068\u6b20\u70b9"]}