{"pubDate": "2023-10-14T14:00:29", "original_title": "Close to the Metal", "link": "https://hackaday.com/2023/10/14/close-to-the-metal/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2019/02/westerndigitalriscv.jpg", "original_content": "Firmware is caught between hardware and software. What do I mean? Microcontroller designers compete on how many interesting and useful hardware peripherals they can add to the chips, and they are all different on purpose. Meanwhile, software designers want to abstract away from the intricacies and idiosyncrasies of the hardware peripherals, because code wants to be generic and portable. Software and hardware designers are Montagues and Capulets, and we\u2019re caught in the crossfire.\nI\u2019m in the middle of a design that takes advantage of perhaps one of the most idiosyncratic microcontroller peripherals out there \u2013 the RP2040\u2019s PIOs. Combining these with the chip\u2019s direct memory access (DMA) controllers allows some fairly high-bandwidth processing, without bogging down the CPUs. But because I want this code to be usable and extensible by a wide audience, I\u2019m also trying to write it in MicroPython. And configuring DMA controllers is just too idiosyncratic for MicroPython.\nBut there\u2019s an escape hatch. In my case, it\u2019s courtesy of the machine.mem32 function, which lets you read and write directly into the chip\u2019s memory, including all of the memory-mapped configuration registers. Sure, it\u2019s absurdly low-level, but it means that anything you read about in the chip\u2019s datasheet, you can do right away, and from within the relative comfort of a Micropython program. Other languages have their PEEK and POKE equivalents as well, or allow inline assembler, or otherwise furnish you the tools to get closer to the metal without having to write all the rest of your code low level.\nI\u2019m honestly usually a straight-C or even Forth programmer, but this experience of using a higher-level language and simultaneously being able to dive down to the lowest levels of bit-twiddling at the same time has been a revelation. If you\u2019re just using Micropython, open up your chip\u2019s datasheet and see what it can offer you. Or if you\u2019re programming at the configure-this-register level, check out the extra benefits you can get from a higher-level language. You can have your cake and eat it too!\n\nThis article is part of the Hackaday.com newsletter, delivered every seven days for each of the last 200+ weeks. It also includes our favorite articles from the last seven days that you can see on the web version of the newsletter.\n\nWant this type of article to hit your inbox every Friday morning? You should sign up!\n\n", "title": "\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u30c7\u30b6\u30a4\u30f3\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u72ed\u9593\u3067\u56da\u308f\u308c\u305f\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3068\u306f\uff1f", "body": "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u9593\u3067Firmware\u306f\u56da\u308f\u308c\u3066\u3044\u308b\u3002\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8a2d\u8a08\u8005\u306f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5468\u8fba\u6a5f\u5668\u3092\u8ffd\u52a0\u3057\u7af6\u3044\u5408\u3063\u3066\u3044\u308b\u304c\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u8a2d\u8a08\u8005\u306f\u6c4e\u7528\u6027\u3068\u79fb\u690d\u6027\u3092\u8ffd\u6c42\u3057\u3066\u3044\u308b\u3002RP2040\u306ePIO\u3092\u4f7f\u3063\u3066\u9ad8\u5e2f\u57df\u5e45\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u304c\u3001MicroPython\u3067\u306fDMA\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8a2d\u5b9a\u304c\u96e3\u3057\u3044\u305f\u3081\u3001machine.mem32\u3092\u4f7f\u7528\u3057\u3066\u76f4\u63a5\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4f4e\u30ec\u30d9\u30eb\u306a\u64cd\u4f5c\u3082\u5bb9\u6613\u306b\u884c\u3048\u308b\u3002", "titles": ["\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u30c7\u30b6\u30a4\u30f3\u3068\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u72ed\u9593\u3067\u56da\u308f\u308c\u305f\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3068\u306f\uff1f", "RP2040\u306ePIO\u3092\u4f7f\u3063\u305f\u9ad8\u901f\u51e6\u7406\u3068\u30de\u30a4\u30af\u30edPython\u306e\u4f4e\u30ec\u30d9\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b", "\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3055\u308c\u305f\u30ec\u30b8\u30b9\u30bf\u306b\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3067\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u8a2d\u5b9a\u304c\u53ef\u80fd", "\u9ad8\u30ec\u30d9\u30eb\u8a00\u8a9e\u3068\u4f4e\u30ec\u30d9\u30eb\u306e\u30d3\u30c3\u30c8\u64cd\u4f5c\u306e\u4e21\u7acb\u304c\u3082\u305f\u3089\u3059\u65b0\u305f\u306a\u767a\u898b", "\u96fb\u5b50\u5de5\u4f5c\u306b\u304a\u3051\u308b\u30de\u30a4\u30af\u30edPython\u306e\u6f5c\u5728\u80fd\u529b\u3068\u53d6\u308a\u7d44\u3080\u4fa1\u5024"]}