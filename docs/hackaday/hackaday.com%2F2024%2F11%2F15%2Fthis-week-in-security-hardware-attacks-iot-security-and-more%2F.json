{"pubDate": "2024-11-15T15:00:08", "original_title": "This Week in Security: Hardware Attacks, IoT Security, and More", "link": "https://hackaday.com/2024/11/15/this-week-in-security-hardware-attacks-iot-security-and-more/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "This week starts off with examinations of a couple hardware attacks that you might have considered impractical. Take a Ball Grid Array (BGA) NAND removal attack, for instance. The idea is that a NAND chip might contain useful information in the form of firmware or hard-coded secrets.\nThe question is whether a BGA desolder job puts this sort of approach out of the reach of most attackers. Now, this is Hackaday. We regularly cover how our readers do BGA solder jobs, so it should come as no surprise to us that less than two-hundred Euro worth of tools, and a little know-how and bravery, was all it took to extract this chip. Plop it onto a pogo-pin equipped reader, use some sketchy Windows software, and boom youve got firmware.\nWhat exactly to do with that firmware access is a little less straightforward. If the firmware is unencrypted and theres not a cryptographic signature, then you can just modify the firmware. Many devices include signature checking at boot, so that limits the attack to finding vulnerabilities and searching for embedded secrets. And then worst case, some platforms use entirely encrypted firmware. That means theres another challenge, of either recovering the key, or finding a weakness in the encryption scheme.\nGlitches to the Rescue\nSpeaking of looking for those vulnerabilities, lets talk about glitching. Weve talked about some interesting techniques in the past, like using a peizo element from a lighter. This coverage takes the opposite technique, shorting pins to ground during code runtime. [Maurizio Agazzini] takes a look at glitching technique on the ESP32.\nThe key, it seems, is setting up a repeatable test case. I like a quote from the article, that the goal is to make a \u201cworld\u201d considered non-deterministic a little more deterministic. In this case, that means understanding the exact instructions that the MCU is running, triggering an exception to know the exact state the MCU is in after the test, and exactly timing the fault attempt.\nDo 36,000 attempts at different timings and pulse lengths, chart it out, and see what happens. And there are some interesting observations there. One of the most interesting rabbit holes from the article is debunking of the idea of skipped instructions as the result of glitches. What actually seems to happen, when the glitch is a crowbar circuit to ground, is that individual bits get pulled to 0. That can corrupt either the instruction or memory itself. Understanding those glitches is key to figuring out how to abuse them. Well be keeping an eye out for the next installment in this one.\nThe S in IOT Stands for Security\nClarotys Team82 took aim at the OvrC cloud platform, an IoT remote management solution, and found some problems. And when I say some problems, I really mean that every device connected to the cloud controller could be fully pwned. Starting with an easy enumeration using MAC Addresses, every device could be mapped and determined if it was claimed or not. The nutty part here is that users that opted out of cloud control were just considered unclaimed devices, making takeover even easier.\nClaiming a device was intended to require both the MAC Address and a unique serial number. A URL endpoint on the platform actually skipped verifying the serial number, allowing for easy claiming of any unclaimed device with only a MAC address. And claimed devices? The OvrC platform has support for device hubs, where is a local management device where a user can pair multiple individual IoT devices. Impersonate a hub, and you can force already claimed devices to the unclaimed status.\nOh, and hub devices had a hidden superuser account with a password derived from the MAC address and another knowable service tag value. And with Superuser access, theres a diagnostics menu that includes direct command injection. So theres that. OvrC has addressed and fixed the reported flaws, making for a bit more secure IoT devices.\nBinaryFormatter is Insecure and Cant Be Made Secure\nThat title isnt the sort of thing you want to hear from your upstream vendor, about a function call youre using in your code. Here we have Watchtowr, in their gloriously snarky style, detailing a deserialization flaw in Citrixs Virtual Apps and Desktops. This is one of those thin client solutions, where the read hard work is done on a central machine in the server room.\nOne of the killer features of this enterprise app is session recording. Thats the ability to spy on observe users, and play it back later for analysis. The problem is that this data has to get serialized and streamed over the network. And in a weird turn of programming fate, the MSMQ service that handles this is accessible over HTTP. Thats SOAP over HTTP, if you really must know. And because of the reliance on BinaryFormatter, its remotely exploitable. This ends up as a remote code execution bug, and the resolution is as yet not entirely known. Citrix has received and confirmed the bug, and the disclosure was set for November 12, but no CVE or formal patch announcement has been made.\nBits and Bytes\nIm not sure if its more insulting or less insulting to fall to a ransomware attack where its just Windows Bitlocker thats doing the encryption. Apparently the criminals behind ShrinkLocker have taken the approach that theres no reason to bother actually writing encryption code for their ransomware, since Microsoft has perfectly serviceable encryption already. The good news is that as one might expect from such coding laziness, the implementation is flawed, and there is a decryptor available that can potentially recover the password.\nIn a strike against fraud and global computer crime, law enforcement agencies have seized a whopping 22,000 IP addresses, and made 41 arrests. Dubbed Operation Synergia II, this one is interesting in that much of the law enforcement action happened in China and other Eastern countries, with support from both Kaspersky and Interpol.\nTheres a new sneaky way to smuggle malicious payloads on MacOS. This one seems to be coming from North Koreas Lazarus group. MacOS has extended Attributes for files and directories, and can apparently be used to hold raw text. Its not visible in Finder, but can be found with xattr command. In this case, its not a vulnerability, but simply a very uncommon place to sneak some malicious script onto a system.", "title": "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u653b\u6483\u306e\u5b9f\u614b\uff1aBGA NAND\u30c1\u30c3\u30d7\u306e\u53d6\u308a\u5916\u3057\u306b\u6210\u529f", "body": "\u4eca\u9031\u306f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u653b\u6483\u3084IoT\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002", "titles": ["\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u653b\u6483\u306e\u5b9f\u614b\uff1aBGA NAND\u30c1\u30c3\u30d7\u306e\u53d6\u308a\u5916\u3057\u306b\u6210\u529f", "\u30b0\u30ea\u30c3\u30c1\u653b\u6483\u306e\u65b0\u305f\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\uff1aESP32\u3067\u306e\u691c\u8a3c\u65b9\u6cd5", "IoT\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8106\u5f31\u6027\uff1aOvrC\u30af\u30e9\u30a6\u30c9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u5371\u967a\u6027", "BinaryFormatter\u306e\u8106\u5f31\u6027\uff1aCitrix\u306e\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c\u30d0\u30b0", "\u30e9\u30f3\u30b5\u30e0\u30a6\u30a7\u30a2\u306e\u65b0\u624b\u6cd5\uff1aWindows Bitlocker\u3092\u60aa\u7528\u3057\u305fShrinkLocker"]}