{"pubDate": "2025-07-07T11:00:00", "original_title": "160-core RISC V Board is the m.2 CoProcessor You Didn\u2019t know you needed", "link": "https://hackaday.com/2025/07/07/160-core-risc-v-board-is-the-m-2-coprocessor-you-didnt-know-you-needed/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/07/riscVcluster-feature.png", "original_content": "Aside from GPUs, you dont hear much about co-processors these days. [bitluni] perhaps missed those days, because he found a way to squeeze a 160 core RISC V supercluster onto a single m.2 board, and shared it all on GitHub.\nOK, sure, each core isnt impressive hes using CH32V003, so each core is only running at 48 MHz, but with 160 of them, surely it can do something? This is a supercomputer by mid-80s standards, after all.\u00a0 Well, like anyone else with massive parallelism, [bitluni] decided to try a raymarcher. Its not going to replace RTX anytime soon, but it makes for a good demo.\nLike his previous m.2 project, an LED matrix,\u00a0 the cluster is communicating over PCIe via a WCH CH382 serial interface. Unlike that project, blinkenlights werent possible: the tiny, hair-thin traces couldnt carry enough power to run the cores and indicator LEDs at once. With the power issue sorted, the serial interface is the big bottleneck. It turns out this cluster can crunch numbers much faster than it can communicate. That might be a software issue, however, as the cluster isnt using all of the CH382s bandwidth at the moment. While that gets sorted there are low-bandwidth, compute-heavy tasks he can set for the cluster. [bitluni] wont have trouble thinking of them; he has a certain amount of experience with RISCV microcontroller clusters.\nWe were tipped off to this video by [Steven Walters], who is truly a prince among men. If you are equally valorous, please consider dropping informational alms into our ever-present tip line.\u00a0 \n\n"}