{"pubDate": "2024-08-11T20:00:39", "original_title": "If You Give A Dev A Tricked Out Xbox, They\u2019ll Patch Halo 2", "link": "https://hackaday.com/2024/08/11/if-you-give-a-dev-a-tricked-out-xbox-theyll-patch-halo-2/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/08/pop_in_fbf.png", "original_content": "[Ryan Miceli] had spent a few years poring over and reverse-engineering Halo 2 when a friend asked for a favor. His friend created an improved Xbox with significant overclocks, RAM upgrades, BIOS hacks, and a processor swap. The goal was simple: patch the hardcoded maximum resolution from 480p to 720p and maybe even 1080p. With double the CPU clock speed but only a 15% overclock on the GPU, [Ryan] got to work.\nStep one was to increase the size of the DirectX framebuffers. Increasing the output resolution introduced severe graphical glitches and rendering bugs. The game reuses the framebuffers multiple times as memory views, and each view encodes a header at the top with helpful information like width, height, and tiling. After patching that, [Ryan] had something more legible, but some models werent loading (particularly the water in the title screen). The answer was the texture accumulation layer. The Xbox has a hardware limitation of only sampling four textures per shader pass, which means you need a buffer the size of the render resolution to accumulate the textures if you want to sample more than four textures. Trying to boot the game resulted in an out-of-memory crash. The Xbox [Ryan] was working on had been upgraded with an additional 64MB of RAM, but the memory allocator in Halo 2 wasnt taking advantage of it. Yet.\nTo see where the memory was going, [Ryan] wrote a new tool called XboxImageGrabber to show where memory was allocated and by whom. Most games make a few substantial initial allocations from the native allocator, then toss it over to a custom allocator tuned for their game. However, the extra 64MB of RAM was in dev consoles and meant as debug RAM, which meant the GPU couldnt properly access it. Additionally, between the lower 64MB and upper is the Xbox kernel. Now, it became an exercise of patching the allocator to work with two blobs of memory instead of one contiguous one. It also moved runtime data into the upper 64MB while keeping video allocations in the lower. Ultimately, [Ryan] found it easier to patch the kernel to allow memory allocations the GPU could use in the upper 64MB of memory. Running the game at 720p resulted in only a semi-playable framerate, dropping to 10fps in a few scenes.\nAfter some initial tests, [Ryan] concluded that it wasnt the GPU or the CPU that was the bottleneck but the swap chain. Halo 2 turns VSync on by default, meaning it has to wait until a blank period before swapping between its two framebuffers. A simple tweak is to add a third frame buffer. The average FPS jumped 10%, and the GPU became the next bottleneck to tweak. With a light GPU overclock, the game was getting very close to 30fps. Luckily for [Ryan], no BIOS tweak was needed as the GPU clock hardware can be mapped and tweaked as an MMIO. After reverse engineering, a debugging feature to visual cache evictions, [Ryan] tuned the texture and geometry cache to minimize pop-ins that the original game was infamous for.\nOverall, its an incredible hack with months of hard work behind it. The code for the patch is on Github, and theres a video after the break comparing the patched and unpatched games. If you still need more Halo in your life, why not make yourself a realistic battle rifle from the game?\n\n", "title": "\u300cHalo 2\u300d\u3092720p\u4ee5\u4e0a\u306e\u89e3\u50cf\u5ea6\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u65b9\u6cd5", "body": "Halo 2\u3092\u6539\u9020\u3057\u3066\u6700\u5927\u89e3\u50cf\u5ea6\u3092720p\u306b\u5909\u66f4\u3002CPU\u30af\u30ed\u30c3\u30af\u3092\u500d\u306b\u3057\u3001GPU\u309215%\u30aa\u30fc\u30d0\u30fc\u30af\u30ed\u30c3\u30af\u3002\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u62e1\u5927\u3084\u30e1\u30e2\u30ea\u306e\u6700\u9069\u5316\u3092\u65bd\u3059\u3002\u30b2\u30fc\u30e0\u309230fps\u3067\u30d7\u30ec\u30a4\u53ef\u80fd\u306b\u3002\u624b\u6cd5\u306fGithub\u3067\u516c\u958b\u3002", "titles": ["\u300cHalo 2\u300d\u3092720p\u4ee5\u4e0a\u306e\u89e3\u50cf\u5ea6\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u65b9\u6cd5", "Xbox\u306e\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u6700\u9069\u5316\u3057\u3066\u30b2\u30fc\u30e0\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b", "Halo 2\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306eGPU\u30aa\u30fc\u30d0\u30fc\u30af\u30ed\u30c3\u30af", "Xbox\u306e\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6539\u5584\u3057\u3066\u9ad8\u89e3\u50cf\u5ea6\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u3092\u5b9f\u73fe\u3059\u308b", "Halo 2\u306e\u6539\u826fXbox\u3067\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u6700\u9069\u5316"]}