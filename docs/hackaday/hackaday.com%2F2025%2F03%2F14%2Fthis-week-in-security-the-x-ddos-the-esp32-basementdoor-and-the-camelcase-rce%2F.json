{"pubDate": "2025-03-14T14:00:27", "original_title": "This Week in Security: The X DDoS, The ESP32 Basementdoor, and the camelCase RCE", "link": "https://hackaday.com/2025/03/14/this-week-in-security-the-x-ddos-the-esp32-basementdoor-and-the-camelcase-rce/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "We would be remiss if we didnt address the X Distributed Denial of Service (DDoS) attack thats been happening this week. It seems like everyone is is trying to make political hay out of the DDoS, but were going to set that aside as much as possible and talk about the technical details. Elon made an early statement that X was down due to a cyberattack, with the source IPs tracing back to the Ukraine area.\nThe latest reporting seems to conclude that this was indeed a DDoS, and a threat group named Dark Storm has taken credit for the attack. Dark Storm does not seem to be of Ukrainian origin or affiliation.\nWere going to try to read the tea leaves just a bit, but remember that about the only thing we know for sure is that X was unreachable for many users several times this week. This is completely consistent with the suspected DDoS attack. The quirk of modern DDoS attacks is that the IP addresses on the packets are never trustworthy.\nThere are two broad tactics used for large-scale DDoS attacks, sometimes used simultaneously. The first is the simple botnet. Computers, routers, servers, and cameras around the world have been infected with malware, and then remote controlled to create massive botnets. Those botnets usually come equipped with a DDoS function, allowing the botnet runner to task all the bots with sending traffic to the DDoS victim IPs. That traffic may be UDP packets with spoofed or legitimate source IPs, or it may be TCP Synchronization requests, with spoofed source IPs.\nThe other common approach is the reflection or amplification attack. This is where a public server can be manipulated into sending unsolicited traffic to a victim IP. Its usually DNS, where a short message request can return a much larger response. And because DNS uses UDP, its trivial to convince the DNS server to send that larger response to a victims address, amplifying the attack.\nPut these two techniques together, and you have a botnet sending spoofed requests to servers, that unintentionally send the DDoS traffic on to the target. And suddenly its understandable why its so difficult to nail down attribution for this sort of attack. It may very well be that a botnet with a heavy Ukrainian presence was involved in the attack, which at the same time doesnt preclude Dark Storm as the originator. The tea leaves are still murky on this one.\n\nThat ESP32 Backdoor\nAs Maya says, It Really Wasnt a backdoor. The Bleeping Computer article and Tarlogic press release have both been updated to reflect the reality that this wasnt really a backdoor. Given that the original research and presentation were in Spanish, were inclined to conclude that the backdoor claim was partially a translation issue.\nThe terminology storm set aside, what researchers found really was quite interesting. The source of information was official ESP32 binaries that implement the Bluetooth HCI, the Host Controller Interface. Its a structured format for talking to a Bluetooth chip. The official HCI has set aside command space for vendor-specific commands. The backdoor that was discovered was this set of undocumented vendor-specific commands.\nThese commands were exposed over the HCI interface, and included low-level control over the ESP32 device. However, for the vast majority of ESP32 use cases, this interface is only available to code already running on the device, and thus isnt a security boundary violation. To Espressifs credit, their technical response does highlight the case of using an ESP32 in a hosted mode, where an external processor is issuing HCI commands over something like a serial link. In that very narrow case, the undocumented HCI commands could be considered a backdoor, though still requires compromise of the controlling device first.\nAll told, its not particularly dangerous as a backdoor. Its a set of undocumented instructions that expose low-level functions, but only from inside the house. I propose a new term for this: a Basementdoor.\nThe Fake Recruitment Scam\nThe fake recruitment scam isnt new to this column, but this is the first time weve covered a first-hand account of it. This is the story of [Ron Jansen], a freelance developer with impressive credentials. He got a recruiters message, looking to interview him for a web3 related position. Interviews often come with programming tasks, so it wasnt surprising when this one included instructions to install something from Github using npm and do some simple tasks.\nBut then, the recruiter and CTO both went silent, and [Ron] suddenly had a bad feeling about that npm install command. Looking through the code, it looked boring, except for the dependency NPM package, process-log. With only 100-ish weekly downloads, this was an obvious place to look for something malicious. It didnt disappoint, as this library pulled an obfuscated blob of JSON code and executed it during install. The deobfuscated code establishes a websocket connection, and uploads cookies, keychains, and any other interesting config or database files it can find.\nOnce [Ron] new he had been had, he started the infuriating-yet-necessary process of revoking API keys, rotating passwords, auditing everything, and wiping the affected machines drive. The rest of the post is his recommendations for how to avoid falling for this scam yourself. The immediate answer is to run untrusted code in a VM or sandbox. There are tools like Deno that can also help, doing sandboxing by default. Inertia is the challenge, with a major change like that.\nCamel CamelCase RCE\nApache Camel is a Java library for doing Enterprise Integration Patterns. AKA, its network glue code for a specific use case. It sends data between endpoints, and uses headers to set certain options. One of the important security boundries there is that internal headers shouldnt be set by outside sources. To accomplish that, those headers are string compared with Camel and org.apache.camel as the starting characters. The problem is that the string comparison is exact, while the header names themselves are not case sensitive. Its literally a camelCase vulnerability. The result is that all the internal headers are accessible from any client, via this case trickery.\nThe vulnerability has been fixed in the latest release of Camel. The seriousness of this vulnerability depends on the component being connected to. Akamai researchers provided a sample application, where the headers were used to construct a command. The access to these internal values makes this case an RCE. This ambiguity is why the severity of this vulnerability is disputed.\nBits and Bytes\nResearchers at Facebook have identified a flaw in the FreeType font rending library. Its a integer underflow leading to a buffer overflow. An attacker can specify a very large integer value, and the library will add to that variable during processing. This causes the value to wrap around to a very small value, resulting in a buffer much too small to hold the given data. This vulnerability seems to be under active exploitation.\nWe dont normally see problems with a log file leading to exploitation, but that seems to be the situation with the Below daemon. The service runs as root, and sets the logfile to be world readable. Make that logfile a symlink to some important file, and when the service starts, it overwrites the target files permissions.\nMicrosofts Patch Tuesday includes a whopping six 0-day exploits getting fixed this month. Several of these are filesystem problems, and at least one is an NTFS vulnerability that can be triggered simply by plugging in a USB drive.\nThe ruby-saml library had a weird quirk: it used two different XML parsers while doing signature validations. That never seems to go well, and this is not any different. It was possible to pack two different signatures into a single XML document, and the two different parsers would each see the file quite differently. The result was that any valid signature could be hijacked to attest as any other user. Not good. An initial fix has already landed, with a future release dropping one of the XML parsers and doing a general security hardening pass.", "title": "DDoS\u653b\u6483\u306e\u6280\u8853\u7684\u8a73\u7d30\u3068\u305d\u306e\u5f71\u97ff", "body": "\u4eca\u9031\u3001X\u304cDDoS\u653b\u6483\u3092\u53d7\u3051\u3001Dark Storm\u304c\u4e3b\u72af\u3068\u81ea\u79f0\u3002\u653b\u6483\u65b9\u6cd5\u3084\u5f71\u97ff\u306e\u8a73\u7d30\u304c\u5831\u544a\u3055\u308c\u3066\u3044\u307e\u3059\u3002", "titles": ["DDoS\u653b\u6483\u306e\u6280\u8853\u7684\u8a73\u7d30\u3068\u305d\u306e\u5f71\u97ff", "ESP32\u306e\u300c\u30d0\u30c3\u30af\u30c9\u30a2\u300d\u3068\u305d\u306e\u5b9f\u614b", "\u507d\u306e\u30ea\u30af\u30eb\u30fc\u30c8\u8a50\u6b3a\u306b\u95a2\u3059\u308b\u5b9f\u4f53\u9a13\u30ec\u30dd\u30fc\u30c8", "Apache Camel\u306e\u65b0\u305f\u306aRCE\u8106\u5f31\u6027\u3068\u305d\u306e\u5bfe\u7b56", "\u6700\u65b0\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u3068\u4fee\u6b63\u60c5\u5831\u307e\u3068\u3081"]}