{"pubDate": "2024-02-10T03:00:34", "original_title": "Breaking Through The 1 MB Barrier In DOS With Unreal Mode And More", "link": "https://hackaday.com/2024/02/09/breaking-through-the-1-mb-barrier-in-dos-with-unreal-mode-and-more/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/ms-dos_vs_80386.jpg", "original_content": "The memory map of the original 8086 computer with its base and extended memory made the original PC rather straightforward, but also posed countless issues for DOS-based applications as they tried to make use of memory beyond the legacy 1 MB address space. The initial ways to deal with this like EMS, XMS and UMB were rather cumbersome and often impractical, but with the arrival of the 80286 and 80386 processors more options opened up, including protected mode. More interestingly, this led to unreal mode, DOS extenders and the somewhat more obscure LOADALL instruction, as covered by [Julio Merino] in a new article.\nThis article builds on the first one which covered the older methods and covered the basics of protected mode. Where protected mode is convenient compared to real mode is that with the former the memory accesses go via the MMU and thus allows for access to 16 MB on the 80286 and 4 GB on the 80386. The segment descriptors and resolving of these that make this possible can be (ab)used on the 80286 and up by realizing that these segment descriptors are also used in real mode. Unreal mode is thus about switching to protected mode, loading arbitrary segment descriptors and switching back to real mode. As this is outside the original processor spec, it is commonly called unreal mode.\n\nRepresentation of the structure of a DOS-extended application and how it relates to a DOS extender, DOS drivers, and raw hardware access. (Credit: Julio Merino)\nIn the article [Julio] goes into a lot of detail on this, as well as an assembly implementation of unreal mode, before diving into the fascinating topic of DOS extenders. These are basically the reason why gaming under DOS on the level of Doom and Duke Nukem 3D was a thing at all, with the DOS/4G 32-bit DOS extender (in the form of the Watcom C-compiler DOS/4GW version mostly) forming the backbone. By switching between real and protected mode, applications got the best of both worlds.\nThe way that this integrated in Windows also gets its own summary, in the form of the DOS Protected Mode Interface (DPMI), which gets around issues with nesting protected modes (until virtualization). Despite the improvements over EMS, XMS and kin, this era of DOS applications came with enough pitfalls (and workarounds) of its own.", "title": "8086\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3068\u62e1\u5f35\u30e1\u30e2\u30ea\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5", "body": "8086\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306f\u7c21\u5358\u3060\u304c\u3001DOS\u30d9\u30fc\u30b9\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c1MB\u4ee5\u4e0a\u306e\u30e1\u30e2\u30ea\u3092\u4f7f\u3046\u306e\u306f\u554f\u984c\u3060\u3063\u305f\u300280286\u306880386\u306b\u3088\u3063\u3066\u65b0\u3057\u3044\u65b9\u6cd5\u304c\u958b\u304b\u308c\u3001\u4fdd\u8b77\u30e2\u30fc\u30c9\u3084\u30a2\u30f3\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u306a\u3069\u304c\u767b\u5834\u3057\u305f\u3002DOS\u30a8\u30af\u30b9\u30c6\u30f3\u30c0\u30fc\u3082\u30b2\u30fc\u30e0\u306e\u767a\u5c55\u306b\u5bc4\u4e0e\u3057\u305f\u3002\u3057\u304b\u3057\u3001EMS\u3001XMS\u306b\u306f\u554f\u984c\u3082\u3042\u3063\u305f\u3002DPMI\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002", "titles": ["8086\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3068\u62e1\u5f35\u30e1\u30e2\u30ea\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5", "80286\u306880386\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u767b\u5834\u306b\u3088\u308a\u62e1\u5f35\u30e1\u30e2\u30ea\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5897\u3048\u308b", "DOS\u30a8\u30af\u30b9\u30c6\u30f3\u30c0\u30fc\u306b\u3088\u308bDOS\u30b2\u30fc\u30e0\u306e\u5b9f\u73fe\u65b9\u6cd5", "Unreal\u30e2\u30fc\u30c9\u3067\u306e\u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9\u30e2\u30fc\u30c9\u3068\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u306e\u5207\u308a\u66ff\u3048", "DOS Protected Mode Interface (DPMI)\u306b\u3088\u308bWindows\u3078\u306e\u7d71\u5408\u3068\u305d\u306e\u554f\u984c\u89e3\u6c7a\u65b9\u6cd5"]}