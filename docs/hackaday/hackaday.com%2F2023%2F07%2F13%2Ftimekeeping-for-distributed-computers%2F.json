{"pubDate": "2023-07-13T18:30:57", "original_title": "Timekeeping For Distributed Computers", "link": "https://hackaday.com/2023/07/13/timekeeping-for-distributed-computers/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/clock-main.jpg", "original_content": "Ask any programmer who has ever had to deal with timekeeping on a computer, and theyre likely to go on at length about how it can be a surprisingly difficult thing to keep track of. Time zones, leap years, leap seconds, various timekeeping standards, clock drift, and even relativity are all problems that can creep in to projects. Issues with timekeeping are exacerbated in distributed systems as well, adding another layer of complexity when we need to reliably determine the order that a series of actions occurred across a number of different computers with a high precision. One solution to this problem is the implementation of a vector clock.\nWhen using other systems such as logical clocks to attempt to keep track of the order of events on different computers, a problem that may arise is that these systems dont always track these changes with perfect reliability due to many issues such as varying temperature, race conditions, or clock skew. The vector clock instead tracks causal relationships between events. Each separate process maintains its own vector clock, represented by a list of integers. When one of these processes performs an event, it increments its own clock and sends it out to the rest of the system. By keeping track of this clock as it is updated by various processes across the computer the distributed system can be much more confident about the order in which events took place.\nOf course, there are always downsides with elegant solutions like this. In the case of vector clocks the downside is largely increased overhead for keeping track of all of the sets of integers. But in systems where the ordering of processes is of the upmost importance, this is worth the trade-off to ensure reliability. And unless we hook all of our computers up to atomic clocks like they do for some computers at CERN we will have to take the increased overhead instead.", "title": "\u9ad8\u7cbe\u5ea6\u306a\u6642\u523b\u7ba1\u7406\u306b\u5411\u3051\u305f\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306e\u5b9f\u88c5\u65b9\u6cd5", "body": "\u6642\u9593\u306e\u8ffd\u8de1\u306f\u96e3\u3057\u3044\u304c\u3001\u5206\u6563\u30b7\u30b9\u30c6\u30e0\u3067\u306e\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306e\u5b9f\u88c5\u306f\u4fe1\u983c\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u305f\u3060\u3057\u3001\u591a\u304f\u306e\u6574\u6570\u30bb\u30c3\u30c8\u306e\u8ffd\u8de1\u306b\u306f\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5897\u3048\u308b\u3002", "titles": ["\u9ad8\u7cbe\u5ea6\u306a\u6642\u523b\u7ba1\u7406\u306b\u5411\u3051\u305f\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306e\u5b9f\u88c5\u65b9\u6cd5", "\u5206\u6563\u30b7\u30b9\u30c6\u30e0\u306b\u304a\u3051\u308b\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306e\u5229\u70b9\u3068\u8ab2\u984c", "\u30ed\u30b8\u30ab\u30eb\u30af\u30ed\u30c3\u30af\u3068\u306e\u6bd4\u8f03\uff1a\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306e\u4fe1\u983c\u6027\u306e\u5411\u4e0a", "\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306b\u3088\u308b\u30a4\u30d9\u30f3\u30c8\u9806\u5e8f\u306e\u78ba\u5b9f\u306a\u7ba1\u7406\u65b9\u6cd5", "\u96fb\u5b50\u5de5\u4f5c\u306b\u304a\u3051\u308b\u30d9\u30af\u30c8\u30eb\u30af\u30ed\u30c3\u30af\u306e\u5229\u7528\u3068\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u554f\u984c"]}