{"pubDate": "2024-09-06T14:00:28", "original_title": "This Week in Security: EUCLEAK, Revival Hijack, and More", "link": "https://hackaday.com/2024/09/06/this-week-in-security-eucleak-revival-hijack-and-more/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "[Thomas Roche] of NinjaLab is out with EUCLEAK, (pdf) a physical attack against Infineon security microcontrollers, and the security tokens that contain them. The name is a portmanteau of Euclidean and leak. And no surprise, its a data leak in some implementations of the Extended Euclidean Algorithm (EEA), a component of an Elliptical Curve Digital Signature Algorithm (ECDSA).\nOK, time to step back. Infineon microcontrollers are the digital smart parts inside popular security tokens like the Yubikey 5, some Java smart cards, and even the Infineon TPMs. These devices all serve a similar purpose. They store one or more secret keys, and are guaranteed to never disclose those keys. Instead, they use their secret keys to do cryptographic functions, like ECDSA signatures, and output the result. Theres even a special set of tests, the Common Criteria, that are intended to backstop these guarantees. Whats interesting is that an otherwise excellent product like the Yubikey 5, that passes all these auditing and certification processes, is still vulnerable.\nThe actual attack is to perform ECDSA signatures while monitoring the physical chip with an electromagnetic probe. This tiny directional antenna can pick up on EM noise generated by the microprocessor. That EM noise leaks timing information about the internal state of the cryptography, and the secret key can be derived as a result.\nThis process does require physical access to the token for several minutes. To get useful readings, the plastic case around the security token does need to be disassembled to get the probe close enough to pick up signals. From there its at least an hour of post-processing to actually get the key. And most of these security tokens intentionally make the disassembly process rather difficult. The point isnt that its impossible to open up, but that its impossible not to notice that your token has been tampered with.\nInfineon has updated their libraries, doing more active countermeasures to make cryptography state indistinguishable from other CPU activity noise. If you have one of the affected devices, if a firmware update is not an option, setting a PIN or other biometric is quite effective at preventing the attack.\nWhat might be most notable about this attack isnt the attack itself, but that none of the test and audit framework around these devices protected against it. Our take here isnt that those things are without merit, but instead that no certification can anticipate every way such a system could go wrong.\nRevival Hijack on PyPI\nWeve repeatedly covered Typosquatting in various repositories, and even the more subtle dependency confusion over the years. Revival Hijack probably isnt completely new, but researchers at JFrog have announced it and taken a major step towards preventing it in the PyPI repository, partially in response to finding it in use in the wild.\nThe idea here is pretty simple. For various reasons, packages on PyPI get deleted. PyPI makes it abundantly clear to the dev deleting the package, that among other things, the package name will become available for others to register. If someone else registers that name, and releases a new build with a higher version number, pip will gladly perform the update where the old package is installed.\nThe danger, of course, is that this quirk will be used to ship malicious packages. Thats not a theoretical issue, either. The pingdomv3 package was first published in 2019, retired and deleted in March 2024, and republished shortly after. Within a few days, the package was updated to include a malicious payload. Interestingly, the payload checked for a Jenkins environment, and downloaded and ran a script. JFrogs automated monitoring caught the suspicious behavior, and PyPI removed the malicious package soon after. That one in particular got added to PyPIs list of permanently retired package names.\nGoing forwards, JFrog is grabbing deleted package names with significant download counts, and holding them safely in a dedicated user account. It will be interesting to see if this attack or mitigations against it start showing up in other repositories.\nSIM Card WiFi\nWiFi security is a bizarre mish-mash of modern and legacy tech. Case in point, you can use a RADIUS server and a 2G SIM card to handle WiFi authentication. The authentication server generates a random challenge, and the SIM generates a signed response and temporary encryption key. Its a cool, quirky idea, with a significant drawback. For effective authentication, the central server has to know the secret key of the authenticating SIM. Since thats the primary thing SIMs are designed to prevent, the whole idea is of limited use, without a source for custom SIM cards.\nBits and Bytes\nTo really understand what a program is doing, running a system trace is hard to beat. That is a capture of every system call, which effectively captures every interaction with the rest of the system. The only real problem is that that much information is often like drinking from the firehose. To try to help with that problem, we now have Traceeshark, which loads system trace captures into Wireshark, which already has great tools for dealing with an overabundance of information.\nAnd finally for this week, researchers at Praetorian took a look at the Rspack GitHub repository, and found several GitHub Actions vulnerabilities. GitHub Actions are automated actions in response to things like changes and pull requests. Projects often set up continuous integration pipelines in Actions, and run a test suite and build for each change. That does get a bit dicey, when running on pull requests from untrusted contributors. And thats what was found at Rspack. New contributors could make pull requests that would automatically launch an Action run. From within the action, it was possible to leak both an NPM deployment token, as well as a GitHub Person Access Token. Whoops!", "title": "\u30a4\u30f3\u30d5\u30a3\u30cb\u30aa\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3078\u306e\u7269\u7406\u653b\u6483\uff1aEUCLEAK\u3068\u306f\u4f55\u304b\uff1f", "body": "NinjaLab\u306eThomas Roche\u306f\u3001EUCLEAK\u3092\u767a\u8868\u3002Infineon\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3068\u305d\u308c\u3092\u542b\u3080\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3059\u308b\u7269\u7406\u653b\u6483\u3067\u3042\u308a\u3001\u7279\u5b9a\u306eECDSA\u306e\u5b9f\u88c5\u306b\u30c7\u30fc\u30bf\u30ea\u30fc\u30af\u304c\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\u653b\u6483\u306b\u306f\u7269\u7406\u30a2\u30af\u30bb\u30b9\u304c\u5fc5\u8981\u3067\u3001\u653b\u6483\u5f8c\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8a2d\u5b9a\u304c\u52b9\u679c\u7684\u3002", "titles": ["\u30a4\u30f3\u30d5\u30a3\u30cb\u30aa\u30f3\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3078\u306e\u7269\u7406\u653b\u6483\uff1aEUCLEAK\u3068\u306f\u4f55\u304b\uff1f", "\u4fdd\u8b77\u30c8\u30fc\u30af\u30f3\u304c\u66b4\u304b\u308c\u308b\uff1aInfineon\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3078\u306e\u653b\u6483\u624b\u6cd5", "Revival Hijack\uff1aPyPI\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u304a\u3051\u308b\u5fa9\u6d3b\u3059\u308b\u60aa\u610f\u3042\u308b\u30d1\u30c3\u30b1\u30fc\u30b8", "SIM\u30ab\u30fc\u30c9WiFi\u8a8d\u8a3c\uff1a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3068\u5229\u4fbf\u6027\u306e\u9593\u306e\u30d0\u30e9\u30f3\u30b9", "Bits and Bytes\uff1a\u30b7\u30b9\u30c6\u30e0\u30c8\u30ec\u30fc\u30b9\u3092\u6d3b\u7528\u3057\u3001\u60c5\u5831\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304b\u3089\u89e3\u653e"]}