{"pubDate": "2023-07-17T17:00:31", "original_title": "Discussing The Finer Points Of Space-Worthy Software", "link": "https://hackaday.com/2023/07/17/discussing-the-finer-points-of-space-worthy-software/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2020/04/Navigating.jpg", "original_content": "At the dawn of the Space Race, when computers were something that took up whole rooms, satellites and probes had to rely on analog electronics to read from their various sensors and transmit the resulting data to the ground. But it wasnt long before humanitys space ambitions outgrew these early systems, which lead to vast advancements in space-bound digital computers in support of NASAs Gemini and Apollo programs. Today, building a spacecraft without an onboard computer (or even multiple redundant computers) is unheard of. Even the smallest of CubeSats is likely running Linux on a multi-core system.\nJacob Killelea\nAs such, software development has now become part an integral part of spacecraft design  from low-level code thats responsible for firing off emergency systems to the 3D graphical touchscreen interfaces used by the crew to navigate the craft. But as you might expect, the stakes here are higher than any normal programming assignment. If your code locks up here on Earth, its an annoyance. If it locks up on a lunar lander seconds before it touches down on the surface, it could be the end of the mission.\nTo get a bit more insight into this fascinating corner of software development, we invited Jacob Killelea to host last weeks\nSoftware for Satellites Hack Chat. Jacob is an engineer with a background in both aero and thermodynamics, control systems, and life support. Hes written code for spacecraft destined for the Moon, and perhaps most importantly, is an avid reader of Hackaday.\n\nReliability Above All Else\nThe conversation started about as youd expect, with several people wanting to know what kind of languages, frameworks, and even operating systems are used in todays spacecraft. Jacob says while theres an incredible amount of variability out there depending on the hardware and what the software needs to do, much of it is familiar to folks like us. He says the language of choice tends to be C, and that while Linux is used, it tends to be for higher level tasks that dont need to happen in real-time. If not running on the bare metal, critical code is likely to be running on something like VxWorks. Although even here he cautions that the aerospace community prefers to stick with what works, so you may find the spacecraft youve been tasked to write code for is using an OS from the early 2000s.\nReliability is ultimately the name of the game when writing code for space applications, which brought the conversation towards fault tolerance and so-called safe mode operation. Given that faults can be triggered by external events outside of your control (such as cosmic rays), even the most carefully crafted and tested code may one day crash. In that event, there needs to be a secondary system that can take over and put the craft into a known-good state. Interestingly, these safe-mode controllers are often a dedicated module and not just a different operating mode of the main computer.\nThis provides true redundancy in the event of a complete computer failure, but isnt without its own risk  Jacob recalled a mission hed studied where a controller designed for a previous vehicle had been reused on one with a different physical layout. Everything was fine until the satellite eventually went into safe-mode, at which point the controllers attempts to stabilize the craft actually caused it to tumble out of control. In the end the safe-mode ended up being anything but, and the vehicle was lost.\nTest Like You Fly\nOthers in the chat wanted to know about what kind of simulations or testing can be done with spacecraft software here on the ground. Jacob says one of the most powerful tools is whats called a FlatSat, which could be considered something akin to the breadboard version of the spacecrafts final hardware. All of the crafts electronic components are laid out on a workbench, with ample test-points that allow tapping into the power and communication busses. This gives engineers the necessary access to test different modules and simulate various failures in ways that would be difficult or perhaps even impossible if using a replica of the flight hardware.\nImage of a FlatSat being tested by the ESA.\nBut still, this only gets you so far. Jacob points out that its all but impossible to accurately simulate the space environment. Theres no way to create microgravity in the lab, so how will you know how it impacts your inertial measurement units (IMUs) in orbit? How can you be sure your optical star tracker wont be confused as the craft rotates when your test rig is bolted to the table? The answer is, simply, that you cant. All you can do is test for as many edge cases as you can think of, and make sure the system can fail as gracefully as possible.\nThat said, you can get an idea of how your electronics will respond to cosmic radiation without hitching a ride to space. Jacob says he was involved with a project where they tested their system against radiation induced faults by putting it in the cyclotron at Texas AM University and hitting it with proton beams. This produced numerous fault conditions, some of which they were able to device recovery procedures for. Of course theres no way of predicting what will actually happen in space, and satellites in lower orbits are partially protected from radiation by the Earths magnetic field, but its still good to at least have an idea of what youre up against.\nOn the Shoulders of Giants\nIn decades past, each spacecraft or mission was an entirely new venture  a real Where none has gone before kind of thing. But todays aerospace engineers have the benefit of shared spacecraft platforms and robust software frameworks that allow them to incorporate the hard-learned lessons of previous missions into their new craft.\nModern craft like the JWST can safely host software payloads.\nFor example, Jacob strongly recommended anyone interested in spacecraft software take a look at NASAs Core Flight System (cFS). This Apache-licensed flight software framework can run on Linux and various real-time operating systems (RTOSs), and provides modules for various spaceflight-related tasks such as telemetry, process management, error reporting, command scheduling, etc. Even if your homebrew rover isnt likely to get much farther than the back garden, it could probably benefit from some of the research and software development that NASA has already done.\nJacob also mentioned that more modern satellites, especially the larger and more capable variants that operate in deep space, have enough computing power that they can offer up virtualized environments for software payloads that are uploaded from the ground. So for example if you had some kind of research you wanted to conduct using the sensors on a given spacecraft, you could potentially upload your own code that would run in a protected environment where failures wont endanger the crafts vital systems.\nThis is especially helpful on spacecraft designed for exploration or scientific observations. It turns out the James Webb Space Telescope (JWST) uses a system like this so scientists that visit the observatory virtually can operate its instruments safely through programs written in, or all things, JavaScript.\nJacob was good enough to end the chat with a rundown of various systems and technologies at play in modern spacecraft, such as standardized data busses or telemetry protocols. Basically he took the time to answer the questions that most of us arent well versed enough to even ask, and the results were absolutely fascinating. Like they say, you dont know what you dont know.\nWed like to thank Jacob for taking the time to Jacob for giving us a taste of what its like to develop software for modern spacecraft. While we might not get the chance to run any of our own code in orbit, we can all certainly benefit from some of the lessons learned while operating in such a hostile environment.\n\nThe Hack Chat is a weekly online chat session hosted by leading experts from all corners of the hardware hacking universe. Its a great way for hackers connect in a fun and informal way, but if you cant make it live, these overview posts as well as the transcripts posted to Hackaday.io make sure you dont miss out.", "title": "\"\u5b87\u5b99\u8239\u306e\u305f\u3081\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\uff1a\u4fe1\u983c\u6027\u304c\u6700\u512a\u5148\"", "body": "\u5b87\u5b99\u8239\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\u306f\u4fe1\u983c\u6027\u304c\u6c42\u3081\u3089\u308c\u308b\u3002C\u8a00\u8a9e\u3084Linux\u3001VxWorks\u304c\u4e00\u822c\u7684\u3002\u30d5\u30e9\u30c3\u30c8\u30b5\u30c3\u30c8\u3067\u306e\u30c6\u30b9\u30c8\u3082\u91cd\u8981\u3002\u7121\u91cd\u529b\u74b0\u5883\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u56f0\u96e3\u3002\u904e\u53bb\u306e\u30df\u30c3\u30b7\u30e7\u30f3\u304b\u3089\u306e\u5b66\u3073\u3092\u6d3b\u304b\u3057\u3001\u5171\u6709\u3055\u308c\u305f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3082\u6d3b\u7528\u3002\n", "titles": ["\"\u5b87\u5b99\u8239\u306e\u305f\u3081\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u958b\u767a\uff1a\u4fe1\u983c\u6027\u304c\u6700\u512a\u5148\"", "\"\u5b87\u5b99\u8239\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30c6\u30b9\u30c8\uff1a\u5730\u4e0a\u3067\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u9650\u754c\u3068\u306f\"", "\"\u5b87\u5b99\u8239\u306b\u304a\u3051\u308b\u5b89\u5168\u30e2\u30fc\u30c9\u306e\u91cd\u8981\u6027\u3068\u30ea\u30b9\u30af\"", "\"\u524d\u4eba\u672a\u8e0f\u306e\u9818\u57df\u304b\u3089\u5b66\u3076\uff1a\u5148\u884c\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u7d4c\u9a13\u3092\u6d3b\u304b\u3057\u305f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\"", "\"\u8fd1\u4ee3\u306e\u5b87\u5b99\u8239\u3067\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u69cb\u7bc9\uff1a\u65b0\u305f\u306a\u6642\u4ee3\u306e\u6311\u6226\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\""]}