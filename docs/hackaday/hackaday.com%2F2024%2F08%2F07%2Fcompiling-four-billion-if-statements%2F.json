{"pubDate": "2024-08-07T18:30:00", "original_title": "Compiling Four Billion If Statements", "link": "https://hackaday.com/2024/08/07/compiling-four-billion-if-statements/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/08/four-billion-if-statements_featured.png", "original_content": "With modern tools, you have to try very hard to do something stupid, because the tools (rightly) recognize youre doing something stupid. [Andreas Karlsson] can speak to that first hand as he tried to get four billion if statements to compile.\nYou may ask what state space requires four billion comparisons to evaluate? The answer is easy: the range of an unsigned 32-bit integer. The whole endeavor started with a simple idea: what if instead of evaluating whether an integer is even or odd with a modulo or bit mask, you just did an if statement for every case? Small ranges like 0-10 are trivial to write out by hand, but you reach for more automated solutions as you pass 8 bits and move towards 16. [Andreas] wrote some Python that outputs a valid C program with all the comparisons. For 16 bits, the source only clocks in at 130k lines with the executable less than 2 MB.\nOf course, scaling to 32 bits is a very different problem. The source file balloons to 330 GB, and most compilers barf at that point. Undeterred, [Andreas] modified the Python to output x86_64 assembly instead of C. Of course, the executable format of Windows (PE) only allows executables up to 4 GB, so a helper program mapped the 40 GB generated executable and jumped into it.\nWhats incredible about this whole journey is how performant the program is. Even large numbers complete in a few seconds. Considering that it has to thrash 40 GB of an executable through memory, we cant help but shake our heads at how even terrible solutions can work. We love seeing someone turn a bad idea\u00a0into an interesting one,\u00a0like\u00a0this desoldering setup.", "title": "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u7bc4\u56f2\u30674\u5104\u3082\u306e\u6bd4\u8f03\u3092\u3059\u308b", "body": "\u30e2\u30c0\u30f3\u306a\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3068\u611a\u304b\u306a\u3053\u3068\u3092\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u96e3\u3057\u304f\u3001 [Andreas Karlsson] \u306f40\u5104\u306eif\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3057\u305f\u300232\u30d3\u30c3\u30c8\u6574\u6570\u306e\u7bc4\u56f2\u306e\u8a08\u7b97\u306b\u95a2\u3057\u3066Python\u3084C\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u300232\u30d3\u30c3\u30c8\u3078\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3082\u8a66\u307f\u3066\u3044\u307e\u3057\u305f\u3002", "titles": ["\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u7bc4\u56f2\u30674\u5104\u3082\u306e\u6bd4\u8f03\u3092\u3059\u308b", "32\u30d3\u30c3\u30c8\u6574\u6570\u306e\u7bc4\u56f2\u3092\u8a55\u4fa1\u3059\u308b", "32\u30d3\u30c3\u30c8\u3067\u306e\u30b3\u30f3\u30d1\u30a4\u30eb", "330 GB\u307e\u3067\u81a8\u308c\u4e0a\u304c\u308b\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba", "\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u5236\u9650"]}