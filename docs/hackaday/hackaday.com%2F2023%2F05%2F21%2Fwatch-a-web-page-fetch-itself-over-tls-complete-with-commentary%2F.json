{"pubDate": "2023-05-22T02:00:13", "original_title": "Watch a Web Page Fetch Itself Over TLS, Complete With Commentary", "link": "https://hackaday.com/2023/05/21/watch-a-web-page-fetch-itself-over-tls-complete-with-commentary/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/05/Annotated-TLS.png", "original_content": "TLS, byte by byte performs an unusual and interesting function: it fetches itself over HTTPS, and provides a complete annotation of whats going on in the process, one byte at a time. Visit the site and give the button a click to watch it happen, its neat!\nTransport Layer Security (TLS) is whats responsible for encrypting traffic over the internet, and its normally implemented on top of TCP to encrypt an application-layer protocol like HTTP (resulting in HTTPS and the little padlock icon in browsers indicating a connection with a web site is encrypted.) Back in the day, traffic over the internet was commonly unencrypted, but nowadays no communication or hardware is too humble for encryption and methods are easily accessible.\nSo for what purpose would someone actually need or use such an implementation of TLS? Well, probably no one actually needs it. But it is a userspace TLS implementation in javascript that may fit a niche for someone, and it certainly provides beautifully-indented and annotated binary data in the process. Sound up your alley? The GitHub repository for the project has all the details, so give it a look.", "title": "\"TLS byte by byte\": \u81ea\u5df1\u53d6\u5f97\u306b\u3088\u308b\u6280\u8853\u89e3\u8aac\u304c\u9762\u767d\u3044", "body": "\"TLS, byte by byte\"\u306f\u81ea\u5df1HTTPS\u3092\u4ecb\u3057\u3066\u30d5\u30a7\u30c3\u30c1\u3057\u30011\u30d0\u30a4\u30c8\u5358\u4f4d\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u5b8c\u5168\u306a\u6ce8\u91c8\u3092\u63d0\u4f9b\u3059\u308b\u975e\u5e38\u306b\u8208\u5473\u6df1\u3044TLS\u306e\u5b9f\u88c5\u3067\u3042\u308b\u3002\u3053\u306e\u5b9f\u88c5\u306fJavaScript\u3067\u884c\u308f\u308c\u3066\u304a\u308a\u3001GitHub\u30ec\u30dd\u30b8\u30c8\u30ea\u3067\u8a73\u7d30\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\u4e00\u822c\u7684\u306b\u306f\u5fc5\u8981\u6027\u306f\u306a\u3044\u304c\u3001\u6697\u53f7\u5316\u3068\u7f8e\u3057\u3044\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u6ce8\u91c8\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u3002", "titles": ["\"TLS byte by byte\": \u81ea\u5df1\u53d6\u5f97\u306b\u3088\u308b\u6280\u8853\u89e3\u8aac\u304c\u9762\u767d\u3044", "\u901a\u4fe1\u306e\u6697\u53f7\u5316\u304c\u666e\u53ca\u3057\u305f\u73fe\u4ee3\u306b\u304a\u3044\u3066\u3082\u3001\u901a\u4fe1\u306e\u6697\u53f7\u5316\u306b\u95a2\u3059\u308bJS\u5b9f\u88c5\u304c\u5b58\u5728\u3059\u308b\u7406\u7531", "\u500b\u6027\u7684\u306a\u30cb\u30fc\u30ba\u3092\u6e80\u305f\u3059\u304b\u3082\u3057\u308c\u306a\u3044JavaScript TLS\u5b9f\u88c5", "\u30e6\u30fc\u30b6\u30fc\u30b9\u30da\u30fc\u30b9\u306b\u304a\u3051\u308bTLS\u306e\u5b9f\u88c5\u306b\u95a2\u3059\u308b\u6280\u8853\u89e3\u8aac", "GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u7d39\u4ecb\u3055\u308c\u308bjavascript TLS\u5b9f\u88c5\u306e\u30c7\u30a3\u30c6\u30fc\u30eb"]}