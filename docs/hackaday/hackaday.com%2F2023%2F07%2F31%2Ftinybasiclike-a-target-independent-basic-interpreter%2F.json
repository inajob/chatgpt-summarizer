{"pubDate": "2023-07-31T08:00:04", "original_title": "TinyBasicLike: a Target-Independent BASIC Interpreter", "link": "https://hackaday.com/2023/07/31/tinybasiclike-a-target-independent-basic-interpreter/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2011/08/basic.png", "original_content": "In the long and winding history of BASIC, its sometimes hard to keep track of all the different variants and dialects. Some may still remember TinyBASIC, which was published in 1976 as Palo Alto Tiny BASIC by [Gordon Brandly]. Later, TinyBASIC was modified by a number of people including [Scott Lawrence] who created TinyBASIC Plus (TBP). Inspired by this, [Karl] figured he could improve on TBP by making the original C-based project even easier to port by removing whatever platform dependencies he could find, creating what he calls TinyBasicLike.\nThe main change is that TinyBasicLike consists out of two C files, with one containing the core code, and the second the platform-specific details that can be used by the core. Although [Karl] started off with the Palo Alto Tiny BASIC-like code by [Scott Lawrence], he decided to make it into his own by making a few alterations, such as adding left and right shift operators, adding an ADDR() function, expanding the features of INPUT and adding multiple logical operators.\nIn the example STM32F4 project linked on the project page it is demonstrated how to target a new platform with TinyBasicLike. Performance on the STM32F4 Discovery board with a simple counting loop yielded about 6 lines of TBL program code per millisecond. For a 168 MHz STM32 MCU thats definitely not astounding, but considering how straightforward Tiny BASIC (and TBL as a consequence) is, its definitely no slouch.\nThis is probably a good time to remind that BASIC was the original champion of cross-platform programming and the source of countless fond (and frustrating) memories."}