{"pubDate": "2023-11-20T18:00:57", "original_title": "Revive A Sony Vaio P-Series With KiCad\u2019s Background Bitmaps", "link": "https://hackaday.com/2023/11/20/revive-a-sony-vaio-p-series-with-kicads-background-bitmaps/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/10/hadimg_vaio_kicad_feat2.png", "youtube": "https://www.youtube.com/watch?v=F9Mf2zqOCZU", "original_content": "You might remember that KiCad 7 came out this February, with a multitude of wonderful features. One of them was particularly exciting to see, and the KiCad newsletter even had an animated GIF to properly demo it  a feature called Background Bitmaps, which is the ability to add existing board images into your board editor, both front and back, and switch between them as you design the board. With it, you can draw traces, recreate the outline and place connectors over these images, giving you a way to quickly to reproduce everything on an existing PCB! Ive seen some friends of mine use this feature, and recently, Ive had a project come up thats a perfect excuse for me to try it.\nBy [Yoggy], CC-BY-2.0Back in 2020, I managed to get a Sony Vaio P from a flea market, for about 20\u20ac. Its a beloved tiny laptop from 2009, now a collectors item, and weve covered a few hacks with it! The price was this wonderful only because it was not fit for regular flea market customers  it was in bad condition, with the original DC jack lost and replaced by some Molex-like power connector, no hard drive, and no battery in sight.\nIn short, something worth selling to a known tinkerer like me, but not particularly interesting otherwise. Nevertheless, about half a year later, when I fed it the desired 10.5 V from a lab PSU and gave the power button a few chances, it eventually booted up and shown me the BIOS menu on the screen! Ive disassembled and reassembled it a few times, replaced the DC jack with an original one from a different Vaio ultrabook I happened to have parts from, and decided to try to bring it back to original condition.\n\nOnly a tad larger than the Supercon 2022 badge\nIn total, Ive spent a good week (nitter) trying to make this Vaio work properly so I could make a portable typing machine out of it. Its Atom CPU with PowerVR graphics made it extremely hard to have a Linux distro boot, as everything i386 I tried would hang indefinitely after GRUB.\nLack of battery didnt make the experience pleasant either. I wanted to build a new battery out of two smartphone cells in series and a salvaged protection board from a different Sony battery, but it turned out that Sony had an extra pin on the battery connector, going to a proprietary controller that was apparently specifically designed to prevent non-legit battery use.\nAt some point, while demoing this laptop and my battery circuitry journey to a friend, I accidentally connected the salvaged Sony BMS in reverse, which made the laptop release some magic smoke  it still boots up, but when it comes to making it work in the way it was originally intended to work, my hopes are gone.\nDespite everything, I love this laptop and dont want to give up on it, even though Ive never actually got to make use of it. Its tiny in an adorable way yet with hardly any compromises in sight, it comfortably fits in purse-sized places, and its got some wacky aspects to it too, like the 1600 x 768 screen and a trackpoint in the middle of the keyboard. The main problem is the mainboard, sadly  its a work of art and engineering alike, but it just doesnt work well in the world of today, and the missing parts that rely on proprietary interfaces make it a financially Sisyphean task to try and restore this laptop. Today, lets peek inside a legendary Sony laptop from 2009, and then use KiCads new reverse-engineering features to take a dig at rebuilding its mainboard.\nA Look Inside\nThis middle layers are flex technique can be costly!\nThe innards of this laptop are an engineering marvel. A significant chunk of the laptops bottom half are taken up by the battery  the 1.8 SATA HDD with its IDE-to-SATA on-FPC converter, the motherboard with the soldered-on CPU and RAM, the\u00a0 WiFi/GPS/BT expansion board, and the port PCBs take up only about 60% of the laptops inner space! Sony has made heavy use of flex PCBs, and not just that  half of the FR4 boards have flex layers in the middle of them! Its a rare manufacturing technique to see in real-life boards, and this cant have been cheap to produce.\nAll in all, its fascinating to look at just how well everything fits together inside of this laptop. If youre interested to know more about what makes this laptop tick, someone on Hackaday Discord has linked this document to me, analyzing the hardware of this laptop  sadly, without pictures, but heres a few to satiate your curiosity, and theres also some wonderful teardowns!\nIve covered laptop motherboard reuse before, and building a new motherboard for an existing laptop is obviously going to have many parallels. Heres the main aspect that gives me hope  we have schematics! I wont share them here, but you can find them easily if you look up Sony Vaio VGN-P Series (Foxconn MBX-187).pdf. This alone is super helpful and in fact makes this rebuild possible, because the connectors on the board turned out to have some wacky pinouts. For instance, the LCD has a weird LVDS pinout, and unlike many others, doesnt implement backlight on the LCD panel itself  instead, the backlight driver chip is on the motherboard, and what we get is bare LED connections; reverse-engineering this without the schematic wouldve been a daunting task.\nIts not just the pinouts, either  not any connector will fit all these FPCs mechanically, the suitable connectors have very specific part numbers. However, the schematic lists all of the connector part numbers that I could need! They might not have datasheets easily available, but I can buy them, and thats what matters. Ive ordered the connectors I need  specifically, I only need a few, since Ill get rid of the RF expansion board too. The RF board, with its two mPCIe cards and IDE passthrough for the internal HDD, needs way too much PCIe and proprietary interfaces for me to bother, and the schematic doesnt contain any info about the connectors found on the expansion board specifically, so its just wasted space in the end when I compare it to other things I could build into this laptops shell instead.\n\nNow, I just need to build a new mainboard! A friend of mine has helped me along the way, by drawing a Kicad footprint for the LCD connector from a datasheet she found. Still, theres a good few tricky tasks when building a new mainboard for such a laptop\u00a0  you need to copy the outline, connector positioning, and then add enough circuitry to make the laptop do what you need it to do. Thankfully, Kicads new Board Bitmap integration makes it easy to take care of all the mechanical aspects, and let me show you just how well this works.\nPerfection In, Perfection Out  A Scanner Will Help\n\n\n\n\nAt the moment, the key to success is getting good pictures and processing them well. To get proper pictures, youll want to use something like a scanner  unless you find a way to position your phone just right, pictures from your phone will have a certain perspective to them, and unless you correct this perspective in something like GIMP, using these pictures will be a bother  KiCad doesnt have a way to change perspective of an imported picture, so you have to do this externally. For scaling purposes, including a ruler is not a bad idea, because the distortion was negligible and was mostly a problem with screw holes where the shade produced by the scanners lightbar would have the hole position be slightly ambiguous.\nNevertheless, a scanner picture is what did the job for me, and Ive talked to a friend who had problems with a phone-produced picture, so a scanner is what Id recommend at the moment. Ive heard that scanners can still have X/Y distortion, with slightly different PPI on X and Y axis, but I havent encountered that personally. Im sure someone else has been using this KiCad feature for a while, though, and has found an even quicker solution than finding a scanner to put your board into  if thats you, please do tell us more in the comment section!\nChipped set\nI got some monochrome pictures at 300ppi, with negligible perspective differences, and these were more than enough. Of course, the board has components on it on both sides, and if they were just a bit taller or disproportionately placed, the board wouldve not been quite parallel with the scanners glass, which wouldve required me to actually change the perspective of the images in GIMP. If youre scanning a board like that, desoldering connectors might be a solution.\nIn my case, for a somewhat flat board, if I were to think this aspect through, I wouldve found a way to equally offset this board vertically relative to the glass while not letting any light in, adding some sort of standoffs and then a soft frame of some sorts. Instead, I just pushed down on the scanner lid, which appears to have slightly cracked the chipsets die on the scanner glass. Thats a disappointment, because I still wanted to power this board up a few times to sniff communications with things like the trackpoint, and now Im not sure I can quite do that  but I will try regardless!\nFrom Image To Wonderful Board\nOne Schroedingers chipset later, I got board images and cropped them in GIMP. Its important that you rotate them so that the board is not off-angle in any perceivable way  if your PCB images are slightly rotated by a few degrees, youll want to tweak their rotation in GIMP/Paint/Kolourpaint/etc and re-import, because KiCad cant help rotate them for you. Also, scanners will mirror your board image  so mirror it back as required, and, you can mirror images in KiCad.\nThis is it! Youre ready to open the KiCad PCB Editor, press Place = Add Image, select your image and scale it. Youll want to flip (hotkey F) the bottom image, but youll also want to open its properties (hotkey E) and change its layer from the default F.Cu to B.Cu  thats how you get the images to change as you go from top to bottom layer while routing tracks. After all the rotating and cropping that I did, I was very pleasantly surprised when I scaled the image, placed my friends LCD connector footprint, and had it match perfectly with the connector pads on the image.\nA bit of repositioning the images, and Ive matched both the top and bottom outlines to a bounding box of the real-world PCB size, then redrawing the outline. Ive also rounded the corners  the original board has sharp corners and they kept scraping at me as I was handling it! By the way, if you want to round corners of a board in KiCad, simply select both of the lines which make the corner, right click and press Fillet Lines  theres no need to manually draw arcs anymore.\nThis isnt a magic bullet for all your PCB reverse-engineering troubles, but its exceptionally useful  it saves you a ton of fiddling with calipers figuring out exact connector and hole positions! Load the images into KiCad, position them, and you can start placing your connectors and Edge.Cuts lines. With this method, you can reproduce proprietary boards in KiCad easier than ever before, as long as you can get a good picture  which is perfect for things like custom FPCs. Of course, it still helps if you can lasercut your boards outline before submitting it for production!\nIt Will Only Get Better\nRough sketch of what I will put onto my board\nTheres, of course, a few small caveats. For instance, when youre drawing the outline on top of the images, its not hard to misclick and select the images, having them overlap the outline so you have to reach for the Esc key to continue drawing. This is very simple to solve, however  in the bottom right corner of the PCB Editor, in the Selection Editor field, uncheck Drawings and you wont have that problem anymore. Overall, KiCad had support for different image scaling on X/Y, image rotation, or maybe even perspective tweaks, itd be a bit quicker to start reverse-engineering any given board. At the moment, of course, reverse-engineering is not the main purpose of KiCad  but it will become more prominent!\nHaving this integration is a wonderful step forward for building all sorts of boards, and these quirks are no showstopper  they cant even approach the immense value that this tool provides, and its a new addition so the quirks will be smoothed over. Im only listing them so that you know what to expect at the moment, but in future releases, Id expect background bitmaps to only become more comfortable to use.\nAs for the Sony Vaio, Im going to put a Pi Zero W onto this board and work on converting its DPI (parallel RGB) output into LVDS that the screen needs, and slap an RP2040 onto the board for keyboard/trackpoint/LED purposes  that should make for a good v1 board. If the LVDS part pans out, I cant wait for the moment when this laptop is usable as my daily driver! Given how quickly I work on my projects, this one could take a year, but Im seriously thankful for KiCad making quick work of previously the most annoying part of such reverse-engineering. In the meantime, the board pictured is on my GitHub.\nI hope that this part of my journey can be a demonstration of how quickly you can reverse-engineer a PCBs most important aspects with this new feature that KiCad 7 brought to us. Just like when we used KiCads then newly added SVG import to build a Jolly Wrencher SAO board, this is one more addition to your KiCad toolkit that you might not have known you needed!\nMain/thumbnail picture made by [Wificable]!", "title": "KiCad 7\u306e\u65b0\u6a5f\u80fd\u300c\u80cc\u666f\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u300d\u3092\u4f7f\u3063\u3066\u65e2\u5b58\u306e\u30dc\u30fc\u30c9\u30a4\u30e1\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3088\u3046\uff01", "body": "KiCad 7\u306e\u65b0\u6a5f\u80fd\u3067\u3042\u308bBackground Bitmaps\u3092\u4f7f\u7528\u3057\u3066\u3001Sony Vaio P\u306e\u30e1\u30a4\u30f3\u30dc\u30fc\u30c9\u306e\u518d\u69cb\u7bc9\u3092\u8a66\u307f\u308b\u3002\u30b9\u30ad\u30e3\u30f3\u3057\u305f\u753b\u50cf\u3092KiCad\u306ePCB\u30a8\u30c7\u30a3\u30bf\u30fc\u306b\u53d6\u308a\u8fbc\u307f\u3001\u30b3\u30cd\u30af\u30bf\u3084\u30a8\u30c3\u30b8\u3092\u914d\u7f6e\u3059\u308b\u3002\u30ab\u30b9\u30bf\u30e0FPC\u306a\u3069\u3001\u30d7\u30ed\u30d7\u30e9\u30a4\u30a8\u30bf\u30ea\u306a\u30dc\u30fc\u30c9\u306e\u30ea\u30d0\u30fc\u30b9\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306b\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3002", "titles": ["KiCad 7\u306e\u65b0\u6a5f\u80fd\u300c\u80cc\u666f\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u300d\u3092\u4f7f\u3063\u3066\u65e2\u5b58\u306e\u30dc\u30fc\u30c9\u30a4\u30e1\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3088\u3046\uff01", "\u53e4\u3044\u30e9\u30c3\u30d7\u30c8\u30c3\u30d7\u306e\u30e1\u30a4\u30f3\u30dc\u30fc\u30c9\u3092KiCad\u3067\u518d\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5", "KiCad\u306e\u65b0\u6a5f\u80fd\u300c\u30dc\u30fc\u30c9\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u300d\u3067\u30c7\u30a3\u30c6\u30fc\u30eb\u3092\u518d\u73fe\u3057\u3088\u3046\uff01", "\u30b9\u30ad\u30e3\u30ca\u30fc\u3092\u4f7f\u3063\u3066\u30dc\u30fc\u30c9\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3001KiCad\u3067\u4f7f\u7528\u3057\u3066\u307f\u3088\u3046\uff01", "KiCad\u306e\u9006\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u6a5f\u80fd\u3092\u6d3b\u7528\u3057\u3066\u30dc\u30fc\u30c9\u3092\u518d\u73fe\u3057\u3088\u3046\uff01"]}