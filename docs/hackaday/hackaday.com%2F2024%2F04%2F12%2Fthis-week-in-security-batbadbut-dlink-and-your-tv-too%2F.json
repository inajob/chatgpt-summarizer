{"pubDate": "2024-04-12T14:00:51", "original_title": "This Week in Security: BatBadBut, DLink, and Your TV Too", "link": "https://hackaday.com/2024/04/12/this-week-in-security-batbadbut-dlink-and-your-tv-too/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "So first up, we have BatBadBut, a pun based on the vulnerability being about batch files and bad, but not the worst. Its a weird interaction between how Windows uses cmd.exe to execute batch files and how argument splitting and character escaping normally works. And what is apparently a documentation flaw in the Windows API.\nWhen starting a process, even on Windows, the new executable is handed a set of arguments to parse. In Linux and friends, that is a pre-split list of arguments, the argv array. On Windows, its a single string, left up to the program to handle. The convention is to follow the same behavior as Linux, but the cmd.exe binary is a bit different. It uses the carrot ^ symbol instead of the backslash \\ to escape special symbols, among other differences. The Rust devs took a look and decided that there are some cases where a given string just cant be made safe for cmd.exe, and opted to just throw an error when a string met this criteria.\nAnd that brings us to the big questions. Whos fault is it, and how bad is it? I think theres some shared blame here. The Microsoft documentation on CreateProcess() strongly suggests that it wont execute a batch file without cmd.exe being explicitly called. On the other hand, This is established behavior, and scripting languages on Windows have to play the game by Microsofts rules. And the possible problem space is fairly narrow: Calling a batch file with untrusted arguments.\nAlmost all of the languages with this quirk have either released patches or documentation updates about the issue. There is a notable outlier, as the Java language will not receive a fix, not deeming it a vulnerability. Its rather ironic, given that Java is probably the most likely language to actually find this problem in the wild.\nD-Link E-Waste\nA Pair of Vulnerabilities have been announced for D-Link NAS units, that together make for a trivial unauthorized Remote Code Execution (RCE) scenario. The four known-vulnerable models are all from the DNS-300 series, and all of them are well beyond their End of Service dates. These devices are on the Internet, and scanning and exploitation has started in the wild.\nDue to the age of the units, D-Link will not be issuing patches for the hardcoded credentials and command injection issues that were found. And that puts these devices strictly in the Do Not Connect category. A terrifying snippet taken from the DNS-327L manual: The DNS-327L supports UPnP port forwarding which configures port forwarding automatically on your UPnP-enabled router. No wonder theres nearly 100k of these devices on the Internet. The official D-Link advice is to retire and replace.\nAnd Your TV, Too!\nMultiple versions of the WebOS TV firmware have a series of problems accessible over the local network. CVE-2023-6317 is a fun one, where an account with no privileges can be silently created, and then the key generated upon account creation can be immediately re-used to create another account, with full permissions.\nAnd then theres a trio of vulnerabilities that allow for command execution. The good news is that its only accessible from the local network, and that TVs arent known for UPNP shenanigans quite like NASs are. And the real silver lining, if you have one of the vulnerable TVs? Theres a WebOS Homebrew scene!\nMostly Luck  And Curiosity\n[Fang-Pen Lin] was working on a project using ZeroMQ, a universal message library. This led to excitement about CurveZMQ, which among other things, allows embedding arbitrary data into the metadata field of an authenticated message. And then curiosity forced the question, how much data can we put in there? To find the answer required a dive into the ZeroMQ source. And sure enough, there it was, a fixed-size static buffer, neatly defining how much data goes in the metadata field. But what would happen if we add a bit more data then were supposed to? Kaboom. The buffer overflows, the program crashes, and thats how [Lin] discovered a critical security bug in ZeroMQ.\nNow, this is more than just luck. Its a combination of knowing enough to recognize the issue, and having the curiosity to look in just the right spot. The issue was rapidly fixed, and that was that, way back in 2019. Why are we talking about it now? Because that combination of skill, curiosity, and luck is how the XZ backdoor was discovered. And how pretty much every vulnerability or bug gets found and fixed. Follow the link for the rest of [Jin]s thoughts on the matter.\nLibfreeimage\nThe Libfreeimage library has a pair of buffer overflows, triggered by parsing malicious XPM images. In this case, its the color names in those files, which are copied into a fixed size buffer, and can be easily overflowed. And to make it worse, this can trigger an error message, which can lead to yet another overflow. Its likely these issues could be used to achieve arbitrary code execution. This one could be quite a sneaky problem, as libfreeimage has been around for a long time, with the first release coming in January of 2000, and the XPM loader getting added in 2003. Thats a long time for a library to get built into other projects and binaries.\nBits and Bytes\nUsing the appropriate username of [1337_wannabe], a contributor to the Wordfence Bug Bounty Extravaganza earned a cool $5500 for a pre-auth SQL injection in the LayerSlider WordPress plugin. The was reported on March 25th, and a fix was pushed on the 27th, in an impressive show. Turns out you are pretty leet, [1337_wannabe].\nOn the other hand, when theres no CVE, companies dont get in much of a hurry to push updates. The Lighttpd lightweight web server pushed fixes for use-after-free bugs way back in 2018, but didnt bother to get CVE numbers assigned, or make a big announcement of the vulnerabilities. This is typical for internally discovered issues like this. The problem here is that lighttpd gets bundled into other software, like Baseboard Management Controllers. And so for five years, Supermicro, Lenovo, and others have been shipping vulnerable BMC implementations, because nobody bothered to grab the latest version. On the plus side, these issues dont lead directly to code execution, but they do result in data disclosure. The morals of this one? Update your code! And dont put your BMC on the Internet!\nAnd finally, in the funny-yet-problem category, the Twitter to X rebranding process hit a snag, when all domains ending in twitter.com were visually re-written as ending in x.com. AKA, a tweet with a link to netflitwitter.com would appear in the tweet as netflix.com, but still actually point to the bogus domain when clicked. Hilarious, and a real test-the-code-in-production sort of moment that I can really relate to. But its a problem particularly for the other brands that happen to end with an X, like Netflix and others, as this was prime phishing and spoofing risk while it was still a problem.", "title": "\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u306e\u8106\u5f31\u6027\u3092\u60aa\u7528\u3059\u308bBatBadBut", "body": "\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u306b\u57fa\u3065\u304f\u8106\u5f31\u6027\u3001BatBadBut\u306e\u8aac\u660e\u3002Windows\u306ecmd.exe\u304c\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3059\u308b\u4ed5\u7d44\u307f\u3084\u3001\u7279\u6b8a\u6587\u5b57\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u65b9\u6cd5\u306b\u95a2\u9023\u3059\u308b\u72ec\u81ea\u306e\u6319\u52d5\u3092\u6307\u6458\u3002\u305d\u306e\u4ed6\u3001D-Link NAS\u30e6\u30cb\u30c3\u30c8\u3084WebOS TV\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u8106\u5f31\u6027\u3082\u5831\u544a\u3002", "titles": ["\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb\u306e\u8106\u5f31\u6027\u3092\u60aa\u7528\u3059\u308bBatBadBut", "D-Link NAS\u30e6\u30cb\u30c3\u30c8\u306e\u8106\u5f31\u6027\u3068\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u305f\u8cc7\u683c\u60c5\u5831", "WebOS TV\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u30ed\u30fc\u30ab\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3078\u306e\u8106\u5f31\u6027", "ZeroMQ\u306b\u304a\u3051\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc", "Libfreeimage\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u304a\u3051\u308bXPM\u753b\u50cf\u306e\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc"]}