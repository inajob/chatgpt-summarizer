{"pubDate": "2025-01-15T09:00:00", "original_title": "Nice PDF, But Can It Run DOOM? Yup!", "link": "https://hackaday.com/2025/01/15/nice-pdf-but-can-it-run-doom-yup/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/01/DOOM-pdf-featured.png", "original_content": "DOOM is a classic game to implement on a variety of platforms, but doompdf by [ading2210] is one we didnt see coming. It runs a bit slow and controls are a little awkward but it does run. Entirely within a PDF file, at that.\nHow is this possible? PDFs are technically capable of much more than just displaying static content, and support JavaScript with their own library of functions. Adobe Acrobat implements the full spec, but modern web browsers implement at least a subset of the functionality in a sandboxed JavaScript runtime environment. Input and output are limited to things one might expect from a fancy PDF form (text input boxes, clickable buttons, things of that nature) but computation-wise, just about anything goes.\n\nThe playable DOOM PDF therefore implements keyboard input by reading characters typed into a text entry box, or has the user click buttons with the mouse. Its not the smoothest of input methods but its gloriously hacky. Whats even better is the video output, which is essentially ASCII-art video frames. Zoom in and youll see for yourself! Its not the fastest frame rate, but its fantastic all the same.\nAs shown by zooming in, video frames are rendered as rows of ASCII. Its enough to implement 6-color monochrome and make in-game text legible.\nThis project was partly inspired by Tetris in a PDF which demonstrated a lot of the concepts used, and if you like electronic document related shenanigans, be sure to check out playing chess against your printer with PostScript. PostScript is actually a fully functional interpreted language, but unlike JavaScript it was never intended to be used directly by humans.\nThanks to everyone who sent this to our tips line!"}