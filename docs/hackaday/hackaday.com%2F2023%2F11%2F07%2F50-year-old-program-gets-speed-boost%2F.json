{"pubDate": "2023-11-08T06:00:23", "original_title": "50-Year-Old Program Gets Speed Boost", "link": "https://hackaday.com/2023/11/07/50-year-old-program-gets-speed-boost/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/11/4040-featured.jpg", "original_content": "At first glance, getting a computer program to run faster than the first electronic computers might seem trivial. After all, most of us carry enormously powerful processors in our pockets every day as if thats normal. But [Mark] isnt trying to beat computers like the ENIAC with a mobile ARM processor or other modern device. Hes now programming with the successor to the original Intel integrated circuit processor, the 4040, but beating the ENIAC is still little more complicated than you might think with a processor from 1974.\nFor this project, the goal was to best the 70-hour time set by ENIAC for computing the first 2035 digits of pi. There are a number of algorithms for performing this calculation, but using a 4-bit processor and an extremely limited memory of only 1280 bytes makes a number of these methods impossible, especially with the self-imposed time limit. The limited instruction set is a potential bottleneck as well with these early processors. [Mark] decided to use [Fabrice Bellard]\u2019s algorithm given these limitations. He goes into great detail about the mathematics behind this method before coding it in JavaScript. Generating assembly language from a working JavaScript was found to be fairly straightforward.\n[Mark] is also doing a lot of work on the 4040 to get this program running as well, including upgrades to the 40xx tool stack, the compiler and linker, and an emulator hes using to test his program before sending it to physical hardware. The project is remarkably well-documented, including all of the optimizations needed to get these antique processors running fast enough to beat the ENIAC. We wont spoil the results for you, but as a hint to how it worked out, he started this project using the 4040 since his original attempt using a 4004 wasnt quite fast enough.", "title": "\u300cENIAC\u3092\u8d85\u3048\u308d\uff011974\u5e74\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u3067\u30d4\u3092\u8a08\u7b97\u3059\u308b\u300d", "body": "1974\u5e74\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u3067\u300170\u6642\u9593\u304b\u304b\u3063\u305f\u8a08\u7b97\u3092\u3001Javascript\u3092\u4f7f\u3063\u3066\u6539\u5584\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002", "titles": ["\u300cENIAC\u3092\u8d85\u3048\u308d\uff011974\u5e74\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u3067\u30d4\u3092\u8a08\u7b97\u3059\u308b\u300d", "\u300c1280\u30d0\u30a4\u30c8\u306e\u30e1\u30e2\u30ea\u3067\u30d4\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u5236\u9650\u3092\u4e57\u308a\u8d8a\u3048\u3066\u300d", "\u300c1974\u5e74\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u3066ENIAC\u306e\u8a18\u9332\u306b\u6311\u3080\u300d", "\u300c\u53e4\u3044\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u4f7f\u3063\u3066\u30d4\u306e\u8a08\u7b97\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u65b9\u6cd5\u300d", "\u300cENIAC\u306e\u8a08\u7b97\u901f\u5ea6\u3092\u4e0a\u56de\u308b\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u6700\u9069\u5316\u6280\u8853\u300d"]}