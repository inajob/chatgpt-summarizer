{"pubDate": "2023-08-11T14:00:58", "original_title": "This Week in Security: It\u2019s Con Season", "link": "https://hackaday.com/2023/08/11/this-week-in-security-its-con-season/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "It must be Blackhat/DEFCON season. Up first in the storm of named vulnerabilities, we have Downfall. The PDF has the juicy details here. Its quite similar to the Zenbleed issue from last week, in that it abuses speculative execution to leak data via a hidden register. Unlike Zenbleed, this isnt direct access, but using cache timing analysis to extract individual bytes using a FLUSH+RELOAD approach.\nThe key to the vulnerability is the gather instruction, which pulls data from multiple locations in memory, often used to run a followup instruction on multiple bytes of data at once. The gather instruction is complex, takes multiple clock cycles to execute, and uses several tricks to execute faster, including managing buffers to avoid multiple reads. In certain cases, that instruction can be interrupted before it completes, leaving the data in the cache. And this data can be speculatively accessed and the values leaked through timing analysis.\nThis flaw affects 6th generation Intel Core processors through 11th. Mitigations are already rolling out via a microcode update, but do carry a performance hit for gather instructions.\nPhantom and Inception\nTheres another new issue, this time on the AMD side of the fence, called Inception. Taking its name from the movie, this one is all about tricking a CPU into believing a phantom speculation took place.\nTo understand that, we have to talk about Phantom (pdf), a technique that has an impact on all modern x86 processors. The key here is that processors do branch prediction all the time, to speed up execution flow. One of the tricks is to do branch prediction before even decoding instructions. This works by the CPU learning what code patterns are likely to be branches, and which branches are likely to be taken. Could that double prediction be abused somehow? Naturally.\nSo Phantom allows for training the CPU, such that a non-branching instruction still causes branch prediction. This can be used with another technique, Training in Transient Execution (TTE), to enable something interesting (pdf). See, TTE needs a specific code path that can be trained to speculate the wrong way. That path includes a reachable branch. But Phantom allows for an imagined branch, making many code paths into speculation gadgets.\nTo get all the CPU training done in the window, the attack does a really interesting trick  triggering speculative execution to get caught in a recursive loop. In dual-threaded mode, this is enough to completely overwrite the Return Stack Buffer (RSB), giving the Inception attack way more coverage. The results? On AMD Zen systems, only Zen 3 stands up well to the attack, with the rest of the CPUs tested leaking data, and even allowing a capture of the /etc/shadow contents in the majority of runs.\n\nDead Mans Cable\nYoure probably security conscious. Your hard drives are likely encrypted. You may even lock you desktop when you leave it, and never leave a laptop unattended. But what if you cant? By accident or intent, what is the backup plan if you cant power off or lock a device? Thats the problem the folks at Buskill are trying to help solve. The idea is pretty simple  a USB device that indicates user presence.\nConnect it to your body with a cable, detect the unplug, and lock the machine. The key here is to 3D-print a case, that makes that USB connection with pogo pins and a magnetic plug. Make it easy to break the connection, and hard to make a laptop come crashing down by mistake.\nBits and Bytes\nIts a bit ignominious to have the record for a countrys biggest hack ever, but that seems to be the award that Microsofts Exchange software now has. The UK Electoral Commission Has just announced that their systems were accessed way back in August 2021, and not discovered for 14 months. The timing here is interesting, as the ProxyNotShell vulnerability that is suspected to be the entry vector for this attack wasnt publicly discovered until 2022.\nSecurity by committee doesnt tend to go very well, even when the results are open source. The Open Supervised Device Protocol (OSDP) is supposed to keep data secure between a card reader and the central database. It was retrofitted with a Secure Channel add-on, in response to a previous eavesdropping attack. But it turns out that OSDP has some of the same problems. The Mellon device is about quarter sized, and when tapped into the serial connection that runs an OSDP connection, it can capture the encryption key used to secure the system. Speak friend and enter, indeed.\nKeyboards on mobile devices can be a problem, because the keyboard is usually an app, and that app has access to all your keystrokes. The usual advice is to never use a keyboard that asks for network access, but what if really does need the cloud to do its job? Thats the story with the Sogou keyboard, which uses Latin character inputs to generate Chinese characters. The heavy lifting happens in the cloud, which means all those keystrokes get sent over the internet by design. To make it worse, the encryption scheme it uses is terrible, and the Windows and Android versions of the app are vulnerable to sniffing attacks, such that a third party could capture that information. Yikes!\nAnd finally, tip of the hat to [Myself] in the Hackaday discord server for the opening lines and inspiration for the name of this weeks installment of the column.", "title": "\"Intel Core\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u65b0\u305f\u306a\u8106\u5f31\u6027\u2018Downfall\u2019\u304c\u767a\u898b\u3055\u308c\u308b\"", "body": "Blackhat/DEFCON\u30b7\u30fc\u30ba\u30f3\u3067\u3059\u306d\u3002\u6700\u521d\u306e\u8106\u5f31\u6027\u306fDownfall\u3067\u3059\u3002Zenbleed\u3068\u4f3c\u3066\u304a\u308a\u3001\u96a0\u3057\u30ec\u30b8\u30b9\u30bf\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002 gather\u547d\u4ee4\u304c\u8106\u5f31\u6027\u306e\u9375\u3067\u3042\u308a\u3001\u30a4\u30f3\u30c6\u30eb\u306e\u7b2c6\u4e16\u4ee3\u304b\u3089\u7b2c11\u4e16\u4ee3\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002 AMD\u306e\u554f\u984c\u3082\u3042\u308a\u307e\u3059\u3002 Phantom\u3068Inception\u306fCPU\u3092\u6b3a\u304f\u6280\u8853\u3067\u3059\u3002 Buskill\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u5b58\u5728\u3092\u691c\u77e5\u3059\u308bUSB\u30c7\u30d0\u30a4\u30b9\u3067\u3059\u3002 Microsoft Exchange\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u304c\u8a18\u9332\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002", "titles": ["\"Intel Core\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u65b0\u305f\u306a\u8106\u5f31\u6027\u2018Downfall\u2019\u304c\u767a\u898b\u3055\u308c\u308b\"", "\"AMD\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u304a\u3051\u308bCPU\u4eee\u60f3\u5316\u306e\u8106\u5f31\u6027\u2018Inception\u2019\u306b\u6ce8\u610f\"", "\"\u81ea\u52d5\u7684\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u30ed\u30c3\u30af\u3059\u308bUSB\u30b1\u30fc\u30d6\u30eb\u3001\u2018Dead Mans Cable\u2019\u304c\u767b\u5834\"", "\"UK\u9078\u6319\u59d4\u54e1\u4f1a\u306e\u30b7\u30b9\u30c6\u30e0\u306b14\u30f6\u6708\u9593\u4e0d\u6b63\u30a2\u30af\u30bb\u30b9\u3001Microsoft Exchange\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u8106\u5f31\u6027\u767a\u899a\"", "\"\u30ad\u30fc\u30dc\u30fc\u30c9\u30a2\u30d7\u30ea\u306e\u60aa\u7528\u306b\u3088\u308b\u60c5\u5831\u6f0f\u6d29\u3001Sogou\u30ad\u30fc\u30dc\u30fc\u30c9\u3078\u306e\u6ce8\u610f\""]}