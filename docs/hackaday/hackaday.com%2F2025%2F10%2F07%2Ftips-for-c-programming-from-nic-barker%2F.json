{"pubDate": "2025-10-08T02:00:32", "original_title": "Tips for C Programming from Nic Barker", "link": "https://hackaday.com/2025/10/07/tips-for-c-programming-from-nic-barker/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/10/C99-banner.jpg", "youtube": "https://www.youtube.com/watch?v=9UIIMBqq1D4", "original_content": "If youre going to be a hacker, learning C is a rite of passage. If you dont have much experience with C, or if your experience is out of date, you very well may benefit from hearing [Nic Barker] explain tips for C programming.\nIn his introduction he notes that C, invented in the 70s by Dennis Ritchie, is now more than 50 years old. This old language still appears in lists of the most popular languages, although admittedly not at the top!\nHe notes that the major versions of C, named for the year they were released, are: C89, C99, C11, and C23. His recommendation is C99 because it has some features he doesnt want to live without, particularly scoped variables and initializing structs with named members using designated initializers. Also C89 is plagued with non-standard integer types, and this is fixed by stdint.h in C99. Other niceties of C99 include compound literals and // for single-line comments.\n\nHe recommends the use of clang arguments -std=c99 to enable C99, -Wall to enable all warnings, and -Werror to treat warnings as errors, then he explains the Unity Build where you simply include all of your module files from your main.c file.\nIts stressed that printf debugging is not the way to go in C and that you definitely want to be using a debugger. To elaborate on this point he explains what a segfault is and how they happen.\nHe goes on to explain memory corruption and how ASAN (short for Address Sanitisation) can help you find when it happens. Then he\u00a0covers Cs support for arrays and strings, which is, admittedly, not very much! He shows you that its pretty easy to make your own array and string types though, potentially supporting slices as well.\nFinally he explains how to use arenas for memory allocation and management for static, function, and task related memory.\n"}