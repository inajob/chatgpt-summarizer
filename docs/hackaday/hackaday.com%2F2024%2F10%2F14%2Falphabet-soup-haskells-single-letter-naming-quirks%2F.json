{"pubDate": "2024-10-14T08:00:26", "original_title": "Alphabet Soup: Haskell\u2019s Single-Letter Naming Quirks", "link": "https://hackaday.com/2024/10/14/alphabet-soup-haskells-single-letter-naming-quirks/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/10/has.png", "original_content": "When you used punch cards or tape to write a computer program, brief variable names were the norm. Your compiler or assembler probably only allowed six letters, anyway. But times change, and people who, by habit, give array indices variable names like I, J, or K get a lot of grief. But [Jack Kelly] points out that for highly polymorphic languages like Haskell, you often dont know what that variable represents anyway. So how are you supposed to name it? He provides a guide to one-letter variable names commonly used by Haskell developers and, sometimes, others.\nHaskells conventions are particularly interesting, especially with i, j, and k, which are borrowed from mathematical tradition to signify indices or integers and passed on via Fortran. The article also highlights how m often refers to Monads and Monoidal values, while t can represent both traversables and text values. Perhaps more obscurely, p can denote profunctors and predicates, giving a glimpse into Haskell\u2019s complex yet efficient type system. These naming conventions are not formal standards but have evolved into a grass-roots lexicon.\nOf course, you can go too far. We see a lot of interesting and strange things written in Haskell, including this OpenSCAD competitor.", "title": "Haskell\u3067\u4f7f\u308f\u308c\u308b\u4e00\u6587\u5b57\u5909\u6570\u540d\u306e\u30ac\u30a4\u30c9", "body": "Haskell\u958b\u767a\u8005\u304c\u3088\u304f\u4f7f\u3046\u4e00\u6587\u5b57\u5909\u6570\u540d\u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u3002i, j, k\u304cFortran\u304b\u3089\u7d99\u627f\u3055\u308c\u3001m\u306f\u30e2\u30ca\u30c9\u3001t\u306f\u30c8\u30e9\u30d0\u30fc\u30b5\u30d6\u30eb\u3084\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u3057\u3001p\u306f\u30d7\u30ed\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3084\u8ff0\u8a9e\u3092\u8868\u3059\u3002 Haskell\u306e\u8907\u96d1\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u53cd\u6620\u3002\u8981\u7d04\u6587\u6570\u30aa\u30fc\u30d0\u30fc\u3002", "titles": ["Haskell\u3067\u4f7f\u308f\u308c\u308b\u4e00\u6587\u5b57\u5909\u6570\u540d\u306e\u30ac\u30a4\u30c9", "Haskell\u306e\u5909\u6570\u540d\u30b3\u30f3\u30d9\u30f3\u30b7\u30e7\u30f3", "Haskell\u306ei\u3001j\u3001k\u306e\u5909\u6570\u540d\u306f\u6570\u5b66\u7684\u4f1d\u7d71\u304b\u3089\u5f15\u304d\u7d99\u304c\u308c\u308b", "Haskell\u306e\u5909\u6570\u540d\u306e\u9032\u5316\u3057\u305f\u8349\u306e\u6839\u8a00\u8a9e", "Haskell\u3067\u898b\u3089\u308c\u308b\u4e00\u6587\u5b57\u5909\u6570\u540d\u306e\u8208\u5473\u6df1\u3055"]}