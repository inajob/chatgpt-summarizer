{"pubDate": "2025-09-29T20:00:00", "original_title": "Macintosh System 7 Ported To x86 With LLM Help", "link": "https://hackaday.com/2025/09/29/macintosh-system-7-ported-to-x86-with-llm-help/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/09/Screenshot-2025-09-25-115950-e1758765652277.png", "original_content": "You can use large language models for all sorts of things these days, from writing terrible college papers to bungling legal cases. Or, you can employ them to more interesting ends, such as porting Macintosh System 7 to the x86 architecture, like [Kelsi Davis] did.\nWhen Apple created the Macintosh lineup in the 1980s, it based the computer around Motorolas 68K CPU architecture. These 16-bit/32-bit CPUs were plenty capable for the time, but the platform ultimately didnt have the same expansive future as Intels illustrious x86 architecture that underpinned rival IBM-compatible machines.\n[Kelsi Davis] decided to port the Macintosh System 7 OS to run on native x86 hardware, which would be challenging enough with full access to the source code. However, she instead performed this task by analyzing and reverse engineering the System 7 binaries with the aid of Ghidra and a large language model. Soon enough, she had the classic System 7 desktop running on QEMU with a fully-functional Finder and the GUI working as expected. [Kelsi] credits the LLM with helping her achieve this feat in just three days, versus what she would expect to be a multi-year effort if working unassisted.\nFiles are on GitHub for the curious. We love a good port around these parts; we particularly enjoyed these efforts to recreate Portal on the N64. If youre doing your own advanced tinkering with Macintosh software from yesteryear, dont hesitate to let us know."}