{"pubDate": "2025-01-31T15:00:40", "original_title": "This Week in Security: DeepSeek\u2019s Oopsie, AI Tarpits, And Apple\u2019s Leaks", "link": "https://hackaday.com/2025/01/31/this-week-in-security-deepseeks-oopsie-ai-tarpits-and-apples-leaks/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "DeepSeek has captured the worlds attention this week, with an unexpected release of the more-open AI model from China, for a reported mere $5 million training cost. While theres lots of buzz about DeepSeek, here were interested in security. And DeepSeek has made waves there, in the form of a ClickHouse database unintentionally opened to the world, discovered by the folks from Wiz research. That database contained chat history and log streams, and API keys and other secrets by extension.\nFinding this database wasnt exactly rocket science  it reminds me of my biggest bug bounty win, which was little more than running a traceroute and a port scan. In this case it was domain and sub domain mapping, and a port scan. The trick here was knowing to try this, and then understanding what the open ports represented. And the ClickHouse database was completely accessible, leaking all sorts of sensitive data.\nAI Tarpit\nDoes it really grind your gears that big AI companies are training their models on your content? Is an AI crawler ignoring your robots.txt? You might need help from Nepenthes. Now before you get too excited, lets be clear, that this is a malicious software project. It will take lots of CPU cycles, and its explicitly intended to waste the time of AI crawlers, while also feeding gibberish into their training models.\nThe project takes the form of a website that loads slowly, generates gibberish text from a Markov chain, and then generates a handful of unique links to other pages on the site. It forms the web equivalent of an infinite maze of twisty little passages, all alike.\nWhile the project has been a success, confirmed by the amount of time various web crawlers have spent lost inside, AI companies are aware of this style of attack, and mitigations are coming.\nCheck out the demo, but dont lose too much time in there.\nhttps://arstechnica.com/tech-policy/2025/01/ai-haters-build-tarpits-to-trap-and-trick-ai-scrapers-that-ignore-robots-txt/\nIs The QR Code Blue and Black?\nOr is it White and Gold\nThis is a really interesting bit of research happening on a Mastodon thread. The initial hack was a trio of QR codes, pointing to three different news sites, interleaved beneath a lenticular lens. Depending on the angle from which it was viewed, this arrangement led to a different site. That provoked [Christian Walther] to question whether the lens was necessary, or if some old-school dithering could pull off the same trick. Turns out that it sure can. One image, two URL. Wed love to see this extended to QR codes that register differently under different lighting, or other fun tricks. Head over to Elliots coverage for more on this one.\nSLAPing and FLOPing Apple\nApples A and M chips have a pair of recently discovered speculative execution flaws, FLOP and SLAP. Thats False Load Out Predictions and Speculation in Load Address Predictions . FLOP uses mispredicted memory contents to access data, and SLAP uses mispredicted memory addresses. The takeaway is that Javascript running on one page can leak bytes from another web page.\nBoth of these attacks have their own wrinkles and complexities. SLAP has only been demonstrated in Safari, and is triggered by training the address prediction on an address layout pattern that leads into memory outside the real buffer. By manipulating Safari into loading another page in the same process as the attacker page, this can be used to leak buffer data from that other page.\nFLOP is much more powerful, and works in both Safari and Chrome, and is triggered by training the CPU that a given load instruction tends to return the same data each time. This can be used in Safari to pull off a type confusion speculation issue, leading to arbitrary data leakage from any memory address on the system. In Chrome the details are a bit different, but the result is still an arbitrary memory read primitive.\nThe worst case scenario is that a compromised site in one tab can pull data from the rest of the system. Theres an impressive demo where a compromised tab reads data from ProtonMail running in a different tab. Apples security team is aware of this work, and has stated that it does not consider these attacks to be immediately exploitable as real world attacks.\nBits and Bytes\nWatchTowr is back with the details on another Fortigate vulnerability, and this time its a race condition in the jsconsole management interface, resulting in an authentication bypass, and jumping straicht to super_admin on the system.\nUnicode continues causing security problems, to no great surprise. Windows has a Best-Fit character conversion facility, which attempts to convert Unicode characters to their nearest ASCII neighbors. That causes all sorts of problems, in the normal divergent-parser-behavior way. When a security check happens on the Unicode text, but the Best-Fit conversion happens before the text is actually used, the check is neatly bypassed by the text being Best-Fit into ASCII.\nAnd finally, Googles Project Zero has an in-depth treatment of COM object exploitation with IDispatch. COM objects can sometimes be accessed across security boundaries, and sometimes those remote objects can be used to execute code. This coverage dives into the details of how the IDispatch interface can be used to trigger this behavior. Nifty!", "title": "\u6df1\u523b\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\uff1aDeepSeek\u3068\u6f0f\u6d29\u3057\u305f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9", "body": "\u4e2d\u56fd\u306eAI\u30e2\u30c7\u30ebDeepSeek\u304c\u516c\u958b\u3055\u308c\u3001\u30c7\u30fc\u30bf\u6f0f\u6d29\u304c\u767a\u899a\u3002\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u3082\u6307\u6458\u3002", "titles": ["\u6df1\u523b\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\uff1aDeepSeek\u3068\u6f0f\u6d29\u3057\u305f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9", "AI\u80b2\u3066\u306e\u60aa\u622f\uff1aNepenthes\u304cAI\u30af\u30ed\u30fc\u30e9\u30fc\u3092\u6b3a\u304f\u624b\u6cd5", "QR\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u305f\u65b0\u305f\u306a\u8996\u899a\u30c8\u30ea\u30c3\u30af\u306e\u5b9f\u9a13", "Apple\u306e\u65b0\u305f\u306a\u8106\u5f31\u6027\uff1aFLOP\u3068SLAP\u306b\u3088\u308b\u30c7\u30fc\u30bf\u6f0f\u6d29\u306e\u5371\u967a\u6027", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u76f2\u70b9\uff1aUnicode\u3068COM\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8106\u5f31\u6027\u89e3\u6790"]}