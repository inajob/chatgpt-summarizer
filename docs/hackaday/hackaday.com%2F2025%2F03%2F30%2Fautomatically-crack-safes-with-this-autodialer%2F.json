{"pubDate": "2025-03-30T11:00:40", "original_title": "Automatically Crack Safes with this Autodialer", "link": "https://hackaday.com/2025/03/30/automatically-crack-safes-with-this-autodialer/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2025/03/autodialer-main.png", "youtube": "https://www.youtube.com/watch?v=BcfdyP5HKWw", "original_content": "When attempting to secure something, whether its a computer, sensitive data, or valuables, theres always going to be a way to break that security. It might be impossibly hard, like taking centuries to brute-force an encryption algorithm, but its weakness is still there. And, like the future might make certain encryption obsolete, modern electronics has made security of the past somewhat obsolete as well. [Startup Chuck] has been using tools the creators of safes from the late 1800s could probably not have imagined.\nThe tool that [Startup Chuck] has come up with is known as an autodialer in the safe-cracking world, and as its name suggests it automates the process of opening the safe by trying as many combinations as possible. The autodialer attaches to the safe with three magnetic feet and couples to the dial through a chuck attached to a magnetic clutch, which allows the autodialer to disengage as soon as the correct combination is found. Its driven with a stepper motor which can test out combinations so fast that [Startup Chuck] needed to take 240 fps video and slow it down to make sure that the mechanism was behaving properly.\nThe autodialer itself cant actually open the safe, though. The last step of the process is taken care of by a bungie cord, attached to the safe handle to pre-tension it enough so that when the correct combination is finally entered the safe pops open automatically. For anyone looking to duplicate the project, [Startup Chuck] has added the program code to a GitHub page. If youre looking at a more modern safe, though, there are of course ways to crack their security systems as well.\n\n", "title": "- \u9032\u5316\u3059\u308b\u91d1\u5eab\u7834\u308a\uff1a\u30aa\u30fc\u30c8\u30c0\u30a4\u30e4\u30e9\u30fc\u306e\u4ed5\u7d44\u307f", "body": "[Startup Chuck]\u306f\u81ea\u52d5\u30c0\u30a4\u30e4\u30eb\u88c5\u7f6e\u3067\u91d1\u5eab\u3092\u958b\u3051\u308b\u6280\u8853\u3092\u958b\u767a\u3002", "titles": ["- \u9032\u5316\u3059\u308b\u91d1\u5eab\u7834\u308a\uff1a\u30aa\u30fc\u30c8\u30c0\u30a4\u30e4\u30e9\u30fc\u306e\u4ed5\u7d44\u307f", "- \u91d1\u5eab\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u6253\u7834\u3059\u308b\u6700\u65b0\u6280\u8853", "- \u81ea\u52d5\u5316\u3055\u308c\u305f\u91d1\u5eab\u306e\u89e3\u9664\uff1a\u30b9\u30c6\u30c3\u30d1\u30fc\u30e2\u30fc\u30bf\u30fc\u306e\u529b", "- \u30af\u30e9\u30c3\u30ad\u30f3\u30b0\u91d1\u5eab\u7528\u306e\u30aa\u30fc\u30c8\u30c0\u30a4\u30e4\u30e9\u30fc\u3092\u4f5c\u6210\u3057\u3088\u3046", "- GitHub\u3067\u5b66\u3076\uff01\u91d1\u5eab\u7834\u308a\u7528\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\u65b9\u6cd5"]}