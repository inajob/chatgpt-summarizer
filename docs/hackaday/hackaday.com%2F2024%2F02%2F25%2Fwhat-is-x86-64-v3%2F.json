{"pubDate": "2024-02-25T09:00:32", "original_title": "What is x86-64-v3?", "link": "https://hackaday.com/2024/02/25/what-is-x86-64-v3/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/02/x64.png", "youtube": "https://www.youtube.com/watch?v=TnCkYthXUAc", "original_content": "You may have heard Linux pundits discussing x86-64-v3. Can recompiling Linux code to use this bring benefits? To answer that question, you probably need to know what x86-64-v3 is, and [Gary Explains] well explains it in a recent video.\nIf youd rather digest text, RedHat has a recent article about their experiments using the instructions set in RHEL10. From that article, you can see that most of the new instructions support some enhancements for vectors and bit manipulation. It also allows for more flexible instructions that leave their results in an explicit destination register instead of one of the operand registers.\nOf course, none of this matters for high-level code unless the compiler supports it. However, gcc version 12 will automatically vectorize code when using the -O2 optimization flags.\n\nTheres a snag of course, that will make code incompatible with older CPUs. How old? Intel has supported these instructions since 2013 in the Haswell CPUs. Although some Atom CPUs have had v3 since 2021, some later Intel Atoms do not support it fully. AMD came to the party in 2015. There is a newer set of instructions, x86-64-v4. However, this is still too new, so most people, including RedHat, plan to support v3 for now. You can find a succinct summary table on Wikipedia.\nSo, outside of Atom processors, you must have some old hardware to not have the v3 instructions. Some of these instructions are pretty pervasive, so switching at run time doesnt seem very feasible.\nWe wonder if older processors would trip illegal instruction interrupts for these instructions. If so, you could add emulated versions the same way old CPUs used to emulate math coprocessors if they didnt have one.\nKeep in mind that the debate about dropping versions before x86-64-v3 doesnt mean Linux itself will care. This is simply how the distributions do their compile. While compiling everything yourself is possible but daunting, there will doubtlessly be distributions that elect to maintain support for older CPUs for as long as the Linux kernel will allow it.\nIntel would like to drop older non-64-bit hardware from CPUs. If you want to sharpen up your 64-bit assembly language skills, try a GUI.\n\n(Title image from Wikipedia)", "title": "x86-64-v3\u3068\u306f\u4f55\u304b\uff1fRedHat\u306e\u5b9f\u9a13\u7d50\u679c\u306b\u57fa\u3065\u3044\u3066\u89e3\u8aac", "body": "x86-64-v3\u306e\u6700\u9069\u5316\u3084\u5229\u7528\u53ef\u80fd\u306a\u65b0\u3057\u3044\u547d\u4ee4\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u7d39\u4ecb\u3002\u53e4\u3044CPU\u3068\u306e\u4e92\u63db\u6027\u306b\u6ce8\u610f\u3002RedHat\u306e\u7814\u7a76\u3092\u7d39\u4ecb\u3057\u3001gcc 12\u3067\u81ea\u52d5\u30d9\u30af\u30c8\u30eb\u5316\u53ef\u80fd\u3002Wikipedia\u306b\u7c21\u6f54\u306a\u60c5\u5831\u3082\u3042\u308a\u3002", "titles": ["x86-64-v3\u3068\u306f\u4f55\u304b\uff1fRedHat\u306e\u5b9f\u9a13\u7d50\u679c\u306b\u57fa\u3065\u3044\u3066\u89e3\u8aac", "GCC\u30d0\u30fc\u30b8\u30e7\u30f312\u3067\u81ea\u52d5\u30d9\u30af\u30c8\u30eb\u5316\uff01-O2\u6700\u9069\u5316\u30d5\u30e9\u30b0\u306e\u5229\u70b9", "\u30a4\u30f3\u30c6\u30eb\u3068AMD\u306eCPU\u3067\u306ex86-64-v3\u5b9f\u88c5\u72b6\u6cc1", "\u53e4\u3044\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3067x86-64-v3\u547d\u4ee4\u30bb\u30c3\u30c8\u306f\u4f7f\u3048\u308b\u304b\uff1f", "Linux\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u304a\u3051\u308b\u904e\u53bb\u30d0\u30fc\u30b8\u30e7\u30f3\u3078\u306e\u5bfe\u5fdc"]}