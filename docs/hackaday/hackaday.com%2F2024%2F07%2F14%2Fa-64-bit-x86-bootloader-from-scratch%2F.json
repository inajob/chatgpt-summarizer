{"pubDate": "2024-07-15T05:00:43", "original_title": "A 64-bit x86 Bootloader from Scratch", "link": "https://hackaday.com/2024/07/14/a-64-bit-x86-bootloader-from-scratch/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/seg.png", "original_content": "For most people, you turn on your computer, and it starts the operating system. However, the reality is much more complex as [Thasso] discovered. Even modern x86 chips start in 16-bit real mode and there is a bit of fancy footwork required to shift to modern protected mode with full 64-bit support. Want to see how? [Thasso] shows us the ropes.\nNowadays, it is handy to develop such things because you dont have to use real hardware. An emulator like QEMU will suffice. If you know assembly language, the process is surprisingly simple, although there is a lot of nuance and subtlety. The biggest task is setting up appropriate paging tables to control the memory mapping. In real mode, you have access to the first 64 K of memory unless you use some tricks. But in protected mode, segments define blocks of memory that can be very small or cover the entire address space. These segments define areas of memory even though it is possible to set segments to cover all memory and  sort of  ignore them. You still have to define them for the switch to protected mode.\nIn the bad old days, you had more reason to worry about this if you were writing a DOS Extender or using some tricks to get access to more memory. But still good to know if you are rolling your own operating system. Why do the processors still boot into real mode? Good question.", "title": "\"x86\u30c1\u30c3\u30d7\u306e\u8d77\u52d5\u30d7\u30ed\u30bb\u30b9\uff1a16\u30d3\u30c3\u30c8\u304b\u308964\u30d3\u30c3\u30c8\u3078\"", "body": "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306e\u8d77\u52d5\u30d7\u30ed\u30bb\u30b9\u306e\u8907\u96d1\u306a\u5074\u9762\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u3066\u304a\u308a\u3001\u73fe\u4ee3\u306ex86\u30c1\u30c3\u30d7\u308216\u30d3\u30c3\u30c8\u306e\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3084\u300164\u30d3\u30c3\u30c8\u306e\u4fdd\u8b77\u30e2\u30fc\u30c9\u3078\u306e\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u306b\u306f\u7d30\u304b\u306a\u4f5c\u696d\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u304c\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002", "titles": ["\"x86\u30c1\u30c3\u30d7\u306e\u8d77\u52d5\u30d7\u30ed\u30bb\u30b9\uff1a16\u30d3\u30c3\u30c8\u304b\u308964\u30d3\u30c3\u30c8\u3078\"", "\"QEMU\u3092\u4f7f\u3063\u305fPC\u30d6\u30fc\u30c8\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\"", "\"\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067\u5b9f\u8df5\uff1a\u30d7\u30ed\u30c6\u30af\u30c8\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\"", "\"\u30e1\u30e2\u30ea\u30de\u30c3\u30d4\u30f3\u30b0\uff1a\u30da\u30fc\u30b8\u30f3\u30b0\u30c6\u30fc\u30d6\u30eb\u306e\u8a2d\u5b9a\"", "\"\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u304b\u3089\u30d7\u30ed\u30c6\u30af\u30c8\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c\""]}