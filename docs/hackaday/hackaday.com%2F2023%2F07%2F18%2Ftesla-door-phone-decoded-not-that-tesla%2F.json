{"pubDate": "2023-07-18T14:00:00", "original_title": "Tesla Door Phone Decoded (Not That Tesla)", "link": "https://hackaday.com/2023/07/18/tesla-door-phone-decoded-not-that-tesla/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2023/07/tesla.png", "original_content": "[Danman] has digital door phones manufactured by Tesla  or at least, a Tesla, as theyre not to be confused with the carmaker, though. The problem is if someone comes to the door when no ones home, theres no remote indicator. The answer? Reverse engineer the protocol and fix it.\nA quick dump on a storage scope showed the data clearly, but it wasnt obvious what protocol it was using. After a little analysis, it proved the datastream used 4 PWM pulses as symbols with three symbols: one, zero, and stuffing sequence.\nOnce you can read the bits, it is easy to determine that each frame consists of a 16-bit destination and source address, along with a command byte and a checksum byte. Each station can have an ID from 000 to 999 although you can only dial up to number 323. Some nodes are special, and there are ways to address particular units.\nConnecting to the hardware took a transformer for isolation. Honestly, unless you have this exact hardware, this isnt likely to be something you can directly use. However, it is a great example of how you can figure out a specialized device and bend it to your will.\nWe love reverse engineering projects. In some cases, it is easier if you have a CT scan."}