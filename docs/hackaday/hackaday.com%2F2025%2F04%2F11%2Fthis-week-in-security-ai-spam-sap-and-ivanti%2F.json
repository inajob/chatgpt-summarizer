{"pubDate": "2025-04-11T14:00:22", "original_title": "This Week in Security: AI Spam, SAP, and Ivanti", "link": "https://hackaday.com/2025/04/11/this-week-in-security-ai-spam-sap-and-ivanti/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "AI continues to be used in new and exciting ways like generating spam messages. Yes, it was inevitable, but we now have spammers using LLM to generate unique messages that dont register as spam. AkiraBot is a Python-powered tool, designed to evade CAPTCHAs, and post sketchy SEO advertisements to web forms and chat boxes around the Internet.\nAkiraBot uses a bunch of techniques to look like a legitimate browser, trying to avoid triggering CAPTCHAs. It also runs traffic through a SmartProxy service to spread the apparent source IP around. Some captured logs indicate that of over 400,000 attempted victim sites, 80,000 have successfully been spammed.\n\nSSRF Attacking AWS\nMarch brought a spike in instances of an interesting EC2 attack. F5 labs has the details, and its really pretty simple. Someone is sending requests ending in /?url=hxxp://169.254.169.254/latest/meta-data/iam/security-credentials/, with the hope that the site is vulnerable to a Server Side Request Forgery (SSRF).\nThat IP address is an interesting one. Its the location where Amazon EC2 makes the Instance Metadata Service available (IMDSv1). Version 1 of this service completely lacks authentication, so a successful SSRF can expose whatever information that service makes available. And that can include AWS credentials and other important information. The easiest fix is to upgrade the instance to IMDSv2, which does have all the authentication features youd expect.\nSAP and setuid\nUp next is this Anvil Secure report from [Tao Sauvage], about finding vulnerable setuid binaries in the SAP Linux images.\nSetuid is a slightly outdated way to allow a less-privileged user to run a binary with elevated privileges. The simplest example is ping, which needs raw socket access to send special ICMP packets. The binary is launched by the user, escalates its privileges to send the packet, and then terminates without actually breaking the security barrier. At least thats what is supposed to happen. In reality, setuid binaries are a consistent source of privilege escalation problems on Linux. So much so, that its now preferred to use the capabilities functionality to achieve this. But thats fairly new, and many distros just give binaries like ping the setuid bit.\nThis brings us to SAPs Linux images, like SAP HANA Express. These images include a small collection of custom setuid binaries, with icmbnd and hostexecstart catching our researchers eyes. icmbnd notably has the -f flag to specify the output file for a debug trace. Thats a typical setuid problem, in that a user can specify an oddball location, and the binary will change the systems state in unexpected ways. Its an easy denial of service attack, but is there a way to actually get root? It turns out the the Linux /etc/passwd file is particularly resilient. Lines that dont make any sense as password entries are just ignored. Inject a pair of newlines and a single valid passwd entry into the passwd file, and you too can be root on an SAP system.\nThe hostexecstart vulnerability is a bit more involved. That binary starts and stops the SAP Host Agent on the system. That would be a dead end, except it can also take a SAR archive and upgrade the system agent. [Tao] chased a couple of dead ends regarding library injection and SAR archive signing, before finally using another standard setuid technique, the symbolic link. In this case, link the /etc/passwd file to the local sapcar_output location, and include a malicious passwd line inside a cooked SAR archive. hostexecstart tries to unpack the archive, and outputs the log right into the local sapcar_output file. But that file is really a symbolic link, and it once again clobbers passwd.\nGoogles Take on End-to-end-encryption\nWere fans of end-to-end encryption around here. If Alice had a message thats only intended for Bob to see, then it seems only right that Bob is really the only one that can read the message. The reality of modern cryptography is that this is 100% possible via RSA encryption, and the entire variety of asymmetric encryption schemes that followed. The problem with actually using such encryption is that its a pain. Between managing keys, getting an email client set up properly, and then actually using the system in practice, end-to-end asymmetric encryption is usually just not worth the hassle for everyday people.\nGoogle feels that pain, and is bringing easy end-to-end encryption to business Gmail accounts. Except, its not actually asymmetric encryption. This works using the key access control list (KACL). Here Alice writes a message, and asks the KACL server for a key to use to send it to Bob. The server provides a symmetric key, and Alice encrypts the message. Then when Bob receives the message, he asks the same server for the same key, and the server provides it, allowing him to decrypt the message.\nSo is this actually end-to-end encryption? Yes, but also no. While this solution does mean that Google never has the key needed to decrypt the message, it also means that whoever is running the KACL server does have that key. But it is better than the alternative. And the technique in use here could be adapted to make true symmetric encryption far easier for end users.\nIvanti Connect Active Exploit\nGoogles Mandiant has announced that Ivanti Connect Secure boxes are under active exploitation via an n-day exploit. This is a buffer overflow that Ivanti discovered internally, and patched in February of this year. The overflow was considered to be strictly limited to denial of service, as the characters written to memory could only be digits and the dot symbol. If that sounds like an IP address, just hang on, and well get there.\nIts apparent that malware actors around the world are actively checking for potential vulnerabilities in Ivanti firmware updates, as the group Mandiant calls UNC5221 has apparently worked out a way to achieve Remote Code Execution with this vulnerability, and is using it to deploy malware on these systems. This is thought to be the same Chinese group that Microsoft appropriately calls Silk Typhoon.\nOur friends at watchTowr have dug a bit more into this issue, and found the exact vulnerable code. Its in HTTP header handling code, where a specific header is first limited to numerals and the period, and then copied into a fixed size buffer. Remember that observation that this sounds like an IP address? The header is X-Forwarded-For, and setting that to a long string of numbers on a vulnerable Ivanti box will indeed trigger a crash in the web binary. Theres no word yet on how exactly that was used to achieve RCE, but were very much hoping the rest of the story comes to light, because its an impressive feat.\nBits and Bytes\nAbout 100,000 WordPress sites have a real problem. The Ottokit plugin has an authentication bypass issue, where a blank API key can be matched by setting an empty st_authorization header in an incoming request. The flaw was reported privately on April 3rd, and a fixed version was released the same day. But within hours exploitation attempts were seen in the wild.\nLegacy Gigacenter devices expose a TR-069 service on port 6998. That service can be accessed with a simple telnet connection, and the commands entered here are not properly sanitized before being evaluated. Anything inside a $() substitution string is executed locally: $(ping -c5 your.ip.address) This makes for an exceedingly trivial remote code execution attack on these devices.\nAnd finally, the Langflow AI workflow tool has a simple remote exploit vulnerability fixed in version 1.3.0. This vulnerability notably allows bypassing authentication through an API endpoint. While Langflow has Python execution by design, doing it while bypassing authentication is a definite problem. You should update to 1.3.0, and dont expose Langflow to the Internet at all if you can help it.", "title": "\u30b9\u30d1\u30df\u30f3\u30b0\u306e\u65b0\u624b\u6cd5\uff1aAI\u3092\u6d3b\u7528\u3057\u305fAkiraBot\u306e\u8105\u5a01", "body": "AI\u304c\u30b9\u30d1\u30e0\u30e1\u30c3\u30bb\u30fc\u30b8\u751f\u6210\u306b\u5229\u7528\u3055\u308c\u3001\u65b0\u305f\u306a\u653b\u6483\u3084\u8106\u5f31\u6027\u3082\u5897\u52a0\u4e2d\u3002", "titles": ["\u30b9\u30d1\u30df\u30f3\u30b0\u306e\u65b0\u624b\u6cd5\uff1aAI\u3092\u6d3b\u7528\u3057\u305fAkiraBot\u306e\u8105\u5a01", "AWS\u306eSSRF\u653b\u6483\uff1aAmazon EC2\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u8106\u5f31\u6027", "SAP Linux\u306esetuid\u30d0\u30a4\u30ca\u30ea\u306e\u8106\u5f31\u6027\u3068\u7279\u6a29\u6607\u683c", "Google\u306e\u30a8\u30f3\u30c9\u30c4\u30fc\u30a8\u30f3\u30c9\u6697\u53f7\u5316\u306e\u65b0\u30a2\u30d7\u30ed\u30fc\u30c1", "Ivanti Connect\u306e\u8106\u5f31\u6027\uff1a\u30ea\u30e2\u30fc\u30c8\u30b3\u30fc\u30c9\u5b9f\u884c\u306e\u5371\u967a\u6027"]}